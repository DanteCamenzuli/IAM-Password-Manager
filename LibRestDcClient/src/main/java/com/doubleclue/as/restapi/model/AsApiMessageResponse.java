/**
 * App Secure Authentication Messages
 * A secure App for secure authentication and messages
 *
 * OpenAPI spec version: 1.0.0
 * Contact: xxxx@hws-gruppe.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.doubleclue.as.restapi.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
/**
 * AsApiMessageResponse
 */

@SuppressWarnings("serial")
public class AsApiMessageResponse  implements Serializable {
  @JsonProperty("id")
  private long id = 0l;

  @JsonProperty("final")
  private boolean _final = false;

  @JsonProperty("deviceName")
  private String deviceName = null;

  @JsonProperty("userLoginId")
  private String userLoginId = null;

  @JsonProperty("msgStatus")
  private AsApiMsgStatus msgStatus = null;

  @JsonProperty("inputMap")
  private List<AsMapEntry> inputMap = new ArrayList<AsMapEntry>();

  @JsonProperty("actionId")
  private String actionId = null;

  @JsonProperty("info")
  private String info = null;

  @JsonProperty("sessionId")
  private String sessionId = null;

  @JsonProperty("signature")
  private byte[] signature = null;

 
   /**
   * Get id
   * @return id
  **/
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  
   /**
   * Get _final
   * @return _final
  **/
  public boolean getFinal() {
    return _final;
  }

  public void setFinal(boolean _final) {
    this._final = _final;
  }


   /**
   * This is only available when 'final' is true.
   * @return deviceName
  **/
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }

 
   /**
   * Get userLoginId
   * @return userLoginId
  **/
  public String getUserLoginId() {
    return userLoginId;
  }

  public void setUserLoginId(String userLoginId) {
    this.userLoginId = userLoginId;
  }


   /**
   * Get msgStatus
   * @return msgStatus
  **/
  public AsApiMsgStatus getMsgStatus() {
    return msgStatus;
  }

  public void setMsgStatus(AsApiMsgStatus msgStatus) {
    this.msgStatus = msgStatus;
  }

  
  public AsApiMessageResponse addInputMapItem(AsMapEntry inputMapItem) {
    this.inputMap.add(inputMapItem);
    return this;
  }

   /**
   * if template contains input fields, these are the input data entered by the user.  Only set when final is true
   * @return inputMap
  **/
  public List<AsMapEntry> getInputMap() {
    return inputMap;
  }

  public void setInputMap(List<AsMapEntry> inputMap) {
    this.inputMap = inputMap;
  }

 
   /**
   * This is the template's Button's ID which the user activate.
   * @return actionId
  **/
  public String getActionId() {
    return actionId;
  }

  public void setActionId(String actionId) {
    this.actionId = actionId;
  }

 
   /**
   * Get info
   * @return info
  **/
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }

 
   /**
   * This is optional. Value returned from addMessage.
   * @return sessionId
  **/
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }

 
   /**
   * This is optional. Available only if \"signatureRequired\" was true and 'final' is true.
   * @return signature
  **/
  public byte[] getSignature() {
    return signature;
  }

  public void setSignature(byte[] signature) {
    this.signature = signature;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsApiMessageResponse asApiMessageResponse = (AsApiMessageResponse) o;
    return Objects.equals(this.id, asApiMessageResponse.id) &&
        Objects.equals(this._final, asApiMessageResponse._final) &&
        Objects.equals(this.deviceName, asApiMessageResponse.deviceName) &&
        Objects.equals(this.msgStatus, asApiMessageResponse.msgStatus) &&
        Objects.equals(this.inputMap, asApiMessageResponse.inputMap) &&
        Objects.equals(this.actionId, asApiMessageResponse.actionId) &&
        Objects.equals(this.info, asApiMessageResponse.info) &&
        Objects.equals(this.sessionId, asApiMessageResponse.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsApiMessageResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _final: ").append(toIndentedString(_final)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    msgStatus: ").append(toIndentedString(msgStatus)).append("\n");
    sb.append("    inputMap: ").append(toIndentedString(inputMap)).append("\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

