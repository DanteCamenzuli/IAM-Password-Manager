swagger: '2.0'
info:
  version: '1.4.1'
  title: DoubleClue REST API
  description: DoubleClue URL http://yourhost:8001/dcem/restApi/as
  termsOfService: _
  contact:
    name: HWS Informationssysteme GmbH
    email: emanuel.galea@hws-gruppe.de
    url: http://www.hws-gruppe.de
  
host: localhost
basePath: /restApi
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /misc/echo:
    get:
      description: This is used for testing purposes
      operationId: echo
      produces:
        - application/json
        - text/xml
        - text/html
      parameters:
        - name: text
          in: query
          type: string
      responses:
          '200':
           description: the echo text
           schema:
            type: string
          '599':
            description: Server Logic Exception
            schema:
              $ref: '#/definitions/asApiException'
    
  /message:
    get:
      description: Get the message response
      operationId: getMessageResponse
      produces:
        - application/json
      parameters:
        - name: msgId
          in: query
          description: The message Id returned by post Message
          required: true
          type: integer  
          format: int64   
        - name: waitTimeSeconds
          in: query
          required: false
          type: integer 
          format: int32
          default: 0 
          description: This is the time in seconds this method will wait till it gets a final-state message. Zero means don't wait at all. The value maybe between 0 and up to 60 seconds.
      responses:
        '200':
          description: message response
          schema:
              $ref: '#/definitions/asApiMessageResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/asApiException'
  /message/add:
    post:
      description: Creates a new message to user
      operationId: addMessage
      produces:
        - application/json
      parameters:
        - name: apiMessage
          in: body
          description: Message to user - device
          required: true
          schema:
            $ref: '#/definitions/asApiMessage'
      responses:
        '200':
          description: the message Id
          schema:
            $ref: '#/definitions/addMessageResponse'
        '100':
          description: Server Logic Exception
          schema:
            $ref: '#/definitions/asApiException'
            
  /message/cancel:
    post:
        description: Cancel a pending mesage
        operationId: cancelMessage
        produces:
        - application/json
        parameters:
        - name: msgId
          in: query
          description: message unique id
          required: true
          type: integer  
          format: int64  
        responses:
          '200':
            description: nothing to return
          '599':
            description: Server Logic Exception
            schema:
              $ref: '#/definitions/asApiException'
              
###########################################              
  /message/cancelUserMessages:
    post:
        description: Cancal all user's pending messages
        operationId: cancelUserMessages
        produces:
        - application/json
        parameters:
        - name: loginUserId
          in: query
          required: true
          type: string  
        responses:
          '200':
            description: nothing to return
          '599':
            description: Server Logic Exception
            schema:
              $ref: '#/definitions/asApiException'
  
  ###########################################             
  /login/requestLoginQrCode:
    get:
        description: Get a Byte Array for Qr-Code generation
        operationId: requestLoginQrCode
        produces:
        - application/json
        parameters:
        - name: sessionId
          in: query
          description: this is the session Id of the portal
          required: true
          type: string  
        responses:
          '200':
             description: Qr Code
             schema:
                $ref: '#/definitions/requestLoginQrCodeResponse'
          '599':
            description: Server Logic Exception
            schema:
             $ref: '#/definitions/asApiException'

###########################################               
  /login/queryLoginQrCode:
    get:
        description: Queries if the login code was consumed
        operationId: queryLoginQrCode
        produces:
        - application/json
        parameters:
        - name: sessionId
          in: query
          description: this is the session Id of the portal
          required: true
          type: string  
        responses:
          '200':
            description: The Login Response
            schema:
              $ref: '#/definitions/queryLoginResponse'
          '599':
            description: Server Logic Exception
            schema:
              $ref: '#/definitions/asApiException'

###########################################               
  /login/queryLoginOtp:
    get:
        description: Queries if the login code was consumed
        operationId: queryLoginOtp
        produces:
        - application/json
        parameters:
        - name: otp
          in: query
          description: this is Login One Time Password
          required: true
          type: string  
        responses:
          '200':
            description: The Login Response
            schema:
              $ref: '#/definitions/queryLoginResponse'
          '599':
            description: Server Logic Exception
            schema:
              $ref: '#/definitions/asApiException'  
              
###########################################               
  /user/queryUsers:
    post:
        description: Queries 
        operationId: queryUsers
        produces:
        - application/json
        parameters:
        - name: filterItems
          in: body
          description: Message to user - device
          required: true
          schema:
            type: array
            items: 
              $ref: '#/definitions/asApiFilterItem'
        - name: offset
          in: query
          type: integer
        - name: maxResults
          in: query
          type: integer   
           
        responses:
          '200':
            description: Array of Users
            schema:
              type: array
              items: 
                $ref: '#/definitions/asApiUser'
          '599':
            description: Server Logic Exception
            schema: 
              $ref: '#/definitions/asApiException'     
              
##########################################              
  /user/addUser:
    post:
        description: add a User 
        operationId: addUser
        produces:
        - application/json
        parameters:
        - name: user
          in: body
          description: If initialPassword is set to null, an initialPassword will be generated and returned.
          required: true
          schema:
            $ref: '#/definitions/asApiUser'
                 
        responses:
          '200':
            description: Returns the initialPassword
            schema: 
              type: string 
          '599':
            description: Server Logic Exception
            schema: 
              $ref: '#/definitions/asApiException'
                
 ############################################             
  /user/modifyUser:
    post:
        description: Change User 
        operationId: modifyUser
        produces:
        - application/json
        parameters:
        - name: user
          in: body
          description: Data with null content will not be changed.
          required: true
          schema:
            $ref: '#/definitions/asApiUser'
                 
        responses:
          '200':
            description: Array of Users
          '599':
            description: Server Logic Exception
            schema: 
              $ref: '#/definitions/asApiException' 
  
  ###########################################            
  /user/getUser:
    get:
        description: get User using the loginId 
        operationId: getUser
        produces:
        - application/json
        parameters:
        - name: userLoginId
          in: query
          required: true
          type: string
                 
        responses:
          '200':
            description: User
            schema:
              $ref: '#/definitions/asApiUser'
            
          '599':
            description: Server Logic Exception
            schema: 
              $ref: '#/definitions/asApiException' 
              
 ###################################               
            
  /user/deleteUser:
    get:
        description: Delete User. This is only possible if user has no devices yet.
        operationId: deleteUser
        produces:
        - application/json
        parameters:
        - name: userLoginId
          in: query
          required: true
          type: string
                 
        responses:
          '200':
           description: nothing to return
            
          '599':
            description: Server Logic Exception
            schema: 
              $ref: '#/definitions/asApiException'              
        
###########################################               
  /user/addActivationCode:
    post:
        description: Add activation code to a user 
        operationId: addActivationCode
        produces:
        - application/json
        parameters:
        - name: activationCode
          in: body
          description: If activationCode field is null, a new activationCode will be generated 
          required: true
          schema:
            $ref: '#/definitions/asApiActivationCode'
                 
        responses:
          '200':
            description: OK  returns the activation code
            schema: 
              type: string 
          '599':
            description: Server Logic Exception
            schema: 
                $ref: '#/definitions/asApiException' 
####                
  /user/verifyUser:
    get:
        description: Verify User, Password and Passcode 
        operationId: verifyUser
        produces:
        - application/json
        parameters:
        - name: userLoginId
          in: query
          required: true
          type: string
        - name: password
          in: query
          required: false
          type: string
          description: if password is null, the password will not be verified
        - name: passcode
          in: query
          required: false
          type: string   
          description: if passcode is null, the passcode will not be verified
                 
        responses:
          '200':
            description: OK 
          '599':
            description: Server Logic Exception
            schema: 
                $ref: '#/definitions/asApiException'  
                
                
#############################################
  /clouddata/setCloudData:
    post:
        description: Set a CloudData. If CloudData exists, it will be over written else it will be created  
        operationId: setCloudData
        produces:
        - application/json
        parameters:
        - name: cloudData
          in: body
          description: This is the cloudData object. 
          required: true
          schema:
            $ref: '#/definitions/asApiCloudData'
                 
        responses:
          '200':
            description: OK  returns
           
          '599':
            description: Server Logic Exception
            schema: 
                $ref: '#/definitions/asApiException' 
               
#######
  /clouddata/getCloudData:
    get:
        description: Get Cloud Data Object  
        operationId: getCloudData
        produces:
        - application/json
        parameters:
          - name: owner
            required: true
            in: query
            type: string
            enum:
              - GLOBAL
              - USER
              - DEVICE
          - name: name
            in: query
            required: true
            type: string
          - name: userLoginId
            in: query
            required: false
            type: string
          - name: deviceName
            in: query
            required: false
            type: string    
     
        responses:
          '200':
            description: OK  
            schema:
                $ref: '#/definitions/asApiCloudData'
          '599':
            description: Server Logic Exception
            schema: 
                $ref: '#/definitions/asApiException' 
#####
  /clouddata/queryCloudData:
    post:
        description: Queries 
        operationId: queryCloudData
        produces:
        - application/json
        parameters:
        - name: filterItems
          in: body
          description: Array of Filter Items
          required: true
          schema:
            type: array
            items: 
              $ref: '#/definitions/asApiFilterItem'
        - name: offset
          in: query
          type: integer
        - name: maxResults
          in: query
          type: integer   
           
        responses:
          '200':
            description: Array of AsApiCloudData
            schema:
              type: array
              items: 
                $ref: '#/definitions/asApiCloudData'
          '599':
            description: Server Logic Exception
            schema: 
              $ref: '#/definitions/asApiException'     
                              
                                                                                                                 
####################################
####################################
definitions:
  asApiMsgStatus:
      type: string
      enum: [Ok, Waiting, Queued, Sending, Rec_Error, Send_Error, Disconnected, Cancelled, SignatureError]
#####################################   
  asMapEntry:
    type: object 
    properties:
      key:
        type: string
      value:
        type: string
#####################################      
  asApiMessage:
    type: object
    required:
      - userLoginId
      - templateName
      - dataMap
    properties:
      userLoginId:
        type: string
      templateName:
        type: string
      dataMap:
        type: array
        items:
           $ref: "#/definitions/asMapEntry"  
      deviceName:
        type: string
        description: | 
          This is optional. As default should be set to null as . If null, SEMS will send the message to the current online device or the first user's device which goes
          online. Else you can specify the user's device name which the message is intented for, in this cas SEMS will send the message only to this device.                
      sessionId:
        type: string
        description: This is optional and is the portal session Id. The value will be returned in the response.
      responseRequired:
          type: boolean
          default: false
      signatureRequired:
          type: boolean
          default: false
          description: | 
            If true, on message-response the device will sign the dataMap, action-key and response data with the device private key. SEMS will verify the signature.
            In particular cases, this be required for high security reasons, but it will consumes more device and SEMS resources.                        
      responseTimeout:
        type: integer
        format: int32
        default: 0  
        description: This is the time in seconds within the device have to response to the messageor if response is not required, it is the time till device goes online
          If set to 0, the Response-Timeout will be retrieved from the SEMS Preferences 'Response Timeout'        
#####################################        
  asApiMessageResponse:
    type: object
    required:
      - id
      - final
      - msgStatus
    properties:
      id:
        type: integer
        format: int64
        default: 0
      final:
        type: boolean
        default: false
      deviceName:
        type: string
        description: This is only available when 'final' is true.  
      userLoginId:
         type: string
      msgStatus:
        type: object
        $ref: "#/definitions/asApiMsgStatus"
      inputMap:
        type: array
        items:
           $ref: "#/definitions/asMapEntry"  
        description: if template contains input fields, these are the input data entered by the user.  Only set when final is true 
      actionId:
        type: string  
        description: This is the template's Button's ID which the user activate.   
      info:
        type: string
      sessionId:
        type: string
        description: This is optional. Value returned from addMessage.
      signature:
        type: string
        format: binary
        description: This is optional. Available only if "signatureRequired" was true and 'final' is true.
        
  queryLoginResponse:
    type: object
    properties:
      userLoginId:
        type: string
      deviceName:
        type: string
        
  addMessageResponse:
    type: object
    properties:
      msgId:
        type: integer
        format: int64
        default: 0
      timeToLive:
        type: integer
        format: int32
        default: 0
        
  requestLoginQrCodeResponse:
    type: object
    properties:
      data:
        type: string
      timeToLive:
        type: integer
        format: int32
        default: 0
        
  asApiUser:
    type: object
    properties:
      loginId:
        type: string
      displayName:
        type: string
      email:  
        type: string
      preferedLanguage:
        type: string 
        enum: [DEFAULT, ENGLISH, GERMAN, FRENCH, SPANISH, ITALIEN]
        description: A two character language-type as defined in ISO 639-1
      mobileNumber:
        type: string   
      initialPassword:
        type: string
      acSuspendedTill:
        description: Data Format is ISO-8601 (e.g. "2017-12-10T14:50:12.123+02:00")
        type: string
        format: date-time
      disabled:
        type: boolean
        default: false   
      info: 
        type: string  
      failActivations:
        type: integer
        format: int32
        default: 0
      ldapUser:
        type: boolean
        description: if set User-Password is authenticated by LDAP/Active-Directory
        
  asApiCloudData:
    type: object
    properties:
      owner: 
        type: string
        enum:
          - GLOBAL
          - USER
          - DEVICE
      key:
        type: string
      userLoginId:
        description: this is the user login id. It must be set if owner is USER or DEVICE
        type: string      
      deviceName:
        description: if owner is DEVICE, this must be the user's unique deviceName 
        type: string    
      content:
        description: content is limited to 8 Kbytes 
        type: string
        format: binary
      lastModified:
        type: string
        format: date-time  
        description: Data Format is ISO-8601 (e.g. "2017-12-10T14:50:12.123+02:00")
      discardAfter:
        type: string
        format: date-time
        description: Data Format is ISO-8601 (e.g. "2017-12-10T14:50:12.123+02:00")
      options:
        type: string
        description: not yet specified. Just let it null for the time being
      signed:
        type: boolean
        description: if true, user/device did digitally sign this content             
          
        
  asApiActivationCode:
    type: object
    properties:
      userLoginId:
        type: string
      activationCode:
        type: string
      createdOn:
        type: string
        format: date-time
        description: Data Format is ISO-8601 (e.g. "2017-12-10T14:50:12.123+02:00")
      validTill:
        description: Data Format is ISO-8601 (e.g. "2017-12-10T14:50:12.123+02:00")
        type: string
        format: date-time
      sendBy: 
        type: string 
        enum:
        - NONE
        - SMS
        - EMAIL
      info:
        type: string   
    
     
  asApiFilterItem:
    type: object
    required:
      - name
    properties:
      name:
        description: This muss be the exact name of the column variable
        type: string
      value:
        description: Ths value have to be deserialzed
        type: string  
      sortOrder:
        type: string
        enum: 
        - NONE
        - ASCENDING
        - DESCENDING
      operator:
        type: string 
        enum:
        - EQUALS
        - LIKE
        - GREATER
        - LESSER
        - NOT_EQUALS
        - NONE       
        
  asApiException:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 0
      message:
        type: string
      details:
        type: string
        
   
        
