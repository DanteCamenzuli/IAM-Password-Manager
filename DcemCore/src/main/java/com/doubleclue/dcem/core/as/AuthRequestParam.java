/*
 * DoubleClue REST API
 * DoubleClue URL http://yourhost:8001/dcem/restApi/as
 *
 * OpenAPI spec version: 1.4.1
 * Contact: emanuel.galea@hws-gruppe.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.doubleclue.dcem.core.as;

import java.io.Serializable;
import java.util.Map;

/**
 * 
 */

public class AuthRequestParam implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private boolean ignorePassword;
	private String sessionCookie;
	private int sessionCookieExpiresOn; // in seconds
	private String sessionId;
	private String networkAddress;
	// String browserFingerPrint;
	private boolean useAlternativeAuthMethods;
	private String templateName;
	private Map<String, String> paramMap;
	private boolean unlockUserAuth;
	private String fidoResponse;
	private String fidoRpId;
	private String reportInfo;
	private String location;

	public boolean isIgnorePassword() {
		return ignorePassword;
	}

	public void setIgnorePassword(boolean ignorePassword) {
		this.ignorePassword = ignorePassword;
	}

	public String getNetworkAddress() {
		return networkAddress;
	}

	public void setNetworkAddress(String networkAddress) {
		this.networkAddress = networkAddress;
	}

	public Map<String, String> getParamMap() {
		return paramMap;
	}

	public void setParamMap(Map<String, String> paramMap) {
		this.paramMap = paramMap;
	}

	public String getTemplateName() {
		return templateName;
	}

	public void setTemplateName(String templateName) {
		this.templateName = templateName;
	}

	public String getSessionId() {
		return sessionId;
	}

	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}

	public String getSessionCookie() {
		return sessionCookie;
	}

	public void setSessionCookie(String sessionCookie) {
		this.sessionCookie = sessionCookie;
	}

	public int getSessionCookieExpiresOn() {
		return sessionCookieExpiresOn;
	}

	public void setSessionCookieExpiresOn(int sessionCookieExpiresOn) {
		this.sessionCookieExpiresOn = sessionCookieExpiresOn;
	}

	public String getFidoResponse() {
		return fidoResponse;
	}

	public void setFidoResponse(String fidoResponse) {
		this.fidoResponse = fidoResponse;
	}

	public String getFidoRpId() {
		return fidoRpId;
	}

	public void setFidoRpId(String fidoRpId) {
		this.fidoRpId = fidoRpId;
	}

	public String getReportInfo() {
		return reportInfo;
	}

	public void setReportInfo(String reportInfo) {
		this.reportInfo = reportInfo;
	}

	public boolean isUseAlternativeAuthMethods() {
		return useAlternativeAuthMethods;
	}

	public void setUseAlternativeAuthMethods(boolean useAlternativeAuthMethods) {
		this.useAlternativeAuthMethods = useAlternativeAuthMethods;
	}

	public boolean isUnlockUserAuth() {
		return unlockUserAuth;
	}

	public void setUnlockUserAuth(boolean unlockUserAuth) {
		this.unlockUserAuth = unlockUserAuth;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	@Override
	public String toString() {
		return "AuthRequestParam [ignorePassword=" + ignorePassword + ", sessionCookie=" + sessionCookie + ", sessionCookieExpiresOn=" + sessionCookieExpiresOn
				+ ", sessionId=" + sessionId + ", networkAddress=" + networkAddress + ", useAlternativeAuthMethods=" + useAlternativeAuthMethods
				+ ", templateName=" + templateName + ", paramMap=" + paramMap + ", unlockUserAuth=" + unlockUserAuth + ", fidoResponse=" + fidoResponse
				+ ", fidoRpId=" + fidoRpId + ", reportInfo=" + reportInfo + ", location=" + location + "]";
	}
	
	
	
}
