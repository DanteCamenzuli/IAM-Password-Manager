//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


ServerSignatureParam = function(args) {
  this.dataForSignature = null;
  this.appVersion = null;
  this.libVersion = null;
  this.domainName = null;
  this.iamDcem = null;
  this.commClientType = null;
  if (args) {
    if (args.dataForSignature !== undefined && args.dataForSignature !== null) {
      this.dataForSignature = args.dataForSignature;
    }
    if (args.appVersion !== undefined && args.appVersion !== null) {
      this.appVersion = new AppVersion(args.appVersion);
    }
    if (args.libVersion !== undefined && args.libVersion !== null) {
      this.libVersion = new AppVersion(args.libVersion);
    }
    if (args.domainName !== undefined && args.domainName !== null) {
      this.domainName = args.domainName;
    }
    if (args.iamDcem !== undefined && args.iamDcem !== null) {
      this.iamDcem = args.iamDcem;
    }
    if (args.commClientType !== undefined && args.commClientType !== null) {
      this.commClientType = args.commClientType;
    }
  }
};
ServerSignatureParam.prototype = {};
ServerSignatureParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dataForSignature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appVersion = new AppVersion();
        this.appVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.libVersion = new AppVersion();
        this.libVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.domainName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.iamDcem = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.commClientType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerSignatureParam.prototype.write = function(output) {
  output.writeStructBegin('ServerSignatureParam');
  if (this.dataForSignature !== null && this.dataForSignature !== undefined) {
    output.writeFieldBegin('dataForSignature', Thrift.Type.STRING, 1);
    output.writeBinary(this.dataForSignature);
    output.writeFieldEnd();
  }
  if (this.appVersion !== null && this.appVersion !== undefined) {
    output.writeFieldBegin('appVersion', Thrift.Type.STRUCT, 2);
    this.appVersion.write(output);
    output.writeFieldEnd();
  }
  if (this.libVersion !== null && this.libVersion !== undefined) {
    output.writeFieldBegin('libVersion', Thrift.Type.STRUCT, 3);
    this.libVersion.write(output);
    output.writeFieldEnd();
  }
  if (this.domainName !== null && this.domainName !== undefined) {
    output.writeFieldBegin('domainName', Thrift.Type.STRING, 4);
    output.writeString(this.domainName);
    output.writeFieldEnd();
  }
  if (this.iamDcem !== null && this.iamDcem !== undefined) {
    output.writeFieldBegin('iamDcem', Thrift.Type.BOOL, 5);
    output.writeBool(this.iamDcem);
    output.writeFieldEnd();
  }
  if (this.commClientType !== null && this.commClientType !== undefined) {
    output.writeFieldBegin('commClientType', Thrift.Type.I32, 6);
    output.writeI32(this.commClientType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServerSignatureResponse = function(args) {
  this.serverSignature = null;
  this.serverVersion = null;
  this.isReverseProxy = null;
  this.isDispatched = null;
  this.challenge = null;
  if (args) {
    if (args.serverSignature !== undefined && args.serverSignature !== null) {
      this.serverSignature = args.serverSignature;
    }
    if (args.serverVersion !== undefined && args.serverVersion !== null) {
      this.serverVersion = new AppVersion(args.serverVersion);
    }
    if (args.isReverseProxy !== undefined && args.isReverseProxy !== null) {
      this.isReverseProxy = args.isReverseProxy;
    }
    if (args.isDispatched !== undefined && args.isDispatched !== null) {
      this.isDispatched = args.isDispatched;
    }
    if (args.challenge !== undefined && args.challenge !== null) {
      this.challenge = args.challenge;
    }
  }
};
ServerSignatureResponse.prototype = {};
ServerSignatureResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverSignature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverVersion = new AppVersion();
        this.serverVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isReverseProxy = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isDispatched = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.challenge = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerSignatureResponse.prototype.write = function(output) {
  output.writeStructBegin('ServerSignatureResponse');
  if (this.serverSignature !== null && this.serverSignature !== undefined) {
    output.writeFieldBegin('serverSignature', Thrift.Type.STRING, 1);
    output.writeBinary(this.serverSignature);
    output.writeFieldEnd();
  }
  if (this.serverVersion !== null && this.serverVersion !== undefined) {
    output.writeFieldBegin('serverVersion', Thrift.Type.STRUCT, 2);
    this.serverVersion.write(output);
    output.writeFieldEnd();
  }
  if (this.isReverseProxy !== null && this.isReverseProxy !== undefined) {
    output.writeFieldBegin('isReverseProxy', Thrift.Type.BOOL, 3);
    output.writeBool(this.isReverseProxy);
    output.writeFieldEnd();
  }
  if (this.isDispatched !== null && this.isDispatched !== undefined) {
    output.writeFieldBegin('isDispatched', Thrift.Type.BOOL, 4);
    output.writeBool(this.isDispatched);
    output.writeFieldEnd();
  }
  if (this.challenge !== null && this.challenge !== undefined) {
    output.writeFieldBegin('challenge', Thrift.Type.STRING, 5);
    output.writeBinary(this.challenge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DomainSdkConfigParam = function(args) {
  this.domainName = null;
  this.activationCode = null;
  this.userId = null;
  this.dispatcherSignature = null;
  if (args) {
    if (args.domainName !== undefined && args.domainName !== null) {
      this.domainName = args.domainName;
    }
    if (args.activationCode !== undefined && args.activationCode !== null) {
      this.activationCode = args.activationCode;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.dispatcherSignature !== undefined && args.dispatcherSignature !== null) {
      this.dispatcherSignature = args.dispatcherSignature;
    }
  }
};
DomainSdkConfigParam.prototype = {};
DomainSdkConfigParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.domainName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activationCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dispatcherSignature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DomainSdkConfigParam.prototype.write = function(output) {
  output.writeStructBegin('DomainSdkConfigParam');
  if (this.domainName !== null && this.domainName !== undefined) {
    output.writeFieldBegin('domainName', Thrift.Type.STRING, 1);
    output.writeString(this.domainName);
    output.writeFieldEnd();
  }
  if (this.activationCode !== null && this.activationCode !== undefined) {
    output.writeFieldBegin('activationCode', Thrift.Type.STRING, 2);
    output.writeString(this.activationCode);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.dispatcherSignature !== null && this.dispatcherSignature !== undefined) {
    output.writeFieldBegin('dispatcherSignature', Thrift.Type.STRING, 4);
    output.writeBinary(this.dispatcherSignature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DomainSdkConfigResponse = function(args) {
  this.sdkConfigDcem = null;
  if (args) {
    if (args.sdkConfigDcem !== undefined && args.sdkConfigDcem !== null) {
      this.sdkConfigDcem = args.sdkConfigDcem;
    }
  }
};
DomainSdkConfigResponse.prototype = {};
DomainSdkConfigResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sdkConfigDcem = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DomainSdkConfigResponse.prototype.write = function(output) {
  output.writeStructBegin('DomainSdkConfigResponse');
  if (this.sdkConfigDcem !== null && this.sdkConfigDcem !== undefined) {
    output.writeFieldBegin('sdkConfigDcem', Thrift.Type.STRING, 1);
    output.writeBinary(this.sdkConfigDcem);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterDispatcherParam = function(args) {
  this.domainName = null;
  this.dispatcherSignature = null;
  this.pnKey = null;
  if (args) {
    if (args.domainName !== undefined && args.domainName !== null) {
      this.domainName = args.domainName;
    }
    if (args.dispatcherSignature !== undefined && args.dispatcherSignature !== null) {
      this.dispatcherSignature = args.dispatcherSignature;
    }
    if (args.pnKey !== undefined && args.pnKey !== null) {
      this.pnKey = args.pnKey;
    }
  }
};
RegisterDispatcherParam.prototype = {};
RegisterDispatcherParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.domainName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dispatcherSignature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pnKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterDispatcherParam.prototype.write = function(output) {
  output.writeStructBegin('RegisterDispatcherParam');
  if (this.domainName !== null && this.domainName !== undefined) {
    output.writeFieldBegin('domainName', Thrift.Type.STRING, 1);
    output.writeString(this.domainName);
    output.writeFieldEnd();
  }
  if (this.dispatcherSignature !== null && this.dispatcherSignature !== undefined) {
    output.writeFieldBegin('dispatcherSignature', Thrift.Type.STRING, 2);
    output.writeBinary(this.dispatcherSignature);
    output.writeFieldEnd();
  }
  if (this.pnKey !== null && this.pnKey !== undefined) {
    output.writeFieldBegin('pnKey', Thrift.Type.STRING, 3);
    output.writeString(this.pnKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterDispatcherResponse = function(args) {
  this.clusterId = null;
  if (args) {
    if (args.clusterId !== undefined && args.clusterId !== null) {
      this.clusterId = args.clusterId;
    }
  }
};
RegisterDispatcherResponse.prototype = {};
RegisterDispatcherResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clusterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterDispatcherResponse.prototype.write = function(output) {
  output.writeStructBegin('RegisterDispatcherResponse');
  if (this.clusterId !== null && this.clusterId !== undefined) {
    output.writeFieldBegin('clusterId', Thrift.Type.STRING, 1);
    output.writeString(this.clusterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivationParam = function(args) {
  this.activationCode = null;
  this.userId = null;
  this.udid = null;
  this.encPassword = null;
  this.cpuArch = null;
  this.osVersion = null;
  this.locale = null;
  this.manufacture = null;
  this.deviceModel = null;
  this.deviceName = null;
  this.publicKey = null;
  this.signature = null;
  this.clientType = null;
  this.digest = null;
  this.risk = null;
  if (args) {
    if (args.activationCode !== undefined && args.activationCode !== null) {
      this.activationCode = args.activationCode;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
    if (args.encPassword !== undefined && args.encPassword !== null) {
      this.encPassword = args.encPassword;
    }
    if (args.cpuArch !== undefined && args.cpuArch !== null) {
      this.cpuArch = args.cpuArch;
    }
    if (args.osVersion !== undefined && args.osVersion !== null) {
      this.osVersion = args.osVersion;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
    if (args.manufacture !== undefined && args.manufacture !== null) {
      this.manufacture = args.manufacture;
    }
    if (args.deviceModel !== undefined && args.deviceModel !== null) {
      this.deviceModel = args.deviceModel;
    }
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = args.publicKey;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.clientType !== undefined && args.clientType !== null) {
      this.clientType = args.clientType;
    }
    if (args.digest !== undefined && args.digest !== null) {
      this.digest = args.digest;
    }
    if (args.risk !== undefined && args.risk !== null) {
      this.risk = args.risk;
    }
  }
};
ActivationParam.prototype = {};
ActivationParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activationCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encPassword = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.cpuArch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.osVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.manufacture = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.deviceModel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.publicKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.clientType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.digest = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.risk = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivationParam.prototype.write = function(output) {
  output.writeStructBegin('ActivationParam');
  if (this.activationCode !== null && this.activationCode !== undefined) {
    output.writeFieldBegin('activationCode', Thrift.Type.STRING, 1);
    output.writeString(this.activationCode);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 3);
    output.writeBinary(this.udid);
    output.writeFieldEnd();
  }
  if (this.encPassword !== null && this.encPassword !== undefined) {
    output.writeFieldBegin('encPassword', Thrift.Type.STRING, 4);
    output.writeBinary(this.encPassword);
    output.writeFieldEnd();
  }
  if (this.cpuArch !== null && this.cpuArch !== undefined) {
    output.writeFieldBegin('cpuArch', Thrift.Type.I32, 5);
    output.writeI32(this.cpuArch);
    output.writeFieldEnd();
  }
  if (this.osVersion !== null && this.osVersion !== undefined) {
    output.writeFieldBegin('osVersion', Thrift.Type.STRING, 6);
    output.writeString(this.osVersion);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 7);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  if (this.manufacture !== null && this.manufacture !== undefined) {
    output.writeFieldBegin('manufacture', Thrift.Type.STRING, 8);
    output.writeString(this.manufacture);
    output.writeFieldEnd();
  }
  if (this.deviceModel !== null && this.deviceModel !== undefined) {
    output.writeFieldBegin('deviceModel', Thrift.Type.STRING, 9);
    output.writeString(this.deviceModel);
    output.writeFieldEnd();
  }
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 10);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRING, 11);
    output.writeBinary(this.publicKey);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 12);
    output.writeBinary(this.signature);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.I32, 13);
    output.writeI32(this.clientType);
    output.writeFieldEnd();
  }
  if (this.digest !== null && this.digest !== undefined) {
    output.writeFieldBegin('digest', Thrift.Type.STRING, 14);
    output.writeBinary(this.digest);
    output.writeFieldEnd();
  }
  if (this.risk !== null && this.risk !== undefined) {
    output.writeFieldBegin('risk', Thrift.Type.STRING, 15);
    output.writeBinary(this.risk);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivationResponse = function(args) {
  this.updateAvailable = null;
  this.deviceId = null;
  this.signedCertificate = null;
  this.deviceKey = null;
  this.offlineKey = null;
  this.deviceName = null;
  if (args) {
    if (args.updateAvailable !== undefined && args.updateAvailable !== null) {
      this.updateAvailable = args.updateAvailable;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.signedCertificate !== undefined && args.signedCertificate !== null) {
      this.signedCertificate = args.signedCertificate;
    }
    if (args.deviceKey !== undefined && args.deviceKey !== null) {
      this.deviceKey = args.deviceKey;
    }
    if (args.offlineKey !== undefined && args.offlineKey !== null) {
      this.offlineKey = args.offlineKey;
    }
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
  }
};
ActivationResponse.prototype = {};
ActivationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.updateAvailable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.signedCertificate = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.deviceKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.offlineKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivationResponse.prototype.write = function(output) {
  output.writeStructBegin('ActivationResponse');
  if (this.updateAvailable !== null && this.updateAvailable !== undefined) {
    output.writeFieldBegin('updateAvailable', Thrift.Type.BOOL, 1);
    output.writeBool(this.updateAvailable);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.signedCertificate !== null && this.signedCertificate !== undefined) {
    output.writeFieldBegin('signedCertificate', Thrift.Type.STRING, 3);
    output.writeBinary(this.signedCertificate);
    output.writeFieldEnd();
  }
  if (this.deviceKey !== null && this.deviceKey !== undefined) {
    output.writeFieldBegin('deviceKey', Thrift.Type.STRING, 4);
    output.writeBinary(this.deviceKey);
    output.writeFieldEnd();
  }
  if (this.offlineKey !== null && this.offlineKey !== undefined) {
    output.writeFieldBegin('offlineKey', Thrift.Type.STRING, 5);
    output.writeBinary(this.offlineKey);
    output.writeFieldEnd();
  }
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 6);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginParam = function(args) {
  this.deviceId = null;
  this.udid = null;
  this.encPassword = null;
  this.osVersion = null;
  this.locale = null;
  this.hotpCounter = null;
  this.digest = null;
  this.risk = null;
  this.passwordLess = null;
  this.cpuArch = null;
  this.commClientType = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
    if (args.encPassword !== undefined && args.encPassword !== null) {
      this.encPassword = args.encPassword;
    }
    if (args.osVersion !== undefined && args.osVersion !== null) {
      this.osVersion = args.osVersion;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
    if (args.hotpCounter !== undefined && args.hotpCounter !== null) {
      this.hotpCounter = args.hotpCounter;
    }
    if (args.digest !== undefined && args.digest !== null) {
      this.digest = args.digest;
    }
    if (args.risk !== undefined && args.risk !== null) {
      this.risk = args.risk;
    }
    if (args.passwordLess !== undefined && args.passwordLess !== null) {
      this.passwordLess = args.passwordLess;
    }
    if (args.cpuArch !== undefined && args.cpuArch !== null) {
      this.cpuArch = args.cpuArch;
    }
    if (args.commClientType !== undefined && args.commClientType !== null) {
      this.commClientType = args.commClientType;
    }
  }
};
LoginParam.prototype = {};
LoginParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encPassword = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.osVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.hotpCounter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.digest = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.risk = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.passwordLess = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.cpuArch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.commClientType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginParam.prototype.write = function(output) {
  output.writeStructBegin('LoginParam');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 2);
    output.writeBinary(this.udid);
    output.writeFieldEnd();
  }
  if (this.encPassword !== null && this.encPassword !== undefined) {
    output.writeFieldBegin('encPassword', Thrift.Type.STRING, 3);
    output.writeBinary(this.encPassword);
    output.writeFieldEnd();
  }
  if (this.osVersion !== null && this.osVersion !== undefined) {
    output.writeFieldBegin('osVersion', Thrift.Type.STRING, 4);
    output.writeString(this.osVersion);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 5);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  if (this.hotpCounter !== null && this.hotpCounter !== undefined) {
    output.writeFieldBegin('hotpCounter', Thrift.Type.I32, 6);
    output.writeI32(this.hotpCounter);
    output.writeFieldEnd();
  }
  if (this.digest !== null && this.digest !== undefined) {
    output.writeFieldBegin('digest', Thrift.Type.STRING, 7);
    output.writeBinary(this.digest);
    output.writeFieldEnd();
  }
  if (this.risk !== null && this.risk !== undefined) {
    output.writeFieldBegin('risk', Thrift.Type.STRING, 8);
    output.writeBinary(this.risk);
    output.writeFieldEnd();
  }
  if (this.passwordLess !== null && this.passwordLess !== undefined) {
    output.writeFieldBegin('passwordLess', Thrift.Type.BOOL, 9);
    output.writeBool(this.passwordLess);
    output.writeFieldEnd();
  }
  if (this.cpuArch !== null && this.cpuArch !== undefined) {
    output.writeFieldBegin('cpuArch', Thrift.Type.I32, 10);
    output.writeI32(this.cpuArch);
    output.writeFieldEnd();
  }
  if (this.commClientType !== null && this.commClientType !== undefined) {
    output.writeFieldBegin('commClientType', Thrift.Type.I32, 11);
    output.writeI32(this.commClientType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginResponse = function(args) {
  this.deviceKey = null;
  this.oneTimePassword = null;
  this.updateAvailableTill = null;
  this.passcodeValidFor = null;
  this.updateInfo = null;
  this.licenceExpiresOn = null;
  this.testLicence = null;
  this.ldapUser = null;
  this.keepAliveSeconds = null;
  if (args) {
    if (args.deviceKey !== undefined && args.deviceKey !== null) {
      this.deviceKey = args.deviceKey;
    }
    if (args.oneTimePassword !== undefined && args.oneTimePassword !== null) {
      this.oneTimePassword = args.oneTimePassword;
    }
    if (args.updateAvailableTill !== undefined && args.updateAvailableTill !== null) {
      this.updateAvailableTill = args.updateAvailableTill;
    }
    if (args.passcodeValidFor !== undefined && args.passcodeValidFor !== null) {
      this.passcodeValidFor = args.passcodeValidFor;
    }
    if (args.updateInfo !== undefined && args.updateInfo !== null) {
      this.updateInfo = args.updateInfo;
    }
    if (args.licenceExpiresOn !== undefined && args.licenceExpiresOn !== null) {
      this.licenceExpiresOn = args.licenceExpiresOn;
    }
    if (args.testLicence !== undefined && args.testLicence !== null) {
      this.testLicence = args.testLicence;
    }
    if (args.ldapUser !== undefined && args.ldapUser !== null) {
      this.ldapUser = args.ldapUser;
    }
    if (args.keepAliveSeconds !== undefined && args.keepAliveSeconds !== null) {
      this.keepAliveSeconds = args.keepAliveSeconds;
    }
  }
};
LoginResponse.prototype = {};
LoginResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oneTimePassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.updateAvailableTill = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.passcodeValidFor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updateInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.licenceExpiresOn = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.testLicence = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.ldapUser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.keepAliveSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResponse.prototype.write = function(output) {
  output.writeStructBegin('LoginResponse');
  if (this.deviceKey !== null && this.deviceKey !== undefined) {
    output.writeFieldBegin('deviceKey', Thrift.Type.STRING, 1);
    output.writeBinary(this.deviceKey);
    output.writeFieldEnd();
  }
  if (this.oneTimePassword !== null && this.oneTimePassword !== undefined) {
    output.writeFieldBegin('oneTimePassword', Thrift.Type.STRING, 2);
    output.writeString(this.oneTimePassword);
    output.writeFieldEnd();
  }
  if (this.updateAvailableTill !== null && this.updateAvailableTill !== undefined) {
    output.writeFieldBegin('updateAvailableTill', Thrift.Type.I64, 3);
    output.writeI64(this.updateAvailableTill);
    output.writeFieldEnd();
  }
  if (this.passcodeValidFor !== null && this.passcodeValidFor !== undefined) {
    output.writeFieldBegin('passcodeValidFor', Thrift.Type.I32, 4);
    output.writeI32(this.passcodeValidFor);
    output.writeFieldEnd();
  }
  if (this.updateInfo !== null && this.updateInfo !== undefined) {
    output.writeFieldBegin('updateInfo', Thrift.Type.STRING, 5);
    output.writeString(this.updateInfo);
    output.writeFieldEnd();
  }
  if (this.licenceExpiresOn !== null && this.licenceExpiresOn !== undefined) {
    output.writeFieldBegin('licenceExpiresOn', Thrift.Type.I64, 6);
    output.writeI64(this.licenceExpiresOn);
    output.writeFieldEnd();
  }
  if (this.testLicence !== null && this.testLicence !== undefined) {
    output.writeFieldBegin('testLicence', Thrift.Type.BOOL, 7);
    output.writeBool(this.testLicence);
    output.writeFieldEnd();
  }
  if (this.ldapUser !== null && this.ldapUser !== undefined) {
    output.writeFieldBegin('ldapUser', Thrift.Type.BOOL, 8);
    output.writeBool(this.ldapUser);
    output.writeFieldEnd();
  }
  if (this.keepAliveSeconds !== null && this.keepAliveSeconds !== undefined) {
    output.writeFieldBegin('keepAliveSeconds', Thrift.Type.I32, 9);
    output.writeI32(this.keepAliveSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestActivationCodeResponse = function(args) {
  this.activationCode = null;
  this.validTill = null;
  if (args) {
    if (args.activationCode !== undefined && args.activationCode !== null) {
      this.activationCode = args.activationCode;
    }
    if (args.validTill !== undefined && args.validTill !== null) {
      this.validTill = args.validTill;
    }
  }
};
RequestActivationCodeResponse.prototype = {};
RequestActivationCodeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activationCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.validTill = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestActivationCodeResponse.prototype.write = function(output) {
  output.writeStructBegin('RequestActivationCodeResponse');
  if (this.activationCode !== null && this.activationCode !== undefined) {
    output.writeFieldBegin('activationCode', Thrift.Type.STRING, 1);
    output.writeString(this.activationCode);
    output.writeFieldEnd();
  }
  if (this.validTill !== null && this.validTill !== undefined) {
    output.writeFieldBegin('validTill', Thrift.Type.I64, 2);
    output.writeI64(this.validTill);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthUserParam = function(args) {
  this.authGatewayId = null;
  this.loginId = null;
  this.authMethod = null;
  this.encPassword = null;
  this.encPasscode = null;
  this.sharedSecret = null;
  this.udid = null;
  this.workstationName = null;
  this.clientType = null;
  this.propertyMap = null;
  if (args) {
    if (args.authGatewayId !== undefined && args.authGatewayId !== null) {
      this.authGatewayId = args.authGatewayId;
    }
    if (args.loginId !== undefined && args.loginId !== null) {
      this.loginId = args.loginId;
    }
    if (args.authMethod !== undefined && args.authMethod !== null) {
      this.authMethod = args.authMethod;
    }
    if (args.encPassword !== undefined && args.encPassword !== null) {
      this.encPassword = args.encPassword;
    }
    if (args.encPasscode !== undefined && args.encPasscode !== null) {
      this.encPasscode = args.encPasscode;
    }
    if (args.sharedSecret !== undefined && args.sharedSecret !== null) {
      this.sharedSecret = args.sharedSecret;
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
    if (args.workstationName !== undefined && args.workstationName !== null) {
      this.workstationName = args.workstationName;
    }
    if (args.clientType !== undefined && args.clientType !== null) {
      this.clientType = args.clientType;
    }
    if (args.propertyMap !== undefined && args.propertyMap !== null) {
      this.propertyMap = Thrift.copyMap(args.propertyMap, [null]);
    }
  }
};
AuthUserParam.prototype = {};
AuthUserParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authGatewayId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.authMethod = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encPassword = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.encPasscode = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sharedSecret = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.workstationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.clientType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.propertyMap = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          if (_i2 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key3 = null;
          var val4 = null;
          key3 = input.readString().value;
          val4 = input.readString().value;
          this.propertyMap[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthUserParam.prototype.write = function(output) {
  output.writeStructBegin('AuthUserParam');
  if (this.authGatewayId !== null && this.authGatewayId !== undefined) {
    output.writeFieldBegin('authGatewayId', Thrift.Type.STRING, 1);
    output.writeString(this.authGatewayId);
    output.writeFieldEnd();
  }
  if (this.loginId !== null && this.loginId !== undefined) {
    output.writeFieldBegin('loginId', Thrift.Type.STRING, 2);
    output.writeString(this.loginId);
    output.writeFieldEnd();
  }
  if (this.authMethod !== null && this.authMethod !== undefined) {
    output.writeFieldBegin('authMethod', Thrift.Type.I32, 3);
    output.writeI32(this.authMethod);
    output.writeFieldEnd();
  }
  if (this.encPassword !== null && this.encPassword !== undefined) {
    output.writeFieldBegin('encPassword', Thrift.Type.STRING, 4);
    output.writeBinary(this.encPassword);
    output.writeFieldEnd();
  }
  if (this.encPasscode !== null && this.encPasscode !== undefined) {
    output.writeFieldBegin('encPasscode', Thrift.Type.STRING, 5);
    output.writeBinary(this.encPasscode);
    output.writeFieldEnd();
  }
  if (this.sharedSecret !== null && this.sharedSecret !== undefined) {
    output.writeFieldBegin('sharedSecret', Thrift.Type.STRING, 6);
    output.writeBinary(this.sharedSecret);
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 7);
    output.writeBinary(this.udid);
    output.writeFieldEnd();
  }
  if (this.workstationName !== null && this.workstationName !== undefined) {
    output.writeFieldBegin('workstationName', Thrift.Type.STRING, 8);
    output.writeString(this.workstationName);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.I32, 9);
    output.writeI32(this.clientType);
    output.writeFieldEnd();
  }
  if (this.propertyMap !== null && this.propertyMap !== undefined) {
    output.writeFieldBegin('propertyMap', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.propertyMap));
    for (var kiter5 in this.propertyMap) {
      if (this.propertyMap.hasOwnProperty(kiter5)) {
        var viter6 = this.propertyMap[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthUserResponse = function(args) {
  this.success = null;
  this.authMethods = null;
  this.responseTime = null;
  this.msgId = null;
  this.userKey = null;
  this.sessionCookie = null;
  this.sessionCookieExpiresOn = null;
  this.secureMsgRandomCode = null;
  this.phoneNumber = null;
  this.fqUserLoginId = null;
  this.fidoResponse = null;
  this.ldapDomain = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.authMethods !== undefined && args.authMethods !== null) {
      this.authMethods = Thrift.copyList(args.authMethods, [null]);
    }
    if (args.responseTime !== undefined && args.responseTime !== null) {
      this.responseTime = args.responseTime;
    }
    if (args.msgId !== undefined && args.msgId !== null) {
      this.msgId = args.msgId;
    }
    if (args.userKey !== undefined && args.userKey !== null) {
      this.userKey = args.userKey;
    }
    if (args.sessionCookie !== undefined && args.sessionCookie !== null) {
      this.sessionCookie = args.sessionCookie;
    }
    if (args.sessionCookieExpiresOn !== undefined && args.sessionCookieExpiresOn !== null) {
      this.sessionCookieExpiresOn = args.sessionCookieExpiresOn;
    }
    if (args.secureMsgRandomCode !== undefined && args.secureMsgRandomCode !== null) {
      this.secureMsgRandomCode = args.secureMsgRandomCode;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.fqUserLoginId !== undefined && args.fqUserLoginId !== null) {
      this.fqUserLoginId = args.fqUserLoginId;
    }
    if (args.fidoResponse !== undefined && args.fidoResponse !== null) {
      this.fidoResponse = args.fidoResponse;
    }
    if (args.ldapDomain !== undefined && args.ldapDomain !== null) {
      this.ldapDomain = args.ldapDomain;
    }
  }
};
AuthUserResponse.prototype = {};
AuthUserResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.authMethods = [];
        var _rtmp38 = input.readListBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var elem10 = null;
          elem10 = input.readI32().value;
          this.authMethods.push(elem10);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.responseTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.msgId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sessionCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.sessionCookieExpiresOn = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.secureMsgRandomCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fqUserLoginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.fidoResponse = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.ldapDomain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthUserResponse.prototype.write = function(output) {
  output.writeStructBegin('AuthUserResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.authMethods !== null && this.authMethods !== undefined) {
    output.writeFieldBegin('authMethods', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.authMethods.length);
    for (var iter11 in this.authMethods) {
      if (this.authMethods.hasOwnProperty(iter11)) {
        iter11 = this.authMethods[iter11];
        output.writeI32(iter11);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.responseTime !== null && this.responseTime !== undefined) {
    output.writeFieldBegin('responseTime', Thrift.Type.I32, 3);
    output.writeI32(this.responseTime);
    output.writeFieldEnd();
  }
  if (this.msgId !== null && this.msgId !== undefined) {
    output.writeFieldBegin('msgId', Thrift.Type.I64, 4);
    output.writeI64(this.msgId);
    output.writeFieldEnd();
  }
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 5);
    output.writeBinary(this.userKey);
    output.writeFieldEnd();
  }
  if (this.sessionCookie !== null && this.sessionCookie !== undefined) {
    output.writeFieldBegin('sessionCookie', Thrift.Type.STRING, 6);
    output.writeString(this.sessionCookie);
    output.writeFieldEnd();
  }
  if (this.sessionCookieExpiresOn !== null && this.sessionCookieExpiresOn !== undefined) {
    output.writeFieldBegin('sessionCookieExpiresOn', Thrift.Type.I32, 7);
    output.writeI32(this.sessionCookieExpiresOn);
    output.writeFieldEnd();
  }
  if (this.secureMsgRandomCode !== null && this.secureMsgRandomCode !== undefined) {
    output.writeFieldBegin('secureMsgRandomCode', Thrift.Type.STRING, 8);
    output.writeString(this.secureMsgRandomCode);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 9);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.fqUserLoginId !== null && this.fqUserLoginId !== undefined) {
    output.writeFieldBegin('fqUserLoginId', Thrift.Type.STRING, 10);
    output.writeString(this.fqUserLoginId);
    output.writeFieldEnd();
  }
  if (this.fidoResponse !== null && this.fidoResponse !== undefined) {
    output.writeFieldBegin('fidoResponse', Thrift.Type.STRING, 11);
    output.writeString(this.fidoResponse);
    output.writeFieldEnd();
  }
  if (this.ldapDomain !== null && this.ldapDomain !== undefined) {
    output.writeFieldBegin('ldapDomain', Thrift.Type.STRING, 12);
    output.writeString(this.ldapDomain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthConnectParam = function(args) {
  this.authGatewayId = null;
  this.sharedSecret = null;
  this.workstationName = null;
  this.udid = null;
  if (args) {
    if (args.authGatewayId !== undefined && args.authGatewayId !== null) {
      this.authGatewayId = args.authGatewayId;
    }
    if (args.sharedSecret !== undefined && args.sharedSecret !== null) {
      this.sharedSecret = args.sharedSecret;
    }
    if (args.workstationName !== undefined && args.workstationName !== null) {
      this.workstationName = args.workstationName;
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
  }
};
AuthConnectParam.prototype = {};
AuthConnectParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authGatewayId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sharedSecret = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.workstationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthConnectParam.prototype.write = function(output) {
  output.writeStructBegin('AuthConnectParam');
  if (this.authGatewayId !== null && this.authGatewayId !== undefined) {
    output.writeFieldBegin('authGatewayId', Thrift.Type.STRING, 1);
    output.writeString(this.authGatewayId);
    output.writeFieldEnd();
  }
  if (this.sharedSecret !== null && this.sharedSecret !== undefined) {
    output.writeFieldBegin('sharedSecret', Thrift.Type.STRING, 2);
    output.writeBinary(this.sharedSecret);
    output.writeFieldEnd();
  }
  if (this.workstationName !== null && this.workstationName !== undefined) {
    output.writeFieldBegin('workstationName', Thrift.Type.STRING, 3);
    output.writeString(this.workstationName);
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 4);
    output.writeBinary(this.udid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthSelectParam = function(args) {
  this.authGatewayId = null;
  this.loginId = null;
  this.sharedSecret = null;
  this.udid = null;
  this.workstationName = null;
  this.clientType = null;
  if (args) {
    if (args.authGatewayId !== undefined && args.authGatewayId !== null) {
      this.authGatewayId = args.authGatewayId;
    }
    if (args.loginId !== undefined && args.loginId !== null) {
      this.loginId = args.loginId;
    }
    if (args.sharedSecret !== undefined && args.sharedSecret !== null) {
      this.sharedSecret = args.sharedSecret;
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
    if (args.workstationName !== undefined && args.workstationName !== null) {
      this.workstationName = args.workstationName;
    }
    if (args.clientType !== undefined && args.clientType !== null) {
      this.clientType = args.clientType;
    }
  }
};
AuthSelectParam.prototype = {};
AuthSelectParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authGatewayId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.loginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sharedSecret = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.workstationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.clientType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthSelectParam.prototype.write = function(output) {
  output.writeStructBegin('AuthSelectParam');
  if (this.authGatewayId !== null && this.authGatewayId !== undefined) {
    output.writeFieldBegin('authGatewayId', Thrift.Type.STRING, 1);
    output.writeString(this.authGatewayId);
    output.writeFieldEnd();
  }
  if (this.loginId !== null && this.loginId !== undefined) {
    output.writeFieldBegin('loginId', Thrift.Type.STRING, 2);
    output.writeString(this.loginId);
    output.writeFieldEnd();
  }
  if (this.sharedSecret !== null && this.sharedSecret !== undefined) {
    output.writeFieldBegin('sharedSecret', Thrift.Type.STRING, 3);
    output.writeBinary(this.sharedSecret);
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 4);
    output.writeBinary(this.udid);
    output.writeFieldEnd();
  }
  if (this.workstationName !== null && this.workstationName !== undefined) {
    output.writeFieldBegin('workstationName', Thrift.Type.STRING, 5);
    output.writeString(this.workstationName);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.I32, 6);
    output.writeI32(this.clientType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthSelectResponse = function(args) {
  this.authMethods = null;
  if (args) {
    if (args.authMethods !== undefined && args.authMethods !== null) {
      this.authMethods = Thrift.copyList(args.authMethods, [null]);
    }
  }
};
AuthSelectResponse.prototype = {};
AuthSelectResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.authMethods = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = input.readI32().value;
          this.authMethods.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthSelectResponse.prototype.write = function(output) {
  output.writeStructBegin('AuthSelectResponse');
  if (this.authMethods !== null && this.authMethods !== undefined) {
    output.writeFieldBegin('authMethods', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.authMethods.length);
    for (var iter16 in this.authMethods) {
      if (this.authMethods.hasOwnProperty(iter16)) {
        iter16 = this.authMethods[iter16];
        output.writeI32(iter16);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QrCodeResponse = function(args) {
  this.timeToLive = null;
  this.data = null;
  if (args) {
    if (args.timeToLive !== undefined && args.timeToLive !== null) {
      this.timeToLive = args.timeToLive;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
QrCodeResponse.prototype = {};
QrCodeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.timeToLive = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QrCodeResponse.prototype.write = function(output) {
  output.writeStructBegin('QrCodeResponse');
  if (this.timeToLive !== null && this.timeToLive !== undefined) {
    output.writeFieldBegin('timeToLive', Thrift.Type.I32, 1);
    output.writeI32(this.timeToLive);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignatureParam = function(args) {
  this.clientSignature = null;
  this.appDigest = null;
  if (args) {
    if (args.clientSignature !== undefined && args.clientSignature !== null) {
      this.clientSignature = args.clientSignature;
    }
    if (args.appDigest !== undefined && args.appDigest !== null) {
      this.appDigest = args.appDigest;
    }
  }
};
SignatureParam.prototype = {};
SignatureParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientSignature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appDigest = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignatureParam.prototype.write = function(output) {
  output.writeStructBegin('SignatureParam');
  if (this.clientSignature !== null && this.clientSignature !== undefined) {
    output.writeFieldBegin('clientSignature', Thrift.Type.STRING, 1);
    output.writeBinary(this.clientSignature);
    output.writeFieldEnd();
  }
  if (this.appDigest !== null && this.appDigest !== undefined) {
    output.writeFieldBegin('appDigest', Thrift.Type.STRING, 2);
    output.writeBinary(this.appDigest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignatureResponse = function(args) {
  this.reconnectTicket = null;
  this.keepAliveSeconds = null;
  if (args) {
    if (args.reconnectTicket !== undefined && args.reconnectTicket !== null) {
      this.reconnectTicket = args.reconnectTicket;
    }
    if (args.keepAliveSeconds !== undefined && args.keepAliveSeconds !== null) {
      this.keepAliveSeconds = args.keepAliveSeconds;
    }
  }
};
SignatureResponse.prototype = {};
SignatureResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reconnectTicket = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keepAliveSeconds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignatureResponse.prototype.write = function(output) {
  output.writeStructBegin('SignatureResponse');
  if (this.reconnectTicket !== null && this.reconnectTicket !== undefined) {
    output.writeFieldBegin('reconnectTicket', Thrift.Type.STRING, 1);
    output.writeBinary(this.reconnectTicket);
    output.writeFieldEnd();
  }
  if (this.keepAliveSeconds !== null && this.keepAliveSeconds !== undefined) {
    output.writeFieldBegin('keepAliveSeconds', Thrift.Type.I32, 2);
    output.writeI32(this.keepAliveSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeviceOfflineKey = function(args) {
  this.deviceId = null;
  this.udid = null;
  this.offlineKey = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
    if (args.offlineKey !== undefined && args.offlineKey !== null) {
      this.offlineKey = args.offlineKey;
    }
  }
};
DeviceOfflineKey.prototype = {};
DeviceOfflineKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.offlineKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceOfflineKey.prototype.write = function(output) {
  output.writeStructBegin('DeviceOfflineKey');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 2);
    output.writeBinary(this.udid);
    output.writeFieldEnd();
  }
  if (this.offlineKey !== null && this.offlineKey !== undefined) {
    output.writeFieldBegin('offlineKey', Thrift.Type.STRING, 3);
    output.writeBinary(this.offlineKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeviceOfflineKeysResponse = function(args) {
  this.window = null;
  this.validFor = null;
  this.deviceOfflineKeys = null;
  if (args) {
    if (args.window !== undefined && args.window !== null) {
      this.window = args.window;
    }
    if (args.validFor !== undefined && args.validFor !== null) {
      this.validFor = args.validFor;
    }
    if (args.deviceOfflineKeys !== undefined && args.deviceOfflineKeys !== null) {
      this.deviceOfflineKeys = Thrift.copyList(args.deviceOfflineKeys, [DeviceOfflineKey]);
    }
  }
};
DeviceOfflineKeysResponse.prototype = {};
DeviceOfflineKeysResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.window = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.validFor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.deviceOfflineKeys = [];
        var _rtmp318 = input.readListBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = new DeviceOfflineKey();
          elem20.read(input);
          this.deviceOfflineKeys.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceOfflineKeysResponse.prototype.write = function(output) {
  output.writeStructBegin('DeviceOfflineKeysResponse');
  if (this.window !== null && this.window !== undefined) {
    output.writeFieldBegin('window', Thrift.Type.I32, 1);
    output.writeI32(this.window);
    output.writeFieldEnd();
  }
  if (this.validFor !== null && this.validFor !== undefined) {
    output.writeFieldBegin('validFor', Thrift.Type.I32, 2);
    output.writeI32(this.validFor);
    output.writeFieldEnd();
  }
  if (this.deviceOfflineKeys !== null && this.deviceOfflineKeys !== undefined) {
    output.writeFieldBegin('deviceOfflineKeys', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.deviceOfflineKeys.length);
    for (var iter21 in this.deviceOfflineKeys) {
      if (this.deviceOfflineKeys.hasOwnProperty(iter21)) {
        iter21 = this.deviceOfflineKeys[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

