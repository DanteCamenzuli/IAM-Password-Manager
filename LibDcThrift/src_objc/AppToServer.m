/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "AppSystem.h"

#import "AppToServer.h"

@implementation ServerSignatureParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDataForSignature: (NSData *) dataForSignature appVersion: (AppVersion *) appVersion libVersion: (AppVersion *) libVersion domainName: (NSString *) domainName iamDcem: (BOOL) iamDcem commClientType: (int) commClientType
{
  self = [super init];
  __dataForSignature = [dataForSignature retain_stub];
  __dataForSignature_isset = YES;
  __appVersion = [appVersion retain_stub];
  __appVersion_isset = YES;
  __libVersion = [libVersion retain_stub];
  __libVersion_isset = YES;
  __domainName = [domainName retain_stub];
  __domainName_isset = YES;
  __iamDcem = iamDcem;
  __iamDcem_isset = YES;
  __commClientType = commClientType;
  __commClientType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dataForSignature"])
  {
    __dataForSignature = [[decoder decodeObjectForKey: @"dataForSignature"] retain_stub];
    __dataForSignature_isset = YES;
  }
  if ([decoder containsValueForKey: @"appVersion"])
  {
    __appVersion = [[decoder decodeObjectForKey: @"appVersion"] retain_stub];
    __appVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"libVersion"])
  {
    __libVersion = [[decoder decodeObjectForKey: @"libVersion"] retain_stub];
    __libVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"domainName"])
  {
    __domainName = [[decoder decodeObjectForKey: @"domainName"] retain_stub];
    __domainName_isset = YES;
  }
  if ([decoder containsValueForKey: @"iamDcem"])
  {
    __iamDcem = [decoder decodeBoolForKey: @"iamDcem"];
    __iamDcem_isset = YES;
  }
  if ([decoder containsValueForKey: @"commClientType"])
  {
    __commClientType = [decoder decodeIntForKey: @"commClientType"];
    __commClientType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dataForSignature_isset)
  {
    [encoder encodeObject: __dataForSignature forKey: @"dataForSignature"];
  }
  if (__appVersion_isset)
  {
    [encoder encodeObject: __appVersion forKey: @"appVersion"];
  }
  if (__libVersion_isset)
  {
    [encoder encodeObject: __libVersion forKey: @"libVersion"];
  }
  if (__domainName_isset)
  {
    [encoder encodeObject: __domainName forKey: @"domainName"];
  }
  if (__iamDcem_isset)
  {
    [encoder encodeBool: __iamDcem forKey: @"iamDcem"];
  }
  if (__commClientType_isset)
  {
    [encoder encodeInt: __commClientType forKey: @"commClientType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __dataForSignature_isset ? 2654435761 : 0;
  if (__dataForSignature_isset)
  {
    hash = (hash * 31) ^ [__dataForSignature hash];
  }
  hash = (hash * 31) ^ __appVersion_isset ? 2654435761 : 0;
  if (__appVersion_isset)
  {
    hash = (hash * 31) ^ [__appVersion hash];
  }
  hash = (hash * 31) ^ __libVersion_isset ? 2654435761 : 0;
  if (__libVersion_isset)
  {
    hash = (hash * 31) ^ [__libVersion hash];
  }
  hash = (hash * 31) ^ __domainName_isset ? 2654435761 : 0;
  if (__domainName_isset)
  {
    hash = (hash * 31) ^ [__domainName hash];
  }
  hash = (hash * 31) ^ __iamDcem_isset ? 2654435761 : 0;
  if (__iamDcem_isset)
  {
    hash = (hash * 31) ^ [@(__iamDcem) hash];
  }
  hash = (hash * 31) ^ __commClientType_isset ? 2654435761 : 0;
  if (__commClientType_isset)
  {
    hash = (hash * 31) ^ [@(__commClientType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ServerSignatureParam class]]) {
    return NO;
  }
  ServerSignatureParam *other = (ServerSignatureParam *)anObject;
  if ((__dataForSignature_isset != other->__dataForSignature_isset) ||
      (__dataForSignature_isset && ((__dataForSignature || other->__dataForSignature) && ![__dataForSignature isEqual:other->__dataForSignature]))) {
    return NO;
  }
  if ((__appVersion_isset != other->__appVersion_isset) ||
      (__appVersion_isset && ((__appVersion || other->__appVersion) && ![__appVersion isEqual:other->__appVersion]))) {
    return NO;
  }
  if ((__libVersion_isset != other->__libVersion_isset) ||
      (__libVersion_isset && ((__libVersion || other->__libVersion) && ![__libVersion isEqual:other->__libVersion]))) {
    return NO;
  }
  if ((__domainName_isset != other->__domainName_isset) ||
      (__domainName_isset && ((__domainName || other->__domainName) && ![__domainName isEqual:other->__domainName]))) {
    return NO;
  }
  if ((__iamDcem_isset != other->__iamDcem_isset) ||
      (__iamDcem_isset && (__iamDcem != other->__iamDcem))) {
    return NO;
  }
  if ((__commClientType_isset != other->__commClientType_isset) ||
      (__commClientType_isset && (__commClientType != other->__commClientType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__dataForSignature release_stub];
  [__appVersion release_stub];
  [__libVersion release_stub];
  [__domainName release_stub];
  [super dealloc_stub];
}

- (NSData *) dataForSignature {
  return [[__dataForSignature retain_stub] autorelease_stub];
}

- (void) setDataForSignature: (NSData *) dataForSignature {
  [dataForSignature retain_stub];
  [__dataForSignature release_stub];
  __dataForSignature = dataForSignature;
  __dataForSignature_isset = YES;
}

- (BOOL) dataForSignatureIsSet {
  return __dataForSignature_isset;
}

- (void) unsetDataForSignature {
  [__dataForSignature release_stub];
  __dataForSignature = nil;
  __dataForSignature_isset = NO;
}

- (AppVersion *) appVersion {
  return [[__appVersion retain_stub] autorelease_stub];
}

- (void) setAppVersion: (AppVersion *) appVersion {
  [appVersion retain_stub];
  [__appVersion release_stub];
  __appVersion = appVersion;
  __appVersion_isset = YES;
}

- (BOOL) appVersionIsSet {
  return __appVersion_isset;
}

- (void) unsetAppVersion {
  [__appVersion release_stub];
  __appVersion = nil;
  __appVersion_isset = NO;
}

- (AppVersion *) libVersion {
  return [[__libVersion retain_stub] autorelease_stub];
}

- (void) setLibVersion: (AppVersion *) libVersion {
  [libVersion retain_stub];
  [__libVersion release_stub];
  __libVersion = libVersion;
  __libVersion_isset = YES;
}

- (BOOL) libVersionIsSet {
  return __libVersion_isset;
}

- (void) unsetLibVersion {
  [__libVersion release_stub];
  __libVersion = nil;
  __libVersion_isset = NO;
}

- (NSString *) domainName {
  return [[__domainName retain_stub] autorelease_stub];
}

- (void) setDomainName: (NSString *) domainName {
  [domainName retain_stub];
  [__domainName release_stub];
  __domainName = domainName;
  __domainName_isset = YES;
}

- (BOOL) domainNameIsSet {
  return __domainName_isset;
}

- (void) unsetDomainName {
  [__domainName release_stub];
  __domainName = nil;
  __domainName_isset = NO;
}

- (BOOL) iamDcem {
  return __iamDcem;
}

- (void) setIamDcem: (BOOL) iamDcem {
  __iamDcem = iamDcem;
  __iamDcem_isset = YES;
}

- (BOOL) iamDcemIsSet {
  return __iamDcem_isset;
}

- (void) unsetIamDcem {
  __iamDcem_isset = NO;
}

- (int) commClientType {
  return __commClientType;
}

- (void) setCommClientType: (int) commClientType {
  __commClientType = commClientType;
  __commClientType_isset = YES;
}

- (BOOL) commClientTypeIsSet {
  return __commClientType_isset;
}

- (void) unsetCommClientType {
  __commClientType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDataForSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AppVersion *fieldValue = [[AppVersion alloc] init];
          [fieldValue read: inProtocol];
          [self setAppVersion: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AppVersion *fieldValue = [[AppVersion alloc] init];
          [fieldValue read: inProtocol];
          [self setLibVersion: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomainName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIamDcem: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCommClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServerSignatureParam"];
  if (__dataForSignature_isset) {
    if (__dataForSignature != nil) {
      [outProtocol writeFieldBeginWithName: @"dataForSignature" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __dataForSignature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appVersion_isset) {
    if (__appVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"appVersion" type: TType_STRUCT fieldID: 2];
      [__appVersion write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__libVersion_isset) {
    if (__libVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"libVersion" type: TType_STRUCT fieldID: 3];
      [__libVersion write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__domainName_isset) {
    if (__domainName != nil) {
      [outProtocol writeFieldBeginWithName: @"domainName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __domainName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iamDcem_isset) {
    [outProtocol writeFieldBeginWithName: @"iamDcem" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __iamDcem];
    [outProtocol writeFieldEnd];
  }
  if (__commClientType_isset) {
    [outProtocol writeFieldBeginWithName: @"commClientType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __commClientType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServerSignatureParam("];
  [ms appendString: @"dataForSignature:"];
  [ms appendFormat: @"\"%@\"", __dataForSignature];
  [ms appendString: @",appVersion:"];
  [ms appendFormat: @"%@", __appVersion];
  [ms appendString: @",libVersion:"];
  [ms appendFormat: @"%@", __libVersion];
  [ms appendString: @",domainName:"];
  [ms appendFormat: @"\"%@\"", __domainName];
  [ms appendString: @",iamDcem:"];
  [ms appendFormat: @"%i", __iamDcem];
  [ms appendString: @",commClientType:"];
  [ms appendFormat: @"%i", __commClientType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ServerSignatureResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServerSignature: (NSData *) serverSignature serverVersion: (AppVersion *) serverVersion isReverseProxy: (BOOL) isReverseProxy isDispatched: (BOOL) isDispatched challenge: (NSData *) challenge
{
  self = [super init];
  __serverSignature = [serverSignature retain_stub];
  __serverSignature_isset = YES;
  __serverVersion = [serverVersion retain_stub];
  __serverVersion_isset = YES;
  __isReverseProxy = isReverseProxy;
  __isReverseProxy_isset = YES;
  __isDispatched = isDispatched;
  __isDispatched_isset = YES;
  __challenge = [challenge retain_stub];
  __challenge_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serverSignature"])
  {
    __serverSignature = [[decoder decodeObjectForKey: @"serverSignature"] retain_stub];
    __serverSignature_isset = YES;
  }
  if ([decoder containsValueForKey: @"serverVersion"])
  {
    __serverVersion = [[decoder decodeObjectForKey: @"serverVersion"] retain_stub];
    __serverVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"isReverseProxy"])
  {
    __isReverseProxy = [decoder decodeBoolForKey: @"isReverseProxy"];
    __isReverseProxy_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDispatched"])
  {
    __isDispatched = [decoder decodeBoolForKey: @"isDispatched"];
    __isDispatched_isset = YES;
  }
  if ([decoder containsValueForKey: @"challenge"])
  {
    __challenge = [[decoder decodeObjectForKey: @"challenge"] retain_stub];
    __challenge_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serverSignature_isset)
  {
    [encoder encodeObject: __serverSignature forKey: @"serverSignature"];
  }
  if (__serverVersion_isset)
  {
    [encoder encodeObject: __serverVersion forKey: @"serverVersion"];
  }
  if (__isReverseProxy_isset)
  {
    [encoder encodeBool: __isReverseProxy forKey: @"isReverseProxy"];
  }
  if (__isDispatched_isset)
  {
    [encoder encodeBool: __isDispatched forKey: @"isDispatched"];
  }
  if (__challenge_isset)
  {
    [encoder encodeObject: __challenge forKey: @"challenge"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serverSignature_isset ? 2654435761 : 0;
  if (__serverSignature_isset)
  {
    hash = (hash * 31) ^ [__serverSignature hash];
  }
  hash = (hash * 31) ^ __serverVersion_isset ? 2654435761 : 0;
  if (__serverVersion_isset)
  {
    hash = (hash * 31) ^ [__serverVersion hash];
  }
  hash = (hash * 31) ^ __isReverseProxy_isset ? 2654435761 : 0;
  if (__isReverseProxy_isset)
  {
    hash = (hash * 31) ^ [@(__isReverseProxy) hash];
  }
  hash = (hash * 31) ^ __isDispatched_isset ? 2654435761 : 0;
  if (__isDispatched_isset)
  {
    hash = (hash * 31) ^ [@(__isDispatched) hash];
  }
  hash = (hash * 31) ^ __challenge_isset ? 2654435761 : 0;
  if (__challenge_isset)
  {
    hash = (hash * 31) ^ [__challenge hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ServerSignatureResponse class]]) {
    return NO;
  }
  ServerSignatureResponse *other = (ServerSignatureResponse *)anObject;
  if ((__serverSignature_isset != other->__serverSignature_isset) ||
      (__serverSignature_isset && ((__serverSignature || other->__serverSignature) && ![__serverSignature isEqual:other->__serverSignature]))) {
    return NO;
  }
  if ((__serverVersion_isset != other->__serverVersion_isset) ||
      (__serverVersion_isset && ((__serverVersion || other->__serverVersion) && ![__serverVersion isEqual:other->__serverVersion]))) {
    return NO;
  }
  if ((__isReverseProxy_isset != other->__isReverseProxy_isset) ||
      (__isReverseProxy_isset && (__isReverseProxy != other->__isReverseProxy))) {
    return NO;
  }
  if ((__isDispatched_isset != other->__isDispatched_isset) ||
      (__isDispatched_isset && (__isDispatched != other->__isDispatched))) {
    return NO;
  }
  if ((__challenge_isset != other->__challenge_isset) ||
      (__challenge_isset && ((__challenge || other->__challenge) && ![__challenge isEqual:other->__challenge]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serverSignature release_stub];
  [__serverVersion release_stub];
  [__challenge release_stub];
  [super dealloc_stub];
}

- (NSData *) serverSignature {
  return [[__serverSignature retain_stub] autorelease_stub];
}

- (void) setServerSignature: (NSData *) serverSignature {
  [serverSignature retain_stub];
  [__serverSignature release_stub];
  __serverSignature = serverSignature;
  __serverSignature_isset = YES;
}

- (BOOL) serverSignatureIsSet {
  return __serverSignature_isset;
}

- (void) unsetServerSignature {
  [__serverSignature release_stub];
  __serverSignature = nil;
  __serverSignature_isset = NO;
}

- (AppVersion *) serverVersion {
  return [[__serverVersion retain_stub] autorelease_stub];
}

- (void) setServerVersion: (AppVersion *) serverVersion {
  [serverVersion retain_stub];
  [__serverVersion release_stub];
  __serverVersion = serverVersion;
  __serverVersion_isset = YES;
}

- (BOOL) serverVersionIsSet {
  return __serverVersion_isset;
}

- (void) unsetServerVersion {
  [__serverVersion release_stub];
  __serverVersion = nil;
  __serverVersion_isset = NO;
}

- (BOOL) isReverseProxy {
  return __isReverseProxy;
}

- (void) setIsReverseProxy: (BOOL) isReverseProxy {
  __isReverseProxy = isReverseProxy;
  __isReverseProxy_isset = YES;
}

- (BOOL) isReverseProxyIsSet {
  return __isReverseProxy_isset;
}

- (void) unsetIsReverseProxy {
  __isReverseProxy_isset = NO;
}

- (BOOL) isDispatched {
  return __isDispatched;
}

- (void) setIsDispatched: (BOOL) isDispatched {
  __isDispatched = isDispatched;
  __isDispatched_isset = YES;
}

- (BOOL) isDispatchedIsSet {
  return __isDispatched_isset;
}

- (void) unsetIsDispatched {
  __isDispatched_isset = NO;
}

- (NSData *) challenge {
  return [[__challenge retain_stub] autorelease_stub];
}

- (void) setChallenge: (NSData *) challenge {
  [challenge retain_stub];
  [__challenge release_stub];
  __challenge = challenge;
  __challenge_isset = YES;
}

- (BOOL) challengeIsSet {
  return __challenge_isset;
}

- (void) unsetChallenge {
  [__challenge release_stub];
  __challenge = nil;
  __challenge_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setServerSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AppVersion *fieldValue = [[AppVersion alloc] init];
          [fieldValue read: inProtocol];
          [self setServerVersion: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsReverseProxy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsDispatched: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setChallenge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServerSignatureResponse"];
  if (__serverSignature_isset) {
    if (__serverSignature != nil) {
      [outProtocol writeFieldBeginWithName: @"serverSignature" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __serverSignature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serverVersion_isset) {
    if (__serverVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"serverVersion" type: TType_STRUCT fieldID: 2];
      [__serverVersion write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isReverseProxy_isset) {
    [outProtocol writeFieldBeginWithName: @"isReverseProxy" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __isReverseProxy];
    [outProtocol writeFieldEnd];
  }
  if (__isDispatched_isset) {
    [outProtocol writeFieldBeginWithName: @"isDispatched" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isDispatched];
    [outProtocol writeFieldEnd];
  }
  if (__challenge_isset) {
    if (__challenge != nil) {
      [outProtocol writeFieldBeginWithName: @"challenge" type: TType_STRING fieldID: 5];
      [outProtocol writeBinary: __challenge];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServerSignatureResponse("];
  [ms appendString: @"serverSignature:"];
  [ms appendFormat: @"\"%@\"", __serverSignature];
  [ms appendString: @",serverVersion:"];
  [ms appendFormat: @"%@", __serverVersion];
  [ms appendString: @",isReverseProxy:"];
  [ms appendFormat: @"%i", __isReverseProxy];
  [ms appendString: @",isDispatched:"];
  [ms appendFormat: @"%i", __isDispatched];
  [ms appendString: @",challenge:"];
  [ms appendFormat: @"\"%@\"", __challenge];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DomainSdkConfigParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDomainName: (NSString *) domainName activationCode: (NSString *) activationCode userId: (NSString *) userId dispatcherSignature: (NSData *) dispatcherSignature
{
  self = [super init];
  __domainName = [domainName retain_stub];
  __domainName_isset = YES;
  __activationCode = [activationCode retain_stub];
  __activationCode_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __dispatcherSignature = [dispatcherSignature retain_stub];
  __dispatcherSignature_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"domainName"])
  {
    __domainName = [[decoder decodeObjectForKey: @"domainName"] retain_stub];
    __domainName_isset = YES;
  }
  if ([decoder containsValueForKey: @"activationCode"])
  {
    __activationCode = [[decoder decodeObjectForKey: @"activationCode"] retain_stub];
    __activationCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"dispatcherSignature"])
  {
    __dispatcherSignature = [[decoder decodeObjectForKey: @"dispatcherSignature"] retain_stub];
    __dispatcherSignature_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__domainName_isset)
  {
    [encoder encodeObject: __domainName forKey: @"domainName"];
  }
  if (__activationCode_isset)
  {
    [encoder encodeObject: __activationCode forKey: @"activationCode"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__dispatcherSignature_isset)
  {
    [encoder encodeObject: __dispatcherSignature forKey: @"dispatcherSignature"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __domainName_isset ? 2654435761 : 0;
  if (__domainName_isset)
  {
    hash = (hash * 31) ^ [__domainName hash];
  }
  hash = (hash * 31) ^ __activationCode_isset ? 2654435761 : 0;
  if (__activationCode_isset)
  {
    hash = (hash * 31) ^ [__activationCode hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __dispatcherSignature_isset ? 2654435761 : 0;
  if (__dispatcherSignature_isset)
  {
    hash = (hash * 31) ^ [__dispatcherSignature hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DomainSdkConfigParam class]]) {
    return NO;
  }
  DomainSdkConfigParam *other = (DomainSdkConfigParam *)anObject;
  if ((__domainName_isset != other->__domainName_isset) ||
      (__domainName_isset && ((__domainName || other->__domainName) && ![__domainName isEqual:other->__domainName]))) {
    return NO;
  }
  if ((__activationCode_isset != other->__activationCode_isset) ||
      (__activationCode_isset && ((__activationCode || other->__activationCode) && ![__activationCode isEqual:other->__activationCode]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__dispatcherSignature_isset != other->__dispatcherSignature_isset) ||
      (__dispatcherSignature_isset && ((__dispatcherSignature || other->__dispatcherSignature) && ![__dispatcherSignature isEqual:other->__dispatcherSignature]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__domainName release_stub];
  [__activationCode release_stub];
  [__userId release_stub];
  [__dispatcherSignature release_stub];
  [super dealloc_stub];
}

- (NSString *) domainName {
  return [[__domainName retain_stub] autorelease_stub];
}

- (void) setDomainName: (NSString *) domainName {
  [domainName retain_stub];
  [__domainName release_stub];
  __domainName = domainName;
  __domainName_isset = YES;
}

- (BOOL) domainNameIsSet {
  return __domainName_isset;
}

- (void) unsetDomainName {
  [__domainName release_stub];
  __domainName = nil;
  __domainName_isset = NO;
}

- (NSString *) activationCode {
  return [[__activationCode retain_stub] autorelease_stub];
}

- (void) setActivationCode: (NSString *) activationCode {
  [activationCode retain_stub];
  [__activationCode release_stub];
  __activationCode = activationCode;
  __activationCode_isset = YES;
}

- (BOOL) activationCodeIsSet {
  return __activationCode_isset;
}

- (void) unsetActivationCode {
  [__activationCode release_stub];
  __activationCode = nil;
  __activationCode_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSData *) dispatcherSignature {
  return [[__dispatcherSignature retain_stub] autorelease_stub];
}

- (void) setDispatcherSignature: (NSData *) dispatcherSignature {
  [dispatcherSignature retain_stub];
  [__dispatcherSignature release_stub];
  __dispatcherSignature = dispatcherSignature;
  __dispatcherSignature_isset = YES;
}

- (BOOL) dispatcherSignatureIsSet {
  return __dispatcherSignature_isset;
}

- (void) unsetDispatcherSignature {
  [__dispatcherSignature release_stub];
  __dispatcherSignature = nil;
  __dispatcherSignature_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomainName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActivationCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDispatcherSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DomainSdkConfigParam"];
  if (__domainName_isset) {
    if (__domainName != nil) {
      [outProtocol writeFieldBeginWithName: @"domainName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __domainName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__activationCode_isset) {
    if (__activationCode != nil) {
      [outProtocol writeFieldBeginWithName: @"activationCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __activationCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dispatcherSignature_isset) {
    if (__dispatcherSignature != nil) {
      [outProtocol writeFieldBeginWithName: @"dispatcherSignature" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __dispatcherSignature];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DomainSdkConfigParam("];
  [ms appendString: @"domainName:"];
  [ms appendFormat: @"\"%@\"", __domainName];
  [ms appendString: @",activationCode:"];
  [ms appendFormat: @"\"%@\"", __activationCode];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",dispatcherSignature:"];
  [ms appendFormat: @"\"%@\"", __dispatcherSignature];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DomainSdkConfigResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSdkConfigDcem: (NSData *) sdkConfigDcem
{
  self = [super init];
  __sdkConfigDcem = [sdkConfigDcem retain_stub];
  __sdkConfigDcem_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sdkConfigDcem"])
  {
    __sdkConfigDcem = [[decoder decodeObjectForKey: @"sdkConfigDcem"] retain_stub];
    __sdkConfigDcem_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sdkConfigDcem_isset)
  {
    [encoder encodeObject: __sdkConfigDcem forKey: @"sdkConfigDcem"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sdkConfigDcem_isset ? 2654435761 : 0;
  if (__sdkConfigDcem_isset)
  {
    hash = (hash * 31) ^ [__sdkConfigDcem hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DomainSdkConfigResponse class]]) {
    return NO;
  }
  DomainSdkConfigResponse *other = (DomainSdkConfigResponse *)anObject;
  if ((__sdkConfigDcem_isset != other->__sdkConfigDcem_isset) ||
      (__sdkConfigDcem_isset && ((__sdkConfigDcem || other->__sdkConfigDcem) && ![__sdkConfigDcem isEqual:other->__sdkConfigDcem]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sdkConfigDcem release_stub];
  [super dealloc_stub];
}

- (NSData *) sdkConfigDcem {
  return [[__sdkConfigDcem retain_stub] autorelease_stub];
}

- (void) setSdkConfigDcem: (NSData *) sdkConfigDcem {
  [sdkConfigDcem retain_stub];
  [__sdkConfigDcem release_stub];
  __sdkConfigDcem = sdkConfigDcem;
  __sdkConfigDcem_isset = YES;
}

- (BOOL) sdkConfigDcemIsSet {
  return __sdkConfigDcem_isset;
}

- (void) unsetSdkConfigDcem {
  [__sdkConfigDcem release_stub];
  __sdkConfigDcem = nil;
  __sdkConfigDcem_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSdkConfigDcem: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DomainSdkConfigResponse"];
  if (__sdkConfigDcem_isset) {
    if (__sdkConfigDcem != nil) {
      [outProtocol writeFieldBeginWithName: @"sdkConfigDcem" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __sdkConfigDcem];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DomainSdkConfigResponse("];
  [ms appendString: @"sdkConfigDcem:"];
  [ms appendFormat: @"\"%@\"", __sdkConfigDcem];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegisterDispatcherParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDomainName: (NSString *) domainName dispatcherSignature: (NSData *) dispatcherSignature pnKey: (NSString *) pnKey
{
  self = [super init];
  __domainName = [domainName retain_stub];
  __domainName_isset = YES;
  __dispatcherSignature = [dispatcherSignature retain_stub];
  __dispatcherSignature_isset = YES;
  __pnKey = [pnKey retain_stub];
  __pnKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"domainName"])
  {
    __domainName = [[decoder decodeObjectForKey: @"domainName"] retain_stub];
    __domainName_isset = YES;
  }
  if ([decoder containsValueForKey: @"dispatcherSignature"])
  {
    __dispatcherSignature = [[decoder decodeObjectForKey: @"dispatcherSignature"] retain_stub];
    __dispatcherSignature_isset = YES;
  }
  if ([decoder containsValueForKey: @"pnKey"])
  {
    __pnKey = [[decoder decodeObjectForKey: @"pnKey"] retain_stub];
    __pnKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__domainName_isset)
  {
    [encoder encodeObject: __domainName forKey: @"domainName"];
  }
  if (__dispatcherSignature_isset)
  {
    [encoder encodeObject: __dispatcherSignature forKey: @"dispatcherSignature"];
  }
  if (__pnKey_isset)
  {
    [encoder encodeObject: __pnKey forKey: @"pnKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __domainName_isset ? 2654435761 : 0;
  if (__domainName_isset)
  {
    hash = (hash * 31) ^ [__domainName hash];
  }
  hash = (hash * 31) ^ __dispatcherSignature_isset ? 2654435761 : 0;
  if (__dispatcherSignature_isset)
  {
    hash = (hash * 31) ^ [__dispatcherSignature hash];
  }
  hash = (hash * 31) ^ __pnKey_isset ? 2654435761 : 0;
  if (__pnKey_isset)
  {
    hash = (hash * 31) ^ [__pnKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegisterDispatcherParam class]]) {
    return NO;
  }
  RegisterDispatcherParam *other = (RegisterDispatcherParam *)anObject;
  if ((__domainName_isset != other->__domainName_isset) ||
      (__domainName_isset && ((__domainName || other->__domainName) && ![__domainName isEqual:other->__domainName]))) {
    return NO;
  }
  if ((__dispatcherSignature_isset != other->__dispatcherSignature_isset) ||
      (__dispatcherSignature_isset && ((__dispatcherSignature || other->__dispatcherSignature) && ![__dispatcherSignature isEqual:other->__dispatcherSignature]))) {
    return NO;
  }
  if ((__pnKey_isset != other->__pnKey_isset) ||
      (__pnKey_isset && ((__pnKey || other->__pnKey) && ![__pnKey isEqual:other->__pnKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__domainName release_stub];
  [__dispatcherSignature release_stub];
  [__pnKey release_stub];
  [super dealloc_stub];
}

- (NSString *) domainName {
  return [[__domainName retain_stub] autorelease_stub];
}

- (void) setDomainName: (NSString *) domainName {
  [domainName retain_stub];
  [__domainName release_stub];
  __domainName = domainName;
  __domainName_isset = YES;
}

- (BOOL) domainNameIsSet {
  return __domainName_isset;
}

- (void) unsetDomainName {
  [__domainName release_stub];
  __domainName = nil;
  __domainName_isset = NO;
}

- (NSData *) dispatcherSignature {
  return [[__dispatcherSignature retain_stub] autorelease_stub];
}

- (void) setDispatcherSignature: (NSData *) dispatcherSignature {
  [dispatcherSignature retain_stub];
  [__dispatcherSignature release_stub];
  __dispatcherSignature = dispatcherSignature;
  __dispatcherSignature_isset = YES;
}

- (BOOL) dispatcherSignatureIsSet {
  return __dispatcherSignature_isset;
}

- (void) unsetDispatcherSignature {
  [__dispatcherSignature release_stub];
  __dispatcherSignature = nil;
  __dispatcherSignature_isset = NO;
}

- (NSString *) pnKey {
  return [[__pnKey retain_stub] autorelease_stub];
}

- (void) setPnKey: (NSString *) pnKey {
  [pnKey retain_stub];
  [__pnKey release_stub];
  __pnKey = pnKey;
  __pnKey_isset = YES;
}

- (BOOL) pnKeyIsSet {
  return __pnKey_isset;
}

- (void) unsetPnKey {
  [__pnKey release_stub];
  __pnKey = nil;
  __pnKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomainName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDispatcherSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPnKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterDispatcherParam"];
  if (__domainName_isset) {
    if (__domainName != nil) {
      [outProtocol writeFieldBeginWithName: @"domainName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __domainName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dispatcherSignature_isset) {
    if (__dispatcherSignature != nil) {
      [outProtocol writeFieldBeginWithName: @"dispatcherSignature" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __dispatcherSignature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pnKey_isset) {
    if (__pnKey != nil) {
      [outProtocol writeFieldBeginWithName: @"pnKey" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pnKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterDispatcherParam("];
  [ms appendString: @"domainName:"];
  [ms appendFormat: @"\"%@\"", __domainName];
  [ms appendString: @",dispatcherSignature:"];
  [ms appendFormat: @"\"%@\"", __dispatcherSignature];
  [ms appendString: @",pnKey:"];
  [ms appendFormat: @"\"%@\"", __pnKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegisterDispatcherResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClusterId: (NSString *) clusterId
{
  self = [super init];
  __clusterId = [clusterId retain_stub];
  __clusterId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clusterId"])
  {
    __clusterId = [[decoder decodeObjectForKey: @"clusterId"] retain_stub];
    __clusterId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clusterId_isset)
  {
    [encoder encodeObject: __clusterId forKey: @"clusterId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __clusterId_isset ? 2654435761 : 0;
  if (__clusterId_isset)
  {
    hash = (hash * 31) ^ [__clusterId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegisterDispatcherResponse class]]) {
    return NO;
  }
  RegisterDispatcherResponse *other = (RegisterDispatcherResponse *)anObject;
  if ((__clusterId_isset != other->__clusterId_isset) ||
      (__clusterId_isset && ((__clusterId || other->__clusterId) && ![__clusterId isEqual:other->__clusterId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__clusterId release_stub];
  [super dealloc_stub];
}

- (NSString *) clusterId {
  return [[__clusterId retain_stub] autorelease_stub];
}

- (void) setClusterId: (NSString *) clusterId {
  [clusterId retain_stub];
  [__clusterId release_stub];
  __clusterId = clusterId;
  __clusterId_isset = YES;
}

- (BOOL) clusterIdIsSet {
  return __clusterId_isset;
}

- (void) unsetClusterId {
  [__clusterId release_stub];
  __clusterId = nil;
  __clusterId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClusterId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterDispatcherResponse"];
  if (__clusterId_isset) {
    if (__clusterId != nil) {
      [outProtocol writeFieldBeginWithName: @"clusterId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clusterId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterDispatcherResponse("];
  [ms appendString: @"clusterId:"];
  [ms appendFormat: @"\"%@\"", __clusterId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivationParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithActivationCode: (NSString *) activationCode userId: (NSString *) userId udid: (NSData *) udid encPassword: (NSData *) encPassword cpuArch: (int) cpuArch osVersion: (NSString *) osVersion locale: (NSString *) locale manufacture: (NSString *) manufacture deviceModel: (NSString *) deviceModel deviceName: (NSString *) deviceName publicKey: (NSData *) publicKey signature: (NSData *) signature clientType: (int) clientType digest: (NSData *) digest risk: (NSData *) risk
{
  self = [super init];
  __activationCode = [activationCode retain_stub];
  __activationCode_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __udid = [udid retain_stub];
  __udid_isset = YES;
  __encPassword = [encPassword retain_stub];
  __encPassword_isset = YES;
  __cpuArch = cpuArch;
  __cpuArch_isset = YES;
  __osVersion = [osVersion retain_stub];
  __osVersion_isset = YES;
  __locale = [locale retain_stub];
  __locale_isset = YES;
  __manufacture = [manufacture retain_stub];
  __manufacture_isset = YES;
  __deviceModel = [deviceModel retain_stub];
  __deviceModel_isset = YES;
  __deviceName = [deviceName retain_stub];
  __deviceName_isset = YES;
  __publicKey = [publicKey retain_stub];
  __publicKey_isset = YES;
  __signature = [signature retain_stub];
  __signature_isset = YES;
  __clientType = clientType;
  __clientType_isset = YES;
  __digest = [digest retain_stub];
  __digest_isset = YES;
  __risk = [risk retain_stub];
  __risk_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"activationCode"])
  {
    __activationCode = [[decoder decodeObjectForKey: @"activationCode"] retain_stub];
    __activationCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"udid"])
  {
    __udid = [[decoder decodeObjectForKey: @"udid"] retain_stub];
    __udid_isset = YES;
  }
  if ([decoder containsValueForKey: @"encPassword"])
  {
    __encPassword = [[decoder decodeObjectForKey: @"encPassword"] retain_stub];
    __encPassword_isset = YES;
  }
  if ([decoder containsValueForKey: @"cpuArch"])
  {
    __cpuArch = [decoder decodeIntForKey: @"cpuArch"];
    __cpuArch_isset = YES;
  }
  if ([decoder containsValueForKey: @"osVersion"])
  {
    __osVersion = [[decoder decodeObjectForKey: @"osVersion"] retain_stub];
    __osVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"locale"])
  {
    __locale = [[decoder decodeObjectForKey: @"locale"] retain_stub];
    __locale_isset = YES;
  }
  if ([decoder containsValueForKey: @"manufacture"])
  {
    __manufacture = [[decoder decodeObjectForKey: @"manufacture"] retain_stub];
    __manufacture_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceModel"])
  {
    __deviceModel = [[decoder decodeObjectForKey: @"deviceModel"] retain_stub];
    __deviceModel_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceName"])
  {
    __deviceName = [[decoder decodeObjectForKey: @"deviceName"] retain_stub];
    __deviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"publicKey"])
  {
    __publicKey = [[decoder decodeObjectForKey: @"publicKey"] retain_stub];
    __publicKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"signature"])
  {
    __signature = [[decoder decodeObjectForKey: @"signature"] retain_stub];
    __signature_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientType"])
  {
    __clientType = [decoder decodeIntForKey: @"clientType"];
    __clientType_isset = YES;
  }
  if ([decoder containsValueForKey: @"digest"])
  {
    __digest = [[decoder decodeObjectForKey: @"digest"] retain_stub];
    __digest_isset = YES;
  }
  if ([decoder containsValueForKey: @"risk"])
  {
    __risk = [[decoder decodeObjectForKey: @"risk"] retain_stub];
    __risk_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__activationCode_isset)
  {
    [encoder encodeObject: __activationCode forKey: @"activationCode"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__udid_isset)
  {
    [encoder encodeObject: __udid forKey: @"udid"];
  }
  if (__encPassword_isset)
  {
    [encoder encodeObject: __encPassword forKey: @"encPassword"];
  }
  if (__cpuArch_isset)
  {
    [encoder encodeInt: __cpuArch forKey: @"cpuArch"];
  }
  if (__osVersion_isset)
  {
    [encoder encodeObject: __osVersion forKey: @"osVersion"];
  }
  if (__locale_isset)
  {
    [encoder encodeObject: __locale forKey: @"locale"];
  }
  if (__manufacture_isset)
  {
    [encoder encodeObject: __manufacture forKey: @"manufacture"];
  }
  if (__deviceModel_isset)
  {
    [encoder encodeObject: __deviceModel forKey: @"deviceModel"];
  }
  if (__deviceName_isset)
  {
    [encoder encodeObject: __deviceName forKey: @"deviceName"];
  }
  if (__publicKey_isset)
  {
    [encoder encodeObject: __publicKey forKey: @"publicKey"];
  }
  if (__signature_isset)
  {
    [encoder encodeObject: __signature forKey: @"signature"];
  }
  if (__clientType_isset)
  {
    [encoder encodeInt: __clientType forKey: @"clientType"];
  }
  if (__digest_isset)
  {
    [encoder encodeObject: __digest forKey: @"digest"];
  }
  if (__risk_isset)
  {
    [encoder encodeObject: __risk forKey: @"risk"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __activationCode_isset ? 2654435761 : 0;
  if (__activationCode_isset)
  {
    hash = (hash * 31) ^ [__activationCode hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __udid_isset ? 2654435761 : 0;
  if (__udid_isset)
  {
    hash = (hash * 31) ^ [__udid hash];
  }
  hash = (hash * 31) ^ __encPassword_isset ? 2654435761 : 0;
  if (__encPassword_isset)
  {
    hash = (hash * 31) ^ [__encPassword hash];
  }
  hash = (hash * 31) ^ __cpuArch_isset ? 2654435761 : 0;
  if (__cpuArch_isset)
  {
    hash = (hash * 31) ^ [@(__cpuArch) hash];
  }
  hash = (hash * 31) ^ __osVersion_isset ? 2654435761 : 0;
  if (__osVersion_isset)
  {
    hash = (hash * 31) ^ [__osVersion hash];
  }
  hash = (hash * 31) ^ __locale_isset ? 2654435761 : 0;
  if (__locale_isset)
  {
    hash = (hash * 31) ^ [__locale hash];
  }
  hash = (hash * 31) ^ __manufacture_isset ? 2654435761 : 0;
  if (__manufacture_isset)
  {
    hash = (hash * 31) ^ [__manufacture hash];
  }
  hash = (hash * 31) ^ __deviceModel_isset ? 2654435761 : 0;
  if (__deviceModel_isset)
  {
    hash = (hash * 31) ^ [__deviceModel hash];
  }
  hash = (hash * 31) ^ __deviceName_isset ? 2654435761 : 0;
  if (__deviceName_isset)
  {
    hash = (hash * 31) ^ [__deviceName hash];
  }
  hash = (hash * 31) ^ __publicKey_isset ? 2654435761 : 0;
  if (__publicKey_isset)
  {
    hash = (hash * 31) ^ [__publicKey hash];
  }
  hash = (hash * 31) ^ __signature_isset ? 2654435761 : 0;
  if (__signature_isset)
  {
    hash = (hash * 31) ^ [__signature hash];
  }
  hash = (hash * 31) ^ __clientType_isset ? 2654435761 : 0;
  if (__clientType_isset)
  {
    hash = (hash * 31) ^ [@(__clientType) hash];
  }
  hash = (hash * 31) ^ __digest_isset ? 2654435761 : 0;
  if (__digest_isset)
  {
    hash = (hash * 31) ^ [__digest hash];
  }
  hash = (hash * 31) ^ __risk_isset ? 2654435761 : 0;
  if (__risk_isset)
  {
    hash = (hash * 31) ^ [__risk hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ActivationParam class]]) {
    return NO;
  }
  ActivationParam *other = (ActivationParam *)anObject;
  if ((__activationCode_isset != other->__activationCode_isset) ||
      (__activationCode_isset && ((__activationCode || other->__activationCode) && ![__activationCode isEqual:other->__activationCode]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__udid_isset != other->__udid_isset) ||
      (__udid_isset && ((__udid || other->__udid) && ![__udid isEqual:other->__udid]))) {
    return NO;
  }
  if ((__encPassword_isset != other->__encPassword_isset) ||
      (__encPassword_isset && ((__encPassword || other->__encPassword) && ![__encPassword isEqual:other->__encPassword]))) {
    return NO;
  }
  if ((__cpuArch_isset != other->__cpuArch_isset) ||
      (__cpuArch_isset && (__cpuArch != other->__cpuArch))) {
    return NO;
  }
  if ((__osVersion_isset != other->__osVersion_isset) ||
      (__osVersion_isset && ((__osVersion || other->__osVersion) && ![__osVersion isEqual:other->__osVersion]))) {
    return NO;
  }
  if ((__locale_isset != other->__locale_isset) ||
      (__locale_isset && ((__locale || other->__locale) && ![__locale isEqual:other->__locale]))) {
    return NO;
  }
  if ((__manufacture_isset != other->__manufacture_isset) ||
      (__manufacture_isset && ((__manufacture || other->__manufacture) && ![__manufacture isEqual:other->__manufacture]))) {
    return NO;
  }
  if ((__deviceModel_isset != other->__deviceModel_isset) ||
      (__deviceModel_isset && ((__deviceModel || other->__deviceModel) && ![__deviceModel isEqual:other->__deviceModel]))) {
    return NO;
  }
  if ((__deviceName_isset != other->__deviceName_isset) ||
      (__deviceName_isset && ((__deviceName || other->__deviceName) && ![__deviceName isEqual:other->__deviceName]))) {
    return NO;
  }
  if ((__publicKey_isset != other->__publicKey_isset) ||
      (__publicKey_isset && ((__publicKey || other->__publicKey) && ![__publicKey isEqual:other->__publicKey]))) {
    return NO;
  }
  if ((__signature_isset != other->__signature_isset) ||
      (__signature_isset && ((__signature || other->__signature) && ![__signature isEqual:other->__signature]))) {
    return NO;
  }
  if ((__clientType_isset != other->__clientType_isset) ||
      (__clientType_isset && (__clientType != other->__clientType))) {
    return NO;
  }
  if ((__digest_isset != other->__digest_isset) ||
      (__digest_isset && ((__digest || other->__digest) && ![__digest isEqual:other->__digest]))) {
    return NO;
  }
  if ((__risk_isset != other->__risk_isset) ||
      (__risk_isset && ((__risk || other->__risk) && ![__risk isEqual:other->__risk]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__activationCode release_stub];
  [__userId release_stub];
  [__udid release_stub];
  [__encPassword release_stub];
  [__osVersion release_stub];
  [__locale release_stub];
  [__manufacture release_stub];
  [__deviceModel release_stub];
  [__deviceName release_stub];
  [__publicKey release_stub];
  [__signature release_stub];
  [__digest release_stub];
  [__risk release_stub];
  [super dealloc_stub];
}

- (NSString *) activationCode {
  return [[__activationCode retain_stub] autorelease_stub];
}

- (void) setActivationCode: (NSString *) activationCode {
  [activationCode retain_stub];
  [__activationCode release_stub];
  __activationCode = activationCode;
  __activationCode_isset = YES;
}

- (BOOL) activationCodeIsSet {
  return __activationCode_isset;
}

- (void) unsetActivationCode {
  [__activationCode release_stub];
  __activationCode = nil;
  __activationCode_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSData *) udid {
  return [[__udid retain_stub] autorelease_stub];
}

- (void) setUdid: (NSData *) udid {
  [udid retain_stub];
  [__udid release_stub];
  __udid = udid;
  __udid_isset = YES;
}

- (BOOL) udidIsSet {
  return __udid_isset;
}

- (void) unsetUdid {
  [__udid release_stub];
  __udid = nil;
  __udid_isset = NO;
}

- (NSData *) encPassword {
  return [[__encPassword retain_stub] autorelease_stub];
}

- (void) setEncPassword: (NSData *) encPassword {
  [encPassword retain_stub];
  [__encPassword release_stub];
  __encPassword = encPassword;
  __encPassword_isset = YES;
}

- (BOOL) encPasswordIsSet {
  return __encPassword_isset;
}

- (void) unsetEncPassword {
  [__encPassword release_stub];
  __encPassword = nil;
  __encPassword_isset = NO;
}

- (int) cpuArch {
  return __cpuArch;
}

- (void) setCpuArch: (int) cpuArch {
  __cpuArch = cpuArch;
  __cpuArch_isset = YES;
}

- (BOOL) cpuArchIsSet {
  return __cpuArch_isset;
}

- (void) unsetCpuArch {
  __cpuArch_isset = NO;
}

- (NSString *) osVersion {
  return [[__osVersion retain_stub] autorelease_stub];
}

- (void) setOsVersion: (NSString *) osVersion {
  [osVersion retain_stub];
  [__osVersion release_stub];
  __osVersion = osVersion;
  __osVersion_isset = YES;
}

- (BOOL) osVersionIsSet {
  return __osVersion_isset;
}

- (void) unsetOsVersion {
  [__osVersion release_stub];
  __osVersion = nil;
  __osVersion_isset = NO;
}

- (NSString *) locale {
  return [[__locale retain_stub] autorelease_stub];
}

- (void) setLocale: (NSString *) locale {
  [locale retain_stub];
  [__locale release_stub];
  __locale = locale;
  __locale_isset = YES;
}

- (BOOL) localeIsSet {
  return __locale_isset;
}

- (void) unsetLocale {
  [__locale release_stub];
  __locale = nil;
  __locale_isset = NO;
}

- (NSString *) manufacture {
  return [[__manufacture retain_stub] autorelease_stub];
}

- (void) setManufacture: (NSString *) manufacture {
  [manufacture retain_stub];
  [__manufacture release_stub];
  __manufacture = manufacture;
  __manufacture_isset = YES;
}

- (BOOL) manufactureIsSet {
  return __manufacture_isset;
}

- (void) unsetManufacture {
  [__manufacture release_stub];
  __manufacture = nil;
  __manufacture_isset = NO;
}

- (NSString *) deviceModel {
  return [[__deviceModel retain_stub] autorelease_stub];
}

- (void) setDeviceModel: (NSString *) deviceModel {
  [deviceModel retain_stub];
  [__deviceModel release_stub];
  __deviceModel = deviceModel;
  __deviceModel_isset = YES;
}

- (BOOL) deviceModelIsSet {
  return __deviceModel_isset;
}

- (void) unsetDeviceModel {
  [__deviceModel release_stub];
  __deviceModel = nil;
  __deviceModel_isset = NO;
}

- (NSString *) deviceName {
  return [[__deviceName retain_stub] autorelease_stub];
}

- (void) setDeviceName: (NSString *) deviceName {
  [deviceName retain_stub];
  [__deviceName release_stub];
  __deviceName = deviceName;
  __deviceName_isset = YES;
}

- (BOOL) deviceNameIsSet {
  return __deviceName_isset;
}

- (void) unsetDeviceName {
  [__deviceName release_stub];
  __deviceName = nil;
  __deviceName_isset = NO;
}

- (NSData *) publicKey {
  return [[__publicKey retain_stub] autorelease_stub];
}

- (void) setPublicKey: (NSData *) publicKey {
  [publicKey retain_stub];
  [__publicKey release_stub];
  __publicKey = publicKey;
  __publicKey_isset = YES;
}

- (BOOL) publicKeyIsSet {
  return __publicKey_isset;
}

- (void) unsetPublicKey {
  [__publicKey release_stub];
  __publicKey = nil;
  __publicKey_isset = NO;
}

- (NSData *) signature {
  return [[__signature retain_stub] autorelease_stub];
}

- (void) setSignature: (NSData *) signature {
  [signature retain_stub];
  [__signature release_stub];
  __signature = signature;
  __signature_isset = YES;
}

- (BOOL) signatureIsSet {
  return __signature_isset;
}

- (void) unsetSignature {
  [__signature release_stub];
  __signature = nil;
  __signature_isset = NO;
}

- (int) clientType {
  return __clientType;
}

- (void) setClientType: (int) clientType {
  __clientType = clientType;
  __clientType_isset = YES;
}

- (BOOL) clientTypeIsSet {
  return __clientType_isset;
}

- (void) unsetClientType {
  __clientType_isset = NO;
}

- (NSData *) digest {
  return [[__digest retain_stub] autorelease_stub];
}

- (void) setDigest: (NSData *) digest {
  [digest retain_stub];
  [__digest release_stub];
  __digest = digest;
  __digest_isset = YES;
}

- (BOOL) digestIsSet {
  return __digest_isset;
}

- (void) unsetDigest {
  [__digest release_stub];
  __digest = nil;
  __digest_isset = NO;
}

- (NSData *) risk {
  return [[__risk retain_stub] autorelease_stub];
}

- (void) setRisk: (NSData *) risk {
  [risk retain_stub];
  [__risk release_stub];
  __risk = risk;
  __risk_isset = YES;
}

- (BOOL) riskIsSet {
  return __risk_isset;
}

- (void) unsetRisk {
  [__risk release_stub];
  __risk = nil;
  __risk_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActivationCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUdid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setEncPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCpuArch: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOsVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManufacture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceModel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPublicKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDigest: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setRisk: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivationParam"];
  if (__activationCode_isset) {
    if (__activationCode != nil) {
      [outProtocol writeFieldBeginWithName: @"activationCode" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __activationCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__udid_isset) {
    if (__udid != nil) {
      [outProtocol writeFieldBeginWithName: @"udid" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __udid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__encPassword_isset) {
    if (__encPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __encPassword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cpuArch_isset) {
    [outProtocol writeFieldBeginWithName: @"cpuArch" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __cpuArch];
    [outProtocol writeFieldEnd];
  }
  if (__osVersion_isset) {
    if (__osVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"osVersion" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __osVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locale_isset) {
    if (__locale != nil) {
      [outProtocol writeFieldBeginWithName: @"locale" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __locale];
      [outProtocol writeFieldEnd];
    }
  }
  if (__manufacture_isset) {
    if (__manufacture != nil) {
      [outProtocol writeFieldBeginWithName: @"manufacture" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __manufacture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceModel_isset) {
    if (__deviceModel != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceModel" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __deviceModel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceName_isset) {
    if (__deviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceName" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __deviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__publicKey_isset) {
    if (__publicKey != nil) {
      [outProtocol writeFieldBeginWithName: @"publicKey" type: TType_STRING fieldID: 11];
      [outProtocol writeBinary: __publicKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signature_isset) {
    if (__signature != nil) {
      [outProtocol writeFieldBeginWithName: @"signature" type: TType_STRING fieldID: 12];
      [outProtocol writeBinary: __signature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientType_isset) {
    [outProtocol writeFieldBeginWithName: @"clientType" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __clientType];
    [outProtocol writeFieldEnd];
  }
  if (__digest_isset) {
    if (__digest != nil) {
      [outProtocol writeFieldBeginWithName: @"digest" type: TType_STRING fieldID: 14];
      [outProtocol writeBinary: __digest];
      [outProtocol writeFieldEnd];
    }
  }
  if (__risk_isset) {
    if (__risk != nil) {
      [outProtocol writeFieldBeginWithName: @"risk" type: TType_STRING fieldID: 15];
      [outProtocol writeBinary: __risk];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivationParam("];
  [ms appendString: @"activationCode:"];
  [ms appendFormat: @"\"%@\"", __activationCode];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",udid:"];
  [ms appendFormat: @"\"%@\"", __udid];
  [ms appendString: @",encPassword:"];
  [ms appendFormat: @"\"%@\"", __encPassword];
  [ms appendString: @",cpuArch:"];
  [ms appendFormat: @"%i", __cpuArch];
  [ms appendString: @",osVersion:"];
  [ms appendFormat: @"\"%@\"", __osVersion];
  [ms appendString: @",locale:"];
  [ms appendFormat: @"\"%@\"", __locale];
  [ms appendString: @",manufacture:"];
  [ms appendFormat: @"\"%@\"", __manufacture];
  [ms appendString: @",deviceModel:"];
  [ms appendFormat: @"\"%@\"", __deviceModel];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", __deviceName];
  [ms appendString: @",publicKey:"];
  [ms appendFormat: @"\"%@\"", __publicKey];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", __signature];
  [ms appendString: @",clientType:"];
  [ms appendFormat: @"%i", __clientType];
  [ms appendString: @",digest:"];
  [ms appendFormat: @"\"%@\"", __digest];
  [ms appendString: @",risk:"];
  [ms appendFormat: @"\"%@\"", __risk];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivationResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUpdateAvailable: (BOOL) updateAvailable deviceId: (int32_t) deviceId signedCertificate: (NSData *) signedCertificate deviceKey: (NSData *) deviceKey offlineKey: (NSData *) offlineKey deviceName: (NSString *) deviceName
{
  self = [super init];
  __updateAvailable = updateAvailable;
  __updateAvailable_isset = YES;
  __deviceId = deviceId;
  __deviceId_isset = YES;
  __signedCertificate = [signedCertificate retain_stub];
  __signedCertificate_isset = YES;
  __deviceKey = [deviceKey retain_stub];
  __deviceKey_isset = YES;
  __offlineKey = [offlineKey retain_stub];
  __offlineKey_isset = YES;
  __deviceName = [deviceName retain_stub];
  __deviceName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"updateAvailable"])
  {
    __updateAvailable = [decoder decodeBoolForKey: @"updateAvailable"];
    __updateAvailable_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [decoder decodeInt32ForKey: @"deviceId"];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"signedCertificate"])
  {
    __signedCertificate = [[decoder decodeObjectForKey: @"signedCertificate"] retain_stub];
    __signedCertificate_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceKey"])
  {
    __deviceKey = [[decoder decodeObjectForKey: @"deviceKey"] retain_stub];
    __deviceKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"offlineKey"])
  {
    __offlineKey = [[decoder decodeObjectForKey: @"offlineKey"] retain_stub];
    __offlineKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceName"])
  {
    __deviceName = [[decoder decodeObjectForKey: @"deviceName"] retain_stub];
    __deviceName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__updateAvailable_isset)
  {
    [encoder encodeBool: __updateAvailable forKey: @"updateAvailable"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeInt32: __deviceId forKey: @"deviceId"];
  }
  if (__signedCertificate_isset)
  {
    [encoder encodeObject: __signedCertificate forKey: @"signedCertificate"];
  }
  if (__deviceKey_isset)
  {
    [encoder encodeObject: __deviceKey forKey: @"deviceKey"];
  }
  if (__offlineKey_isset)
  {
    [encoder encodeObject: __offlineKey forKey: @"offlineKey"];
  }
  if (__deviceName_isset)
  {
    [encoder encodeObject: __deviceName forKey: @"deviceName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __updateAvailable_isset ? 2654435761 : 0;
  if (__updateAvailable_isset)
  {
    hash = (hash * 31) ^ [@(__updateAvailable) hash];
  }
  hash = (hash * 31) ^ __deviceId_isset ? 2654435761 : 0;
  if (__deviceId_isset)
  {
    hash = (hash * 31) ^ [@(__deviceId) hash];
  }
  hash = (hash * 31) ^ __signedCertificate_isset ? 2654435761 : 0;
  if (__signedCertificate_isset)
  {
    hash = (hash * 31) ^ [__signedCertificate hash];
  }
  hash = (hash * 31) ^ __deviceKey_isset ? 2654435761 : 0;
  if (__deviceKey_isset)
  {
    hash = (hash * 31) ^ [__deviceKey hash];
  }
  hash = (hash * 31) ^ __offlineKey_isset ? 2654435761 : 0;
  if (__offlineKey_isset)
  {
    hash = (hash * 31) ^ [__offlineKey hash];
  }
  hash = (hash * 31) ^ __deviceName_isset ? 2654435761 : 0;
  if (__deviceName_isset)
  {
    hash = (hash * 31) ^ [__deviceName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ActivationResponse class]]) {
    return NO;
  }
  ActivationResponse *other = (ActivationResponse *)anObject;
  if ((__updateAvailable_isset != other->__updateAvailable_isset) ||
      (__updateAvailable_isset && (__updateAvailable != other->__updateAvailable))) {
    return NO;
  }
  if ((__deviceId_isset != other->__deviceId_isset) ||
      (__deviceId_isset && (__deviceId != other->__deviceId))) {
    return NO;
  }
  if ((__signedCertificate_isset != other->__signedCertificate_isset) ||
      (__signedCertificate_isset && ((__signedCertificate || other->__signedCertificate) && ![__signedCertificate isEqual:other->__signedCertificate]))) {
    return NO;
  }
  if ((__deviceKey_isset != other->__deviceKey_isset) ||
      (__deviceKey_isset && ((__deviceKey || other->__deviceKey) && ![__deviceKey isEqual:other->__deviceKey]))) {
    return NO;
  }
  if ((__offlineKey_isset != other->__offlineKey_isset) ||
      (__offlineKey_isset && ((__offlineKey || other->__offlineKey) && ![__offlineKey isEqual:other->__offlineKey]))) {
    return NO;
  }
  if ((__deviceName_isset != other->__deviceName_isset) ||
      (__deviceName_isset && ((__deviceName || other->__deviceName) && ![__deviceName isEqual:other->__deviceName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__signedCertificate release_stub];
  [__deviceKey release_stub];
  [__offlineKey release_stub];
  [__deviceName release_stub];
  [super dealloc_stub];
}

- (BOOL) updateAvailable {
  return __updateAvailable;
}

- (void) setUpdateAvailable: (BOOL) updateAvailable {
  __updateAvailable = updateAvailable;
  __updateAvailable_isset = YES;
}

- (BOOL) updateAvailableIsSet {
  return __updateAvailable_isset;
}

- (void) unsetUpdateAvailable {
  __updateAvailable_isset = NO;
}

- (int32_t) deviceId {
  return __deviceId;
}

- (void) setDeviceId: (int32_t) deviceId {
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  __deviceId_isset = NO;
}

- (NSData *) signedCertificate {
  return [[__signedCertificate retain_stub] autorelease_stub];
}

- (void) setSignedCertificate: (NSData *) signedCertificate {
  [signedCertificate retain_stub];
  [__signedCertificate release_stub];
  __signedCertificate = signedCertificate;
  __signedCertificate_isset = YES;
}

- (BOOL) signedCertificateIsSet {
  return __signedCertificate_isset;
}

- (void) unsetSignedCertificate {
  [__signedCertificate release_stub];
  __signedCertificate = nil;
  __signedCertificate_isset = NO;
}

- (NSData *) deviceKey {
  return [[__deviceKey retain_stub] autorelease_stub];
}

- (void) setDeviceKey: (NSData *) deviceKey {
  [deviceKey retain_stub];
  [__deviceKey release_stub];
  __deviceKey = deviceKey;
  __deviceKey_isset = YES;
}

- (BOOL) deviceKeyIsSet {
  return __deviceKey_isset;
}

- (void) unsetDeviceKey {
  [__deviceKey release_stub];
  __deviceKey = nil;
  __deviceKey_isset = NO;
}

- (NSData *) offlineKey {
  return [[__offlineKey retain_stub] autorelease_stub];
}

- (void) setOfflineKey: (NSData *) offlineKey {
  [offlineKey retain_stub];
  [__offlineKey release_stub];
  __offlineKey = offlineKey;
  __offlineKey_isset = YES;
}

- (BOOL) offlineKeyIsSet {
  return __offlineKey_isset;
}

- (void) unsetOfflineKey {
  [__offlineKey release_stub];
  __offlineKey = nil;
  __offlineKey_isset = NO;
}

- (NSString *) deviceName {
  return [[__deviceName retain_stub] autorelease_stub];
}

- (void) setDeviceName: (NSString *) deviceName {
  [deviceName retain_stub];
  [__deviceName release_stub];
  __deviceName = deviceName;
  __deviceName_isset = YES;
}

- (BOOL) deviceNameIsSet {
  return __deviceName_isset;
}

- (void) unsetDeviceName {
  [__deviceName release_stub];
  __deviceName = nil;
  __deviceName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUpdateAvailable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSignedCertificate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDeviceKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setOfflineKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivationResponse"];
  if (__updateAvailable_isset) {
    [outProtocol writeFieldBeginWithName: @"updateAvailable" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __updateAvailable];
    [outProtocol writeFieldEnd];
  }
  if (__deviceId_isset) {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __deviceId];
    [outProtocol writeFieldEnd];
  }
  if (__signedCertificate_isset) {
    if (__signedCertificate != nil) {
      [outProtocol writeFieldBeginWithName: @"signedCertificate" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __signedCertificate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceKey_isset) {
    if (__deviceKey != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceKey" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __deviceKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offlineKey_isset) {
    if (__offlineKey != nil) {
      [outProtocol writeFieldBeginWithName: @"offlineKey" type: TType_STRING fieldID: 5];
      [outProtocol writeBinary: __offlineKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceName_isset) {
    if (__deviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __deviceName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivationResponse("];
  [ms appendString: @"updateAvailable:"];
  [ms appendFormat: @"%i", __updateAvailable];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"%i", __deviceId];
  [ms appendString: @",signedCertificate:"];
  [ms appendFormat: @"\"%@\"", __signedCertificate];
  [ms appendString: @",deviceKey:"];
  [ms appendFormat: @"\"%@\"", __deviceKey];
  [ms appendString: @",offlineKey:"];
  [ms appendFormat: @"\"%@\"", __offlineKey];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", __deviceName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceId: (int32_t) deviceId udid: (NSData *) udid encPassword: (NSData *) encPassword osVersion: (NSString *) osVersion locale: (NSString *) locale hotpCounter: (int32_t) hotpCounter digest: (NSData *) digest risk: (NSData *) risk passwordLess: (BOOL) passwordLess cpuArch: (int) cpuArch commClientType: (int) commClientType
{
  self = [super init];
  __deviceId = deviceId;
  __deviceId_isset = YES;
  __udid = [udid retain_stub];
  __udid_isset = YES;
  __encPassword = [encPassword retain_stub];
  __encPassword_isset = YES;
  __osVersion = [osVersion retain_stub];
  __osVersion_isset = YES;
  __locale = [locale retain_stub];
  __locale_isset = YES;
  __hotpCounter = hotpCounter;
  __hotpCounter_isset = YES;
  __digest = [digest retain_stub];
  __digest_isset = YES;
  __risk = [risk retain_stub];
  __risk_isset = YES;
  __passwordLess = passwordLess;
  __passwordLess_isset = YES;
  __cpuArch = cpuArch;
  __cpuArch_isset = YES;
  __commClientType = commClientType;
  __commClientType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [decoder decodeInt32ForKey: @"deviceId"];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"udid"])
  {
    __udid = [[decoder decodeObjectForKey: @"udid"] retain_stub];
    __udid_isset = YES;
  }
  if ([decoder containsValueForKey: @"encPassword"])
  {
    __encPassword = [[decoder decodeObjectForKey: @"encPassword"] retain_stub];
    __encPassword_isset = YES;
  }
  if ([decoder containsValueForKey: @"osVersion"])
  {
    __osVersion = [[decoder decodeObjectForKey: @"osVersion"] retain_stub];
    __osVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"locale"])
  {
    __locale = [[decoder decodeObjectForKey: @"locale"] retain_stub];
    __locale_isset = YES;
  }
  if ([decoder containsValueForKey: @"hotpCounter"])
  {
    __hotpCounter = [decoder decodeInt32ForKey: @"hotpCounter"];
    __hotpCounter_isset = YES;
  }
  if ([decoder containsValueForKey: @"digest"])
  {
    __digest = [[decoder decodeObjectForKey: @"digest"] retain_stub];
    __digest_isset = YES;
  }
  if ([decoder containsValueForKey: @"risk"])
  {
    __risk = [[decoder decodeObjectForKey: @"risk"] retain_stub];
    __risk_isset = YES;
  }
  if ([decoder containsValueForKey: @"passwordLess"])
  {
    __passwordLess = [decoder decodeBoolForKey: @"passwordLess"];
    __passwordLess_isset = YES;
  }
  if ([decoder containsValueForKey: @"cpuArch"])
  {
    __cpuArch = [decoder decodeIntForKey: @"cpuArch"];
    __cpuArch_isset = YES;
  }
  if ([decoder containsValueForKey: @"commClientType"])
  {
    __commClientType = [decoder decodeIntForKey: @"commClientType"];
    __commClientType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeInt32: __deviceId forKey: @"deviceId"];
  }
  if (__udid_isset)
  {
    [encoder encodeObject: __udid forKey: @"udid"];
  }
  if (__encPassword_isset)
  {
    [encoder encodeObject: __encPassword forKey: @"encPassword"];
  }
  if (__osVersion_isset)
  {
    [encoder encodeObject: __osVersion forKey: @"osVersion"];
  }
  if (__locale_isset)
  {
    [encoder encodeObject: __locale forKey: @"locale"];
  }
  if (__hotpCounter_isset)
  {
    [encoder encodeInt32: __hotpCounter forKey: @"hotpCounter"];
  }
  if (__digest_isset)
  {
    [encoder encodeObject: __digest forKey: @"digest"];
  }
  if (__risk_isset)
  {
    [encoder encodeObject: __risk forKey: @"risk"];
  }
  if (__passwordLess_isset)
  {
    [encoder encodeBool: __passwordLess forKey: @"passwordLess"];
  }
  if (__cpuArch_isset)
  {
    [encoder encodeInt: __cpuArch forKey: @"cpuArch"];
  }
  if (__commClientType_isset)
  {
    [encoder encodeInt: __commClientType forKey: @"commClientType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deviceId_isset ? 2654435761 : 0;
  if (__deviceId_isset)
  {
    hash = (hash * 31) ^ [@(__deviceId) hash];
  }
  hash = (hash * 31) ^ __udid_isset ? 2654435761 : 0;
  if (__udid_isset)
  {
    hash = (hash * 31) ^ [__udid hash];
  }
  hash = (hash * 31) ^ __encPassword_isset ? 2654435761 : 0;
  if (__encPassword_isset)
  {
    hash = (hash * 31) ^ [__encPassword hash];
  }
  hash = (hash * 31) ^ __osVersion_isset ? 2654435761 : 0;
  if (__osVersion_isset)
  {
    hash = (hash * 31) ^ [__osVersion hash];
  }
  hash = (hash * 31) ^ __locale_isset ? 2654435761 : 0;
  if (__locale_isset)
  {
    hash = (hash * 31) ^ [__locale hash];
  }
  hash = (hash * 31) ^ __hotpCounter_isset ? 2654435761 : 0;
  if (__hotpCounter_isset)
  {
    hash = (hash * 31) ^ [@(__hotpCounter) hash];
  }
  hash = (hash * 31) ^ __digest_isset ? 2654435761 : 0;
  if (__digest_isset)
  {
    hash = (hash * 31) ^ [__digest hash];
  }
  hash = (hash * 31) ^ __risk_isset ? 2654435761 : 0;
  if (__risk_isset)
  {
    hash = (hash * 31) ^ [__risk hash];
  }
  hash = (hash * 31) ^ __passwordLess_isset ? 2654435761 : 0;
  if (__passwordLess_isset)
  {
    hash = (hash * 31) ^ [@(__passwordLess) hash];
  }
  hash = (hash * 31) ^ __cpuArch_isset ? 2654435761 : 0;
  if (__cpuArch_isset)
  {
    hash = (hash * 31) ^ [@(__cpuArch) hash];
  }
  hash = (hash * 31) ^ __commClientType_isset ? 2654435761 : 0;
  if (__commClientType_isset)
  {
    hash = (hash * 31) ^ [@(__commClientType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[LoginParam class]]) {
    return NO;
  }
  LoginParam *other = (LoginParam *)anObject;
  if ((__deviceId_isset != other->__deviceId_isset) ||
      (__deviceId_isset && (__deviceId != other->__deviceId))) {
    return NO;
  }
  if ((__udid_isset != other->__udid_isset) ||
      (__udid_isset && ((__udid || other->__udid) && ![__udid isEqual:other->__udid]))) {
    return NO;
  }
  if ((__encPassword_isset != other->__encPassword_isset) ||
      (__encPassword_isset && ((__encPassword || other->__encPassword) && ![__encPassword isEqual:other->__encPassword]))) {
    return NO;
  }
  if ((__osVersion_isset != other->__osVersion_isset) ||
      (__osVersion_isset && ((__osVersion || other->__osVersion) && ![__osVersion isEqual:other->__osVersion]))) {
    return NO;
  }
  if ((__locale_isset != other->__locale_isset) ||
      (__locale_isset && ((__locale || other->__locale) && ![__locale isEqual:other->__locale]))) {
    return NO;
  }
  if ((__hotpCounter_isset != other->__hotpCounter_isset) ||
      (__hotpCounter_isset && (__hotpCounter != other->__hotpCounter))) {
    return NO;
  }
  if ((__digest_isset != other->__digest_isset) ||
      (__digest_isset && ((__digest || other->__digest) && ![__digest isEqual:other->__digest]))) {
    return NO;
  }
  if ((__risk_isset != other->__risk_isset) ||
      (__risk_isset && ((__risk || other->__risk) && ![__risk isEqual:other->__risk]))) {
    return NO;
  }
  if ((__passwordLess_isset != other->__passwordLess_isset) ||
      (__passwordLess_isset && (__passwordLess != other->__passwordLess))) {
    return NO;
  }
  if ((__cpuArch_isset != other->__cpuArch_isset) ||
      (__cpuArch_isset && (__cpuArch != other->__cpuArch))) {
    return NO;
  }
  if ((__commClientType_isset != other->__commClientType_isset) ||
      (__commClientType_isset && (__commClientType != other->__commClientType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__udid release_stub];
  [__encPassword release_stub];
  [__osVersion release_stub];
  [__locale release_stub];
  [__digest release_stub];
  [__risk release_stub];
  [super dealloc_stub];
}

- (int32_t) deviceId {
  return __deviceId;
}

- (void) setDeviceId: (int32_t) deviceId {
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  __deviceId_isset = NO;
}

- (NSData *) udid {
  return [[__udid retain_stub] autorelease_stub];
}

- (void) setUdid: (NSData *) udid {
  [udid retain_stub];
  [__udid release_stub];
  __udid = udid;
  __udid_isset = YES;
}

- (BOOL) udidIsSet {
  return __udid_isset;
}

- (void) unsetUdid {
  [__udid release_stub];
  __udid = nil;
  __udid_isset = NO;
}

- (NSData *) encPassword {
  return [[__encPassword retain_stub] autorelease_stub];
}

- (void) setEncPassword: (NSData *) encPassword {
  [encPassword retain_stub];
  [__encPassword release_stub];
  __encPassword = encPassword;
  __encPassword_isset = YES;
}

- (BOOL) encPasswordIsSet {
  return __encPassword_isset;
}

- (void) unsetEncPassword {
  [__encPassword release_stub];
  __encPassword = nil;
  __encPassword_isset = NO;
}

- (NSString *) osVersion {
  return [[__osVersion retain_stub] autorelease_stub];
}

- (void) setOsVersion: (NSString *) osVersion {
  [osVersion retain_stub];
  [__osVersion release_stub];
  __osVersion = osVersion;
  __osVersion_isset = YES;
}

- (BOOL) osVersionIsSet {
  return __osVersion_isset;
}

- (void) unsetOsVersion {
  [__osVersion release_stub];
  __osVersion = nil;
  __osVersion_isset = NO;
}

- (NSString *) locale {
  return [[__locale retain_stub] autorelease_stub];
}

- (void) setLocale: (NSString *) locale {
  [locale retain_stub];
  [__locale release_stub];
  __locale = locale;
  __locale_isset = YES;
}

- (BOOL) localeIsSet {
  return __locale_isset;
}

- (void) unsetLocale {
  [__locale release_stub];
  __locale = nil;
  __locale_isset = NO;
}

- (int32_t) hotpCounter {
  return __hotpCounter;
}

- (void) setHotpCounter: (int32_t) hotpCounter {
  __hotpCounter = hotpCounter;
  __hotpCounter_isset = YES;
}

- (BOOL) hotpCounterIsSet {
  return __hotpCounter_isset;
}

- (void) unsetHotpCounter {
  __hotpCounter_isset = NO;
}

- (NSData *) digest {
  return [[__digest retain_stub] autorelease_stub];
}

- (void) setDigest: (NSData *) digest {
  [digest retain_stub];
  [__digest release_stub];
  __digest = digest;
  __digest_isset = YES;
}

- (BOOL) digestIsSet {
  return __digest_isset;
}

- (void) unsetDigest {
  [__digest release_stub];
  __digest = nil;
  __digest_isset = NO;
}

- (NSData *) risk {
  return [[__risk retain_stub] autorelease_stub];
}

- (void) setRisk: (NSData *) risk {
  [risk retain_stub];
  [__risk release_stub];
  __risk = risk;
  __risk_isset = YES;
}

- (BOOL) riskIsSet {
  return __risk_isset;
}

- (void) unsetRisk {
  [__risk release_stub];
  __risk = nil;
  __risk_isset = NO;
}

- (BOOL) passwordLess {
  return __passwordLess;
}

- (void) setPasswordLess: (BOOL) passwordLess {
  __passwordLess = passwordLess;
  __passwordLess_isset = YES;
}

- (BOOL) passwordLessIsSet {
  return __passwordLess_isset;
}

- (void) unsetPasswordLess {
  __passwordLess_isset = NO;
}

- (int) cpuArch {
  return __cpuArch;
}

- (void) setCpuArch: (int) cpuArch {
  __cpuArch = cpuArch;
  __cpuArch_isset = YES;
}

- (BOOL) cpuArchIsSet {
  return __cpuArch_isset;
}

- (void) unsetCpuArch {
  __cpuArch_isset = NO;
}

- (int) commClientType {
  return __commClientType;
}

- (void) setCommClientType: (int) commClientType {
  __commClientType = commClientType;
  __commClientType_isset = YES;
}

- (BOOL) commClientTypeIsSet {
  return __commClientType_isset;
}

- (void) unsetCommClientType {
  __commClientType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUdid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setEncPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOsVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHotpCounter: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDigest: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setRisk: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPasswordLess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCpuArch: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCommClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginParam"];
  if (__deviceId_isset) {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __deviceId];
    [outProtocol writeFieldEnd];
  }
  if (__udid_isset) {
    if (__udid != nil) {
      [outProtocol writeFieldBeginWithName: @"udid" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __udid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__encPassword_isset) {
    if (__encPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __encPassword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__osVersion_isset) {
    if (__osVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"osVersion" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __osVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locale_isset) {
    if (__locale != nil) {
      [outProtocol writeFieldBeginWithName: @"locale" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __locale];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hotpCounter_isset) {
    [outProtocol writeFieldBeginWithName: @"hotpCounter" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __hotpCounter];
    [outProtocol writeFieldEnd];
  }
  if (__digest_isset) {
    if (__digest != nil) {
      [outProtocol writeFieldBeginWithName: @"digest" type: TType_STRING fieldID: 7];
      [outProtocol writeBinary: __digest];
      [outProtocol writeFieldEnd];
    }
  }
  if (__risk_isset) {
    if (__risk != nil) {
      [outProtocol writeFieldBeginWithName: @"risk" type: TType_STRING fieldID: 8];
      [outProtocol writeBinary: __risk];
      [outProtocol writeFieldEnd];
    }
  }
  if (__passwordLess_isset) {
    [outProtocol writeFieldBeginWithName: @"passwordLess" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __passwordLess];
    [outProtocol writeFieldEnd];
  }
  if (__cpuArch_isset) {
    [outProtocol writeFieldBeginWithName: @"cpuArch" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __cpuArch];
    [outProtocol writeFieldEnd];
  }
  if (__commClientType_isset) {
    [outProtocol writeFieldBeginWithName: @"commClientType" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __commClientType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginParam("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"%i", __deviceId];
  [ms appendString: @",udid:"];
  [ms appendFormat: @"\"%@\"", __udid];
  [ms appendString: @",encPassword:"];
  [ms appendFormat: @"\"%@\"", __encPassword];
  [ms appendString: @",osVersion:"];
  [ms appendFormat: @"\"%@\"", __osVersion];
  [ms appendString: @",locale:"];
  [ms appendFormat: @"\"%@\"", __locale];
  [ms appendString: @",hotpCounter:"];
  [ms appendFormat: @"%i", __hotpCounter];
  [ms appendString: @",digest:"];
  [ms appendFormat: @"\"%@\"", __digest];
  [ms appendString: @",risk:"];
  [ms appendFormat: @"\"%@\"", __risk];
  [ms appendString: @",passwordLess:"];
  [ms appendFormat: @"%i", __passwordLess];
  [ms appendString: @",cpuArch:"];
  [ms appendFormat: @"%i", __cpuArch];
  [ms appendString: @",commClientType:"];
  [ms appendFormat: @"%i", __commClientType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceKey: (NSData *) deviceKey oneTimePassword: (NSString *) oneTimePassword updateAvailableTill: (int64_t) updateAvailableTill passcodeValidFor: (int32_t) passcodeValidFor updateInfo: (NSString *) updateInfo licenceExpiresOn: (int64_t) licenceExpiresOn testLicence: (BOOL) testLicence ldapUser: (BOOL) ldapUser keepAliveSeconds: (int32_t) keepAliveSeconds
{
  self = [super init];
  __deviceKey = [deviceKey retain_stub];
  __deviceKey_isset = YES;
  __oneTimePassword = [oneTimePassword retain_stub];
  __oneTimePassword_isset = YES;
  __updateAvailableTill = updateAvailableTill;
  __updateAvailableTill_isset = YES;
  __passcodeValidFor = passcodeValidFor;
  __passcodeValidFor_isset = YES;
  __updateInfo = [updateInfo retain_stub];
  __updateInfo_isset = YES;
  __licenceExpiresOn = licenceExpiresOn;
  __licenceExpiresOn_isset = YES;
  __testLicence = testLicence;
  __testLicence_isset = YES;
  __ldapUser = ldapUser;
  __ldapUser_isset = YES;
  __keepAliveSeconds = keepAliveSeconds;
  __keepAliveSeconds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceKey"])
  {
    __deviceKey = [[decoder decodeObjectForKey: @"deviceKey"] retain_stub];
    __deviceKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"oneTimePassword"])
  {
    __oneTimePassword = [[decoder decodeObjectForKey: @"oneTimePassword"] retain_stub];
    __oneTimePassword_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateAvailableTill"])
  {
    __updateAvailableTill = [decoder decodeInt64ForKey: @"updateAvailableTill"];
    __updateAvailableTill_isset = YES;
  }
  if ([decoder containsValueForKey: @"passcodeValidFor"])
  {
    __passcodeValidFor = [decoder decodeInt32ForKey: @"passcodeValidFor"];
    __passcodeValidFor_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateInfo"])
  {
    __updateInfo = [[decoder decodeObjectForKey: @"updateInfo"] retain_stub];
    __updateInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"licenceExpiresOn"])
  {
    __licenceExpiresOn = [decoder decodeInt64ForKey: @"licenceExpiresOn"];
    __licenceExpiresOn_isset = YES;
  }
  if ([decoder containsValueForKey: @"testLicence"])
  {
    __testLicence = [decoder decodeBoolForKey: @"testLicence"];
    __testLicence_isset = YES;
  }
  if ([decoder containsValueForKey: @"ldapUser"])
  {
    __ldapUser = [decoder decodeBoolForKey: @"ldapUser"];
    __ldapUser_isset = YES;
  }
  if ([decoder containsValueForKey: @"keepAliveSeconds"])
  {
    __keepAliveSeconds = [decoder decodeInt32ForKey: @"keepAliveSeconds"];
    __keepAliveSeconds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceKey_isset)
  {
    [encoder encodeObject: __deviceKey forKey: @"deviceKey"];
  }
  if (__oneTimePassword_isset)
  {
    [encoder encodeObject: __oneTimePassword forKey: @"oneTimePassword"];
  }
  if (__updateAvailableTill_isset)
  {
    [encoder encodeInt64: __updateAvailableTill forKey: @"updateAvailableTill"];
  }
  if (__passcodeValidFor_isset)
  {
    [encoder encodeInt32: __passcodeValidFor forKey: @"passcodeValidFor"];
  }
  if (__updateInfo_isset)
  {
    [encoder encodeObject: __updateInfo forKey: @"updateInfo"];
  }
  if (__licenceExpiresOn_isset)
  {
    [encoder encodeInt64: __licenceExpiresOn forKey: @"licenceExpiresOn"];
  }
  if (__testLicence_isset)
  {
    [encoder encodeBool: __testLicence forKey: @"testLicence"];
  }
  if (__ldapUser_isset)
  {
    [encoder encodeBool: __ldapUser forKey: @"ldapUser"];
  }
  if (__keepAliveSeconds_isset)
  {
    [encoder encodeInt32: __keepAliveSeconds forKey: @"keepAliveSeconds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deviceKey_isset ? 2654435761 : 0;
  if (__deviceKey_isset)
  {
    hash = (hash * 31) ^ [__deviceKey hash];
  }
  hash = (hash * 31) ^ __oneTimePassword_isset ? 2654435761 : 0;
  if (__oneTimePassword_isset)
  {
    hash = (hash * 31) ^ [__oneTimePassword hash];
  }
  hash = (hash * 31) ^ __updateAvailableTill_isset ? 2654435761 : 0;
  if (__updateAvailableTill_isset)
  {
    hash = (hash * 31) ^ [@(__updateAvailableTill) hash];
  }
  hash = (hash * 31) ^ __passcodeValidFor_isset ? 2654435761 : 0;
  if (__passcodeValidFor_isset)
  {
    hash = (hash * 31) ^ [@(__passcodeValidFor) hash];
  }
  hash = (hash * 31) ^ __updateInfo_isset ? 2654435761 : 0;
  if (__updateInfo_isset)
  {
    hash = (hash * 31) ^ [__updateInfo hash];
  }
  hash = (hash * 31) ^ __licenceExpiresOn_isset ? 2654435761 : 0;
  if (__licenceExpiresOn_isset)
  {
    hash = (hash * 31) ^ [@(__licenceExpiresOn) hash];
  }
  hash = (hash * 31) ^ __testLicence_isset ? 2654435761 : 0;
  if (__testLicence_isset)
  {
    hash = (hash * 31) ^ [@(__testLicence) hash];
  }
  hash = (hash * 31) ^ __ldapUser_isset ? 2654435761 : 0;
  if (__ldapUser_isset)
  {
    hash = (hash * 31) ^ [@(__ldapUser) hash];
  }
  hash = (hash * 31) ^ __keepAliveSeconds_isset ? 2654435761 : 0;
  if (__keepAliveSeconds_isset)
  {
    hash = (hash * 31) ^ [@(__keepAliveSeconds) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[LoginResponse class]]) {
    return NO;
  }
  LoginResponse *other = (LoginResponse *)anObject;
  if ((__deviceKey_isset != other->__deviceKey_isset) ||
      (__deviceKey_isset && ((__deviceKey || other->__deviceKey) && ![__deviceKey isEqual:other->__deviceKey]))) {
    return NO;
  }
  if ((__oneTimePassword_isset != other->__oneTimePassword_isset) ||
      (__oneTimePassword_isset && ((__oneTimePassword || other->__oneTimePassword) && ![__oneTimePassword isEqual:other->__oneTimePassword]))) {
    return NO;
  }
  if ((__updateAvailableTill_isset != other->__updateAvailableTill_isset) ||
      (__updateAvailableTill_isset && (__updateAvailableTill != other->__updateAvailableTill))) {
    return NO;
  }
  if ((__passcodeValidFor_isset != other->__passcodeValidFor_isset) ||
      (__passcodeValidFor_isset && (__passcodeValidFor != other->__passcodeValidFor))) {
    return NO;
  }
  if ((__updateInfo_isset != other->__updateInfo_isset) ||
      (__updateInfo_isset && ((__updateInfo || other->__updateInfo) && ![__updateInfo isEqual:other->__updateInfo]))) {
    return NO;
  }
  if ((__licenceExpiresOn_isset != other->__licenceExpiresOn_isset) ||
      (__licenceExpiresOn_isset && (__licenceExpiresOn != other->__licenceExpiresOn))) {
    return NO;
  }
  if ((__testLicence_isset != other->__testLicence_isset) ||
      (__testLicence_isset && (__testLicence != other->__testLicence))) {
    return NO;
  }
  if ((__ldapUser_isset != other->__ldapUser_isset) ||
      (__ldapUser_isset && (__ldapUser != other->__ldapUser))) {
    return NO;
  }
  if ((__keepAliveSeconds_isset != other->__keepAliveSeconds_isset) ||
      (__keepAliveSeconds_isset && (__keepAliveSeconds != other->__keepAliveSeconds))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__deviceKey release_stub];
  [__oneTimePassword release_stub];
  [__updateInfo release_stub];
  [super dealloc_stub];
}

- (NSData *) deviceKey {
  return [[__deviceKey retain_stub] autorelease_stub];
}

- (void) setDeviceKey: (NSData *) deviceKey {
  [deviceKey retain_stub];
  [__deviceKey release_stub];
  __deviceKey = deviceKey;
  __deviceKey_isset = YES;
}

- (BOOL) deviceKeyIsSet {
  return __deviceKey_isset;
}

- (void) unsetDeviceKey {
  [__deviceKey release_stub];
  __deviceKey = nil;
  __deviceKey_isset = NO;
}

- (NSString *) oneTimePassword {
  return [[__oneTimePassword retain_stub] autorelease_stub];
}

- (void) setOneTimePassword: (NSString *) oneTimePassword {
  [oneTimePassword retain_stub];
  [__oneTimePassword release_stub];
  __oneTimePassword = oneTimePassword;
  __oneTimePassword_isset = YES;
}

- (BOOL) oneTimePasswordIsSet {
  return __oneTimePassword_isset;
}

- (void) unsetOneTimePassword {
  [__oneTimePassword release_stub];
  __oneTimePassword = nil;
  __oneTimePassword_isset = NO;
}

- (int64_t) updateAvailableTill {
  return __updateAvailableTill;
}

- (void) setUpdateAvailableTill: (int64_t) updateAvailableTill {
  __updateAvailableTill = updateAvailableTill;
  __updateAvailableTill_isset = YES;
}

- (BOOL) updateAvailableTillIsSet {
  return __updateAvailableTill_isset;
}

- (void) unsetUpdateAvailableTill {
  __updateAvailableTill_isset = NO;
}

- (int32_t) passcodeValidFor {
  return __passcodeValidFor;
}

- (void) setPasscodeValidFor: (int32_t) passcodeValidFor {
  __passcodeValidFor = passcodeValidFor;
  __passcodeValidFor_isset = YES;
}

- (BOOL) passcodeValidForIsSet {
  return __passcodeValidFor_isset;
}

- (void) unsetPasscodeValidFor {
  __passcodeValidFor_isset = NO;
}

- (NSString *) updateInfo {
  return [[__updateInfo retain_stub] autorelease_stub];
}

- (void) setUpdateInfo: (NSString *) updateInfo {
  [updateInfo retain_stub];
  [__updateInfo release_stub];
  __updateInfo = updateInfo;
  __updateInfo_isset = YES;
}

- (BOOL) updateInfoIsSet {
  return __updateInfo_isset;
}

- (void) unsetUpdateInfo {
  [__updateInfo release_stub];
  __updateInfo = nil;
  __updateInfo_isset = NO;
}

- (int64_t) licenceExpiresOn {
  return __licenceExpiresOn;
}

- (void) setLicenceExpiresOn: (int64_t) licenceExpiresOn {
  __licenceExpiresOn = licenceExpiresOn;
  __licenceExpiresOn_isset = YES;
}

- (BOOL) licenceExpiresOnIsSet {
  return __licenceExpiresOn_isset;
}

- (void) unsetLicenceExpiresOn {
  __licenceExpiresOn_isset = NO;
}

- (BOOL) testLicence {
  return __testLicence;
}

- (void) setTestLicence: (BOOL) testLicence {
  __testLicence = testLicence;
  __testLicence_isset = YES;
}

- (BOOL) testLicenceIsSet {
  return __testLicence_isset;
}

- (void) unsetTestLicence {
  __testLicence_isset = NO;
}

- (BOOL) ldapUser {
  return __ldapUser;
}

- (void) setLdapUser: (BOOL) ldapUser {
  __ldapUser = ldapUser;
  __ldapUser_isset = YES;
}

- (BOOL) ldapUserIsSet {
  return __ldapUser_isset;
}

- (void) unsetLdapUser {
  __ldapUser_isset = NO;
}

- (int32_t) keepAliveSeconds {
  return __keepAliveSeconds;
}

- (void) setKeepAliveSeconds: (int32_t) keepAliveSeconds {
  __keepAliveSeconds = keepAliveSeconds;
  __keepAliveSeconds_isset = YES;
}

- (BOOL) keepAliveSecondsIsSet {
  return __keepAliveSeconds_isset;
}

- (void) unsetKeepAliveSeconds {
  __keepAliveSeconds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDeviceKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOneTimePassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdateAvailableTill: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPasscodeValidFor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUpdateInfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLicenceExpiresOn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setTestLicence: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setLdapUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setKeepAliveSeconds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginResponse"];
  if (__deviceKey_isset) {
    if (__deviceKey != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceKey" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __deviceKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oneTimePassword_isset) {
    if (__oneTimePassword != nil) {
      [outProtocol writeFieldBeginWithName: @"oneTimePassword" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oneTimePassword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateAvailableTill_isset) {
    [outProtocol writeFieldBeginWithName: @"updateAvailableTill" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __updateAvailableTill];
    [outProtocol writeFieldEnd];
  }
  if (__passcodeValidFor_isset) {
    [outProtocol writeFieldBeginWithName: @"passcodeValidFor" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __passcodeValidFor];
    [outProtocol writeFieldEnd];
  }
  if (__updateInfo_isset) {
    if (__updateInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"updateInfo" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __updateInfo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__licenceExpiresOn_isset) {
    [outProtocol writeFieldBeginWithName: @"licenceExpiresOn" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __licenceExpiresOn];
    [outProtocol writeFieldEnd];
  }
  if (__testLicence_isset) {
    [outProtocol writeFieldBeginWithName: @"testLicence" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __testLicence];
    [outProtocol writeFieldEnd];
  }
  if (__ldapUser_isset) {
    [outProtocol writeFieldBeginWithName: @"ldapUser" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __ldapUser];
    [outProtocol writeFieldEnd];
  }
  if (__keepAliveSeconds_isset) {
    [outProtocol writeFieldBeginWithName: @"keepAliveSeconds" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __keepAliveSeconds];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginResponse("];
  [ms appendString: @"deviceKey:"];
  [ms appendFormat: @"\"%@\"", __deviceKey];
  [ms appendString: @",oneTimePassword:"];
  [ms appendFormat: @"\"%@\"", __oneTimePassword];
  [ms appendString: @",updateAvailableTill:"];
  [ms appendFormat: @"%qi", __updateAvailableTill];
  [ms appendString: @",passcodeValidFor:"];
  [ms appendFormat: @"%i", __passcodeValidFor];
  [ms appendString: @",updateInfo:"];
  [ms appendFormat: @"\"%@\"", __updateInfo];
  [ms appendString: @",licenceExpiresOn:"];
  [ms appendFormat: @"%qi", __licenceExpiresOn];
  [ms appendString: @",testLicence:"];
  [ms appendFormat: @"%i", __testLicence];
  [ms appendString: @",ldapUser:"];
  [ms appendFormat: @"%i", __ldapUser];
  [ms appendString: @",keepAliveSeconds:"];
  [ms appendFormat: @"%i", __keepAliveSeconds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RequestActivationCodeResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithActivationCode: (NSString *) activationCode validTill: (int64_t) validTill
{
  self = [super init];
  __activationCode = [activationCode retain_stub];
  __activationCode_isset = YES;
  __validTill = validTill;
  __validTill_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"activationCode"])
  {
    __activationCode = [[decoder decodeObjectForKey: @"activationCode"] retain_stub];
    __activationCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"validTill"])
  {
    __validTill = [decoder decodeInt64ForKey: @"validTill"];
    __validTill_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__activationCode_isset)
  {
    [encoder encodeObject: __activationCode forKey: @"activationCode"];
  }
  if (__validTill_isset)
  {
    [encoder encodeInt64: __validTill forKey: @"validTill"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __activationCode_isset ? 2654435761 : 0;
  if (__activationCode_isset)
  {
    hash = (hash * 31) ^ [__activationCode hash];
  }
  hash = (hash * 31) ^ __validTill_isset ? 2654435761 : 0;
  if (__validTill_isset)
  {
    hash = (hash * 31) ^ [@(__validTill) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RequestActivationCodeResponse class]]) {
    return NO;
  }
  RequestActivationCodeResponse *other = (RequestActivationCodeResponse *)anObject;
  if ((__activationCode_isset != other->__activationCode_isset) ||
      (__activationCode_isset && ((__activationCode || other->__activationCode) && ![__activationCode isEqual:other->__activationCode]))) {
    return NO;
  }
  if ((__validTill_isset != other->__validTill_isset) ||
      (__validTill_isset && (__validTill != other->__validTill))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__activationCode release_stub];
  [super dealloc_stub];
}

- (NSString *) activationCode {
  return [[__activationCode retain_stub] autorelease_stub];
}

- (void) setActivationCode: (NSString *) activationCode {
  [activationCode retain_stub];
  [__activationCode release_stub];
  __activationCode = activationCode;
  __activationCode_isset = YES;
}

- (BOOL) activationCodeIsSet {
  return __activationCode_isset;
}

- (void) unsetActivationCode {
  [__activationCode release_stub];
  __activationCode = nil;
  __activationCode_isset = NO;
}

- (int64_t) validTill {
  return __validTill;
}

- (void) setValidTill: (int64_t) validTill {
  __validTill = validTill;
  __validTill_isset = YES;
}

- (BOOL) validTillIsSet {
  return __validTill_isset;
}

- (void) unsetValidTill {
  __validTill_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActivationCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setValidTill: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestActivationCodeResponse"];
  if (__activationCode_isset) {
    if (__activationCode != nil) {
      [outProtocol writeFieldBeginWithName: @"activationCode" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __activationCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__validTill_isset) {
    [outProtocol writeFieldBeginWithName: @"validTill" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __validTill];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestActivationCodeResponse("];
  [ms appendString: @"activationCode:"];
  [ms appendFormat: @"\"%@\"", __activationCode];
  [ms appendString: @",validTill:"];
  [ms appendFormat: @"%qi", __validTill];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthUserParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthGatewayId: (NSString *) authGatewayId loginId: (NSString *) loginId authMethod: (int) authMethod encPassword: (NSData *) encPassword encPasscode: (NSData *) encPasscode sharedSecret: (NSData *) sharedSecret udid: (NSData *) udid workstationName: (NSString *) workstationName clientType: (int) clientType propertyMap: (NSMutableDictionary *) propertyMap
{
  self = [super init];
  __authGatewayId = [authGatewayId retain_stub];
  __authGatewayId_isset = YES;
  __loginId = [loginId retain_stub];
  __loginId_isset = YES;
  __authMethod = authMethod;
  __authMethod_isset = YES;
  __encPassword = [encPassword retain_stub];
  __encPassword_isset = YES;
  __encPasscode = [encPasscode retain_stub];
  __encPasscode_isset = YES;
  __sharedSecret = [sharedSecret retain_stub];
  __sharedSecret_isset = YES;
  __udid = [udid retain_stub];
  __udid_isset = YES;
  __workstationName = [workstationName retain_stub];
  __workstationName_isset = YES;
  __clientType = clientType;
  __clientType_isset = YES;
  __propertyMap = [propertyMap retain_stub];
  __propertyMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authGatewayId"])
  {
    __authGatewayId = [[decoder decodeObjectForKey: @"authGatewayId"] retain_stub];
    __authGatewayId_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginId"])
  {
    __loginId = [[decoder decodeObjectForKey: @"loginId"] retain_stub];
    __loginId_isset = YES;
  }
  if ([decoder containsValueForKey: @"authMethod"])
  {
    __authMethod = [decoder decodeIntForKey: @"authMethod"];
    __authMethod_isset = YES;
  }
  if ([decoder containsValueForKey: @"encPassword"])
  {
    __encPassword = [[decoder decodeObjectForKey: @"encPassword"] retain_stub];
    __encPassword_isset = YES;
  }
  if ([decoder containsValueForKey: @"encPasscode"])
  {
    __encPasscode = [[decoder decodeObjectForKey: @"encPasscode"] retain_stub];
    __encPasscode_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedSecret"])
  {
    __sharedSecret = [[decoder decodeObjectForKey: @"sharedSecret"] retain_stub];
    __sharedSecret_isset = YES;
  }
  if ([decoder containsValueForKey: @"udid"])
  {
    __udid = [[decoder decodeObjectForKey: @"udid"] retain_stub];
    __udid_isset = YES;
  }
  if ([decoder containsValueForKey: @"workstationName"])
  {
    __workstationName = [[decoder decodeObjectForKey: @"workstationName"] retain_stub];
    __workstationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientType"])
  {
    __clientType = [decoder decodeIntForKey: @"clientType"];
    __clientType_isset = YES;
  }
  if ([decoder containsValueForKey: @"propertyMap"])
  {
    __propertyMap = [[decoder decodeObjectForKey: @"propertyMap"] retain_stub];
    __propertyMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authGatewayId_isset)
  {
    [encoder encodeObject: __authGatewayId forKey: @"authGatewayId"];
  }
  if (__loginId_isset)
  {
    [encoder encodeObject: __loginId forKey: @"loginId"];
  }
  if (__authMethod_isset)
  {
    [encoder encodeInt: __authMethod forKey: @"authMethod"];
  }
  if (__encPassword_isset)
  {
    [encoder encodeObject: __encPassword forKey: @"encPassword"];
  }
  if (__encPasscode_isset)
  {
    [encoder encodeObject: __encPasscode forKey: @"encPasscode"];
  }
  if (__sharedSecret_isset)
  {
    [encoder encodeObject: __sharedSecret forKey: @"sharedSecret"];
  }
  if (__udid_isset)
  {
    [encoder encodeObject: __udid forKey: @"udid"];
  }
  if (__workstationName_isset)
  {
    [encoder encodeObject: __workstationName forKey: @"workstationName"];
  }
  if (__clientType_isset)
  {
    [encoder encodeInt: __clientType forKey: @"clientType"];
  }
  if (__propertyMap_isset)
  {
    [encoder encodeObject: __propertyMap forKey: @"propertyMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authGatewayId_isset ? 2654435761 : 0;
  if (__authGatewayId_isset)
  {
    hash = (hash * 31) ^ [__authGatewayId hash];
  }
  hash = (hash * 31) ^ __loginId_isset ? 2654435761 : 0;
  if (__loginId_isset)
  {
    hash = (hash * 31) ^ [__loginId hash];
  }
  hash = (hash * 31) ^ __authMethod_isset ? 2654435761 : 0;
  if (__authMethod_isset)
  {
    hash = (hash * 31) ^ [@(__authMethod) hash];
  }
  hash = (hash * 31) ^ __encPassword_isset ? 2654435761 : 0;
  if (__encPassword_isset)
  {
    hash = (hash * 31) ^ [__encPassword hash];
  }
  hash = (hash * 31) ^ __encPasscode_isset ? 2654435761 : 0;
  if (__encPasscode_isset)
  {
    hash = (hash * 31) ^ [__encPasscode hash];
  }
  hash = (hash * 31) ^ __sharedSecret_isset ? 2654435761 : 0;
  if (__sharedSecret_isset)
  {
    hash = (hash * 31) ^ [__sharedSecret hash];
  }
  hash = (hash * 31) ^ __udid_isset ? 2654435761 : 0;
  if (__udid_isset)
  {
    hash = (hash * 31) ^ [__udid hash];
  }
  hash = (hash * 31) ^ __workstationName_isset ? 2654435761 : 0;
  if (__workstationName_isset)
  {
    hash = (hash * 31) ^ [__workstationName hash];
  }
  hash = (hash * 31) ^ __clientType_isset ? 2654435761 : 0;
  if (__clientType_isset)
  {
    hash = (hash * 31) ^ [@(__clientType) hash];
  }
  hash = (hash * 31) ^ __propertyMap_isset ? 2654435761 : 0;
  if (__propertyMap_isset)
  {
    hash = (hash * 31) ^ [__propertyMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthUserParam class]]) {
    return NO;
  }
  AuthUserParam *other = (AuthUserParam *)anObject;
  if ((__authGatewayId_isset != other->__authGatewayId_isset) ||
      (__authGatewayId_isset && ((__authGatewayId || other->__authGatewayId) && ![__authGatewayId isEqual:other->__authGatewayId]))) {
    return NO;
  }
  if ((__loginId_isset != other->__loginId_isset) ||
      (__loginId_isset && ((__loginId || other->__loginId) && ![__loginId isEqual:other->__loginId]))) {
    return NO;
  }
  if ((__authMethod_isset != other->__authMethod_isset) ||
      (__authMethod_isset && (__authMethod != other->__authMethod))) {
    return NO;
  }
  if ((__encPassword_isset != other->__encPassword_isset) ||
      (__encPassword_isset && ((__encPassword || other->__encPassword) && ![__encPassword isEqual:other->__encPassword]))) {
    return NO;
  }
  if ((__encPasscode_isset != other->__encPasscode_isset) ||
      (__encPasscode_isset && ((__encPasscode || other->__encPasscode) && ![__encPasscode isEqual:other->__encPasscode]))) {
    return NO;
  }
  if ((__sharedSecret_isset != other->__sharedSecret_isset) ||
      (__sharedSecret_isset && ((__sharedSecret || other->__sharedSecret) && ![__sharedSecret isEqual:other->__sharedSecret]))) {
    return NO;
  }
  if ((__udid_isset != other->__udid_isset) ||
      (__udid_isset && ((__udid || other->__udid) && ![__udid isEqual:other->__udid]))) {
    return NO;
  }
  if ((__workstationName_isset != other->__workstationName_isset) ||
      (__workstationName_isset && ((__workstationName || other->__workstationName) && ![__workstationName isEqual:other->__workstationName]))) {
    return NO;
  }
  if ((__clientType_isset != other->__clientType_isset) ||
      (__clientType_isset && (__clientType != other->__clientType))) {
    return NO;
  }
  if ((__propertyMap_isset != other->__propertyMap_isset) ||
      (__propertyMap_isset && ((__propertyMap || other->__propertyMap) && ![__propertyMap isEqual:other->__propertyMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authGatewayId release_stub];
  [__loginId release_stub];
  [__encPassword release_stub];
  [__encPasscode release_stub];
  [__sharedSecret release_stub];
  [__udid release_stub];
  [__workstationName release_stub];
  [__propertyMap release_stub];
  [super dealloc_stub];
}

- (NSString *) authGatewayId {
  return [[__authGatewayId retain_stub] autorelease_stub];
}

- (void) setAuthGatewayId: (NSString *) authGatewayId {
  [authGatewayId retain_stub];
  [__authGatewayId release_stub];
  __authGatewayId = authGatewayId;
  __authGatewayId_isset = YES;
}

- (BOOL) authGatewayIdIsSet {
  return __authGatewayId_isset;
}

- (void) unsetAuthGatewayId {
  [__authGatewayId release_stub];
  __authGatewayId = nil;
  __authGatewayId_isset = NO;
}

- (NSString *) loginId {
  return [[__loginId retain_stub] autorelease_stub];
}

- (void) setLoginId: (NSString *) loginId {
  [loginId retain_stub];
  [__loginId release_stub];
  __loginId = loginId;
  __loginId_isset = YES;
}

- (BOOL) loginIdIsSet {
  return __loginId_isset;
}

- (void) unsetLoginId {
  [__loginId release_stub];
  __loginId = nil;
  __loginId_isset = NO;
}

- (int) authMethod {
  return __authMethod;
}

- (void) setAuthMethod: (int) authMethod {
  __authMethod = authMethod;
  __authMethod_isset = YES;
}

- (BOOL) authMethodIsSet {
  return __authMethod_isset;
}

- (void) unsetAuthMethod {
  __authMethod_isset = NO;
}

- (NSData *) encPassword {
  return [[__encPassword retain_stub] autorelease_stub];
}

- (void) setEncPassword: (NSData *) encPassword {
  [encPassword retain_stub];
  [__encPassword release_stub];
  __encPassword = encPassword;
  __encPassword_isset = YES;
}

- (BOOL) encPasswordIsSet {
  return __encPassword_isset;
}

- (void) unsetEncPassword {
  [__encPassword release_stub];
  __encPassword = nil;
  __encPassword_isset = NO;
}

- (NSData *) encPasscode {
  return [[__encPasscode retain_stub] autorelease_stub];
}

- (void) setEncPasscode: (NSData *) encPasscode {
  [encPasscode retain_stub];
  [__encPasscode release_stub];
  __encPasscode = encPasscode;
  __encPasscode_isset = YES;
}

- (BOOL) encPasscodeIsSet {
  return __encPasscode_isset;
}

- (void) unsetEncPasscode {
  [__encPasscode release_stub];
  __encPasscode = nil;
  __encPasscode_isset = NO;
}

- (NSData *) sharedSecret {
  return [[__sharedSecret retain_stub] autorelease_stub];
}

- (void) setSharedSecret: (NSData *) sharedSecret {
  [sharedSecret retain_stub];
  [__sharedSecret release_stub];
  __sharedSecret = sharedSecret;
  __sharedSecret_isset = YES;
}

- (BOOL) sharedSecretIsSet {
  return __sharedSecret_isset;
}

- (void) unsetSharedSecret {
  [__sharedSecret release_stub];
  __sharedSecret = nil;
  __sharedSecret_isset = NO;
}

- (NSData *) udid {
  return [[__udid retain_stub] autorelease_stub];
}

- (void) setUdid: (NSData *) udid {
  [udid retain_stub];
  [__udid release_stub];
  __udid = udid;
  __udid_isset = YES;
}

- (BOOL) udidIsSet {
  return __udid_isset;
}

- (void) unsetUdid {
  [__udid release_stub];
  __udid = nil;
  __udid_isset = NO;
}

- (NSString *) workstationName {
  return [[__workstationName retain_stub] autorelease_stub];
}

- (void) setWorkstationName: (NSString *) workstationName {
  [workstationName retain_stub];
  [__workstationName release_stub];
  __workstationName = workstationName;
  __workstationName_isset = YES;
}

- (BOOL) workstationNameIsSet {
  return __workstationName_isset;
}

- (void) unsetWorkstationName {
  [__workstationName release_stub];
  __workstationName = nil;
  __workstationName_isset = NO;
}

- (int) clientType {
  return __clientType;
}

- (void) setClientType: (int) clientType {
  __clientType = clientType;
  __clientType_isset = YES;
}

- (BOOL) clientTypeIsSet {
  return __clientType_isset;
}

- (void) unsetClientType {
  __clientType_isset = NO;
}

- (NSMutableDictionary *) propertyMap {
  return [[__propertyMap retain_stub] autorelease_stub];
}

- (void) setPropertyMap: (NSMutableDictionary *) propertyMap {
  [propertyMap retain_stub];
  [__propertyMap release_stub];
  __propertyMap = propertyMap;
  __propertyMap_isset = YES;
}

- (BOOL) propertyMapIsSet {
  return __propertyMap_isset;
}

- (void) unsetPropertyMap {
  [__propertyMap release_stub];
  __propertyMap = nil;
  __propertyMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthGatewayId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setAuthMethod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setEncPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setEncPasscode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSharedSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUdid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWorkstationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            NSString * _val3 = [inProtocol readString];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setPropertyMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthUserParam"];
  if (__authGatewayId_isset) {
    if (__authGatewayId != nil) {
      [outProtocol writeFieldBeginWithName: @"authGatewayId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authGatewayId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginId_isset) {
    if (__loginId != nil) {
      [outProtocol writeFieldBeginWithName: @"loginId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __loginId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authMethod_isset) {
    [outProtocol writeFieldBeginWithName: @"authMethod" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __authMethod];
    [outProtocol writeFieldEnd];
  }
  if (__encPassword_isset) {
    if (__encPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __encPassword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__encPasscode_isset) {
    if (__encPasscode != nil) {
      [outProtocol writeFieldBeginWithName: @"encPasscode" type: TType_STRING fieldID: 5];
      [outProtocol writeBinary: __encPasscode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedSecret_isset) {
    if (__sharedSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedSecret" type: TType_STRING fieldID: 6];
      [outProtocol writeBinary: __sharedSecret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__udid_isset) {
    if (__udid != nil) {
      [outProtocol writeFieldBeginWithName: @"udid" type: TType_STRING fieldID: 7];
      [outProtocol writeBinary: __udid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__workstationName_isset) {
    if (__workstationName != nil) {
      [outProtocol writeFieldBeginWithName: @"workstationName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __workstationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientType_isset) {
    [outProtocol writeFieldBeginWithName: @"clientType" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __clientType];
    [outProtocol writeFieldEnd];
  }
  if (__propertyMap_isset) {
    if (__propertyMap != nil) {
      [outProtocol writeFieldBeginWithName: @"propertyMap" type: TType_MAP fieldID: 10];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__propertyMap count]];
        NSEnumerator * _iter4 = [__propertyMap keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeString: key5];
          [outProtocol writeString: [__propertyMap objectForKey: key5]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthUserParam("];
  [ms appendString: @"authGatewayId:"];
  [ms appendFormat: @"\"%@\"", __authGatewayId];
  [ms appendString: @",loginId:"];
  [ms appendFormat: @"\"%@\"", __loginId];
  [ms appendString: @",authMethod:"];
  [ms appendFormat: @"%i", __authMethod];
  [ms appendString: @",encPassword:"];
  [ms appendFormat: @"\"%@\"", __encPassword];
  [ms appendString: @",encPasscode:"];
  [ms appendFormat: @"\"%@\"", __encPasscode];
  [ms appendString: @",sharedSecret:"];
  [ms appendFormat: @"\"%@\"", __sharedSecret];
  [ms appendString: @",udid:"];
  [ms appendFormat: @"\"%@\"", __udid];
  [ms appendString: @",workstationName:"];
  [ms appendFormat: @"\"%@\"", __workstationName];
  [ms appendString: @",clientType:"];
  [ms appendFormat: @"%i", __clientType];
  [ms appendString: @",propertyMap:"];
  [ms appendFormat: @"%@", __propertyMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthUserResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success authMethods: (NSMutableArray *) authMethods responseTime: (int32_t) responseTime msgId: (int64_t) msgId userKey: (NSData *) userKey sessionCookie: (NSString *) sessionCookie sessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn secureMsgRandomCode: (NSString *) secureMsgRandomCode phoneNumber: (NSString *) phoneNumber fqUserLoginId: (NSString *) fqUserLoginId fidoResponse: (NSString *) fidoResponse ldapDomain: (NSString *) ldapDomain
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __authMethods = [authMethods retain_stub];
  __authMethods_isset = YES;
  __responseTime = responseTime;
  __responseTime_isset = YES;
  __msgId = msgId;
  __msgId_isset = YES;
  __userKey = [userKey retain_stub];
  __userKey_isset = YES;
  __sessionCookie = [sessionCookie retain_stub];
  __sessionCookie_isset = YES;
  __sessionCookieExpiresOn = sessionCookieExpiresOn;
  __sessionCookieExpiresOn_isset = YES;
  __secureMsgRandomCode = [secureMsgRandomCode retain_stub];
  __secureMsgRandomCode_isset = YES;
  __phoneNumber = [phoneNumber retain_stub];
  __phoneNumber_isset = YES;
  __fqUserLoginId = [fqUserLoginId retain_stub];
  __fqUserLoginId_isset = YES;
  __fidoResponse = [fidoResponse retain_stub];
  __fidoResponse_isset = YES;
  __ldapDomain = [ldapDomain retain_stub];
  __ldapDomain_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"authMethods"])
  {
    __authMethods = [[decoder decodeObjectForKey: @"authMethods"] retain_stub];
    __authMethods_isset = YES;
  }
  if ([decoder containsValueForKey: @"responseTime"])
  {
    __responseTime = [decoder decodeInt32ForKey: @"responseTime"];
    __responseTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgId"])
  {
    __msgId = [decoder decodeInt64ForKey: @"msgId"];
    __msgId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userKey"])
  {
    __userKey = [[decoder decodeObjectForKey: @"userKey"] retain_stub];
    __userKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionCookie"])
  {
    __sessionCookie = [[decoder decodeObjectForKey: @"sessionCookie"] retain_stub];
    __sessionCookie_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionCookieExpiresOn"])
  {
    __sessionCookieExpiresOn = [decoder decodeInt32ForKey: @"sessionCookieExpiresOn"];
    __sessionCookieExpiresOn_isset = YES;
  }
  if ([decoder containsValueForKey: @"secureMsgRandomCode"])
  {
    __secureMsgRandomCode = [[decoder decodeObjectForKey: @"secureMsgRandomCode"] retain_stub];
    __secureMsgRandomCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneNumber"])
  {
    __phoneNumber = [[decoder decodeObjectForKey: @"phoneNumber"] retain_stub];
    __phoneNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"fqUserLoginId"])
  {
    __fqUserLoginId = [[decoder decodeObjectForKey: @"fqUserLoginId"] retain_stub];
    __fqUserLoginId_isset = YES;
  }
  if ([decoder containsValueForKey: @"fidoResponse"])
  {
    __fidoResponse = [[decoder decodeObjectForKey: @"fidoResponse"] retain_stub];
    __fidoResponse_isset = YES;
  }
  if ([decoder containsValueForKey: @"ldapDomain"])
  {
    __ldapDomain = [[decoder decodeObjectForKey: @"ldapDomain"] retain_stub];
    __ldapDomain_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
  if (__authMethods_isset)
  {
    [encoder encodeObject: __authMethods forKey: @"authMethods"];
  }
  if (__responseTime_isset)
  {
    [encoder encodeInt32: __responseTime forKey: @"responseTime"];
  }
  if (__msgId_isset)
  {
    [encoder encodeInt64: __msgId forKey: @"msgId"];
  }
  if (__userKey_isset)
  {
    [encoder encodeObject: __userKey forKey: @"userKey"];
  }
  if (__sessionCookie_isset)
  {
    [encoder encodeObject: __sessionCookie forKey: @"sessionCookie"];
  }
  if (__sessionCookieExpiresOn_isset)
  {
    [encoder encodeInt32: __sessionCookieExpiresOn forKey: @"sessionCookieExpiresOn"];
  }
  if (__secureMsgRandomCode_isset)
  {
    [encoder encodeObject: __secureMsgRandomCode forKey: @"secureMsgRandomCode"];
  }
  if (__phoneNumber_isset)
  {
    [encoder encodeObject: __phoneNumber forKey: @"phoneNumber"];
  }
  if (__fqUserLoginId_isset)
  {
    [encoder encodeObject: __fqUserLoginId forKey: @"fqUserLoginId"];
  }
  if (__fidoResponse_isset)
  {
    [encoder encodeObject: __fidoResponse forKey: @"fidoResponse"];
  }
  if (__ldapDomain_isset)
  {
    [encoder encodeObject: __ldapDomain forKey: @"ldapDomain"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  hash = (hash * 31) ^ __authMethods_isset ? 2654435761 : 0;
  if (__authMethods_isset)
  {
    hash = (hash * 31) ^ [__authMethods hash];
  }
  hash = (hash * 31) ^ __responseTime_isset ? 2654435761 : 0;
  if (__responseTime_isset)
  {
    hash = (hash * 31) ^ [@(__responseTime) hash];
  }
  hash = (hash * 31) ^ __msgId_isset ? 2654435761 : 0;
  if (__msgId_isset)
  {
    hash = (hash * 31) ^ [@(__msgId) hash];
  }
  hash = (hash * 31) ^ __userKey_isset ? 2654435761 : 0;
  if (__userKey_isset)
  {
    hash = (hash * 31) ^ [__userKey hash];
  }
  hash = (hash * 31) ^ __sessionCookie_isset ? 2654435761 : 0;
  if (__sessionCookie_isset)
  {
    hash = (hash * 31) ^ [__sessionCookie hash];
  }
  hash = (hash * 31) ^ __sessionCookieExpiresOn_isset ? 2654435761 : 0;
  if (__sessionCookieExpiresOn_isset)
  {
    hash = (hash * 31) ^ [@(__sessionCookieExpiresOn) hash];
  }
  hash = (hash * 31) ^ __secureMsgRandomCode_isset ? 2654435761 : 0;
  if (__secureMsgRandomCode_isset)
  {
    hash = (hash * 31) ^ [__secureMsgRandomCode hash];
  }
  hash = (hash * 31) ^ __phoneNumber_isset ? 2654435761 : 0;
  if (__phoneNumber_isset)
  {
    hash = (hash * 31) ^ [__phoneNumber hash];
  }
  hash = (hash * 31) ^ __fqUserLoginId_isset ? 2654435761 : 0;
  if (__fqUserLoginId_isset)
  {
    hash = (hash * 31) ^ [__fqUserLoginId hash];
  }
  hash = (hash * 31) ^ __fidoResponse_isset ? 2654435761 : 0;
  if (__fidoResponse_isset)
  {
    hash = (hash * 31) ^ [__fidoResponse hash];
  }
  hash = (hash * 31) ^ __ldapDomain_isset ? 2654435761 : 0;
  if (__ldapDomain_isset)
  {
    hash = (hash * 31) ^ [__ldapDomain hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthUserResponse class]]) {
    return NO;
  }
  AuthUserResponse *other = (AuthUserResponse *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  if ((__authMethods_isset != other->__authMethods_isset) ||
      (__authMethods_isset && ((__authMethods || other->__authMethods) && ![__authMethods isEqual:other->__authMethods]))) {
    return NO;
  }
  if ((__responseTime_isset != other->__responseTime_isset) ||
      (__responseTime_isset && (__responseTime != other->__responseTime))) {
    return NO;
  }
  if ((__msgId_isset != other->__msgId_isset) ||
      (__msgId_isset && (__msgId != other->__msgId))) {
    return NO;
  }
  if ((__userKey_isset != other->__userKey_isset) ||
      (__userKey_isset && ((__userKey || other->__userKey) && ![__userKey isEqual:other->__userKey]))) {
    return NO;
  }
  if ((__sessionCookie_isset != other->__sessionCookie_isset) ||
      (__sessionCookie_isset && ((__sessionCookie || other->__sessionCookie) && ![__sessionCookie isEqual:other->__sessionCookie]))) {
    return NO;
  }
  if ((__sessionCookieExpiresOn_isset != other->__sessionCookieExpiresOn_isset) ||
      (__sessionCookieExpiresOn_isset && (__sessionCookieExpiresOn != other->__sessionCookieExpiresOn))) {
    return NO;
  }
  if ((__secureMsgRandomCode_isset != other->__secureMsgRandomCode_isset) ||
      (__secureMsgRandomCode_isset && ((__secureMsgRandomCode || other->__secureMsgRandomCode) && ![__secureMsgRandomCode isEqual:other->__secureMsgRandomCode]))) {
    return NO;
  }
  if ((__phoneNumber_isset != other->__phoneNumber_isset) ||
      (__phoneNumber_isset && ((__phoneNumber || other->__phoneNumber) && ![__phoneNumber isEqual:other->__phoneNumber]))) {
    return NO;
  }
  if ((__fqUserLoginId_isset != other->__fqUserLoginId_isset) ||
      (__fqUserLoginId_isset && ((__fqUserLoginId || other->__fqUserLoginId) && ![__fqUserLoginId isEqual:other->__fqUserLoginId]))) {
    return NO;
  }
  if ((__fidoResponse_isset != other->__fidoResponse_isset) ||
      (__fidoResponse_isset && ((__fidoResponse || other->__fidoResponse) && ![__fidoResponse isEqual:other->__fidoResponse]))) {
    return NO;
  }
  if ((__ldapDomain_isset != other->__ldapDomain_isset) ||
      (__ldapDomain_isset && ((__ldapDomain || other->__ldapDomain) && ![__ldapDomain isEqual:other->__ldapDomain]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authMethods release_stub];
  [__userKey release_stub];
  [__sessionCookie release_stub];
  [__secureMsgRandomCode release_stub];
  [__phoneNumber release_stub];
  [__fqUserLoginId release_stub];
  [__fidoResponse release_stub];
  [__ldapDomain release_stub];
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (NSMutableArray *) authMethods {
  return [[__authMethods retain_stub] autorelease_stub];
}

- (void) setAuthMethods: (NSMutableArray *) authMethods {
  [authMethods retain_stub];
  [__authMethods release_stub];
  __authMethods = authMethods;
  __authMethods_isset = YES;
}

- (BOOL) authMethodsIsSet {
  return __authMethods_isset;
}

- (void) unsetAuthMethods {
  [__authMethods release_stub];
  __authMethods = nil;
  __authMethods_isset = NO;
}

- (int32_t) responseTime {
  return __responseTime;
}

- (void) setResponseTime: (int32_t) responseTime {
  __responseTime = responseTime;
  __responseTime_isset = YES;
}

- (BOOL) responseTimeIsSet {
  return __responseTime_isset;
}

- (void) unsetResponseTime {
  __responseTime_isset = NO;
}

- (int64_t) msgId {
  return __msgId;
}

- (void) setMsgId: (int64_t) msgId {
  __msgId = msgId;
  __msgId_isset = YES;
}

- (BOOL) msgIdIsSet {
  return __msgId_isset;
}

- (void) unsetMsgId {
  __msgId_isset = NO;
}

- (NSData *) userKey {
  return [[__userKey retain_stub] autorelease_stub];
}

- (void) setUserKey: (NSData *) userKey {
  [userKey retain_stub];
  [__userKey release_stub];
  __userKey = userKey;
  __userKey_isset = YES;
}

- (BOOL) userKeyIsSet {
  return __userKey_isset;
}

- (void) unsetUserKey {
  [__userKey release_stub];
  __userKey = nil;
  __userKey_isset = NO;
}

- (NSString *) sessionCookie {
  return [[__sessionCookie retain_stub] autorelease_stub];
}

- (void) setSessionCookie: (NSString *) sessionCookie {
  [sessionCookie retain_stub];
  [__sessionCookie release_stub];
  __sessionCookie = sessionCookie;
  __sessionCookie_isset = YES;
}

- (BOOL) sessionCookieIsSet {
  return __sessionCookie_isset;
}

- (void) unsetSessionCookie {
  [__sessionCookie release_stub];
  __sessionCookie = nil;
  __sessionCookie_isset = NO;
}

- (int32_t) sessionCookieExpiresOn {
  return __sessionCookieExpiresOn;
}

- (void) setSessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn {
  __sessionCookieExpiresOn = sessionCookieExpiresOn;
  __sessionCookieExpiresOn_isset = YES;
}

- (BOOL) sessionCookieExpiresOnIsSet {
  return __sessionCookieExpiresOn_isset;
}

- (void) unsetSessionCookieExpiresOn {
  __sessionCookieExpiresOn_isset = NO;
}

- (NSString *) secureMsgRandomCode {
  return [[__secureMsgRandomCode retain_stub] autorelease_stub];
}

- (void) setSecureMsgRandomCode: (NSString *) secureMsgRandomCode {
  [secureMsgRandomCode retain_stub];
  [__secureMsgRandomCode release_stub];
  __secureMsgRandomCode = secureMsgRandomCode;
  __secureMsgRandomCode_isset = YES;
}

- (BOOL) secureMsgRandomCodeIsSet {
  return __secureMsgRandomCode_isset;
}

- (void) unsetSecureMsgRandomCode {
  [__secureMsgRandomCode release_stub];
  __secureMsgRandomCode = nil;
  __secureMsgRandomCode_isset = NO;
}

- (NSString *) phoneNumber {
  return [[__phoneNumber retain_stub] autorelease_stub];
}

- (void) setPhoneNumber: (NSString *) phoneNumber {
  [phoneNumber retain_stub];
  [__phoneNumber release_stub];
  __phoneNumber = phoneNumber;
  __phoneNumber_isset = YES;
}

- (BOOL) phoneNumberIsSet {
  return __phoneNumber_isset;
}

- (void) unsetPhoneNumber {
  [__phoneNumber release_stub];
  __phoneNumber = nil;
  __phoneNumber_isset = NO;
}

- (NSString *) fqUserLoginId {
  return [[__fqUserLoginId retain_stub] autorelease_stub];
}

- (void) setFqUserLoginId: (NSString *) fqUserLoginId {
  [fqUserLoginId retain_stub];
  [__fqUserLoginId release_stub];
  __fqUserLoginId = fqUserLoginId;
  __fqUserLoginId_isset = YES;
}

- (BOOL) fqUserLoginIdIsSet {
  return __fqUserLoginId_isset;
}

- (void) unsetFqUserLoginId {
  [__fqUserLoginId release_stub];
  __fqUserLoginId = nil;
  __fqUserLoginId_isset = NO;
}

- (NSString *) fidoResponse {
  return [[__fidoResponse retain_stub] autorelease_stub];
}

- (void) setFidoResponse: (NSString *) fidoResponse {
  [fidoResponse retain_stub];
  [__fidoResponse release_stub];
  __fidoResponse = fidoResponse;
  __fidoResponse_isset = YES;
}

- (BOOL) fidoResponseIsSet {
  return __fidoResponse_isset;
}

- (void) unsetFidoResponse {
  [__fidoResponse release_stub];
  __fidoResponse = nil;
  __fidoResponse_isset = NO;
}

- (NSString *) ldapDomain {
  return [[__ldapDomain retain_stub] autorelease_stub];
}

- (void) setLdapDomain: (NSString *) ldapDomain {
  [ldapDomain retain_stub];
  [__ldapDomain release_stub];
  __ldapDomain = ldapDomain;
  __ldapDomain_isset = YES;
}

- (BOOL) ldapDomainIsSet {
  return __ldapDomain_isset;
}

- (void) unsetLdapDomain {
  [__ldapDomain release_stub];
  __ldapDomain = nil;
  __ldapDomain_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            int _elem8 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithInt: _elem8]];
          }
          [inProtocol readListEnd];
          [self setAuthMethods: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResponseTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMsgId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUserKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSessionCookieExpiresOn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSecureMsgRandomCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoneNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFqUserLoginId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFidoResponse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLdapDomain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthUserResponse"];
  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  if (__authMethods_isset) {
    if (__authMethods != nil) {
      [outProtocol writeFieldBeginWithName: @"authMethods" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__authMethods count]];
        int idx10;
        for (idx10 = 0; idx10 < [__authMethods count]; idx10++)
        {
          [outProtocol writeI32: [[__authMethods objectAtIndex: idx10] intValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__responseTime_isset) {
    [outProtocol writeFieldBeginWithName: @"responseTime" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __responseTime];
    [outProtocol writeFieldEnd];
  }
  if (__msgId_isset) {
    [outProtocol writeFieldBeginWithName: @"msgId" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __msgId];
    [outProtocol writeFieldEnd];
  }
  if (__userKey_isset) {
    if (__userKey != nil) {
      [outProtocol writeFieldBeginWithName: @"userKey" type: TType_STRING fieldID: 5];
      [outProtocol writeBinary: __userKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionCookie_isset) {
    if (__sessionCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionCookie" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __sessionCookie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionCookieExpiresOn_isset) {
    [outProtocol writeFieldBeginWithName: @"sessionCookieExpiresOn" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __sessionCookieExpiresOn];
    [outProtocol writeFieldEnd];
  }
  if (__secureMsgRandomCode_isset) {
    if (__secureMsgRandomCode != nil) {
      [outProtocol writeFieldBeginWithName: @"secureMsgRandomCode" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __secureMsgRandomCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneNumber_isset) {
    if (__phoneNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"phoneNumber" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __phoneNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fqUserLoginId_isset) {
    if (__fqUserLoginId != nil) {
      [outProtocol writeFieldBeginWithName: @"fqUserLoginId" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __fqUserLoginId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fidoResponse_isset) {
    if (__fidoResponse != nil) {
      [outProtocol writeFieldBeginWithName: @"fidoResponse" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __fidoResponse];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ldapDomain_isset) {
    if (__ldapDomain != nil) {
      [outProtocol writeFieldBeginWithName: @"ldapDomain" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __ldapDomain];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthUserResponse("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",authMethods:"];
  [ms appendFormat: @"%@", __authMethods];
  [ms appendString: @",responseTime:"];
  [ms appendFormat: @"%i", __responseTime];
  [ms appendString: @",msgId:"];
  [ms appendFormat: @"%qi", __msgId];
  [ms appendString: @",userKey:"];
  [ms appendFormat: @"\"%@\"", __userKey];
  [ms appendString: @",sessionCookie:"];
  [ms appendFormat: @"\"%@\"", __sessionCookie];
  [ms appendString: @",sessionCookieExpiresOn:"];
  [ms appendFormat: @"%i", __sessionCookieExpiresOn];
  [ms appendString: @",secureMsgRandomCode:"];
  [ms appendFormat: @"\"%@\"", __secureMsgRandomCode];
  [ms appendString: @",phoneNumber:"];
  [ms appendFormat: @"\"%@\"", __phoneNumber];
  [ms appendString: @",fqUserLoginId:"];
  [ms appendFormat: @"\"%@\"", __fqUserLoginId];
  [ms appendString: @",fidoResponse:"];
  [ms appendFormat: @"\"%@\"", __fidoResponse];
  [ms appendString: @",ldapDomain:"];
  [ms appendFormat: @"\"%@\"", __ldapDomain];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthConnectParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthGatewayId: (NSString *) authGatewayId sharedSecret: (NSData *) sharedSecret workstationName: (NSString *) workstationName udid: (NSData *) udid
{
  self = [super init];
  __authGatewayId = [authGatewayId retain_stub];
  __authGatewayId_isset = YES;
  __sharedSecret = [sharedSecret retain_stub];
  __sharedSecret_isset = YES;
  __workstationName = [workstationName retain_stub];
  __workstationName_isset = YES;
  __udid = [udid retain_stub];
  __udid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authGatewayId"])
  {
    __authGatewayId = [[decoder decodeObjectForKey: @"authGatewayId"] retain_stub];
    __authGatewayId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedSecret"])
  {
    __sharedSecret = [[decoder decodeObjectForKey: @"sharedSecret"] retain_stub];
    __sharedSecret_isset = YES;
  }
  if ([decoder containsValueForKey: @"workstationName"])
  {
    __workstationName = [[decoder decodeObjectForKey: @"workstationName"] retain_stub];
    __workstationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"udid"])
  {
    __udid = [[decoder decodeObjectForKey: @"udid"] retain_stub];
    __udid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authGatewayId_isset)
  {
    [encoder encodeObject: __authGatewayId forKey: @"authGatewayId"];
  }
  if (__sharedSecret_isset)
  {
    [encoder encodeObject: __sharedSecret forKey: @"sharedSecret"];
  }
  if (__workstationName_isset)
  {
    [encoder encodeObject: __workstationName forKey: @"workstationName"];
  }
  if (__udid_isset)
  {
    [encoder encodeObject: __udid forKey: @"udid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authGatewayId_isset ? 2654435761 : 0;
  if (__authGatewayId_isset)
  {
    hash = (hash * 31) ^ [__authGatewayId hash];
  }
  hash = (hash * 31) ^ __sharedSecret_isset ? 2654435761 : 0;
  if (__sharedSecret_isset)
  {
    hash = (hash * 31) ^ [__sharedSecret hash];
  }
  hash = (hash * 31) ^ __workstationName_isset ? 2654435761 : 0;
  if (__workstationName_isset)
  {
    hash = (hash * 31) ^ [__workstationName hash];
  }
  hash = (hash * 31) ^ __udid_isset ? 2654435761 : 0;
  if (__udid_isset)
  {
    hash = (hash * 31) ^ [__udid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthConnectParam class]]) {
    return NO;
  }
  AuthConnectParam *other = (AuthConnectParam *)anObject;
  if ((__authGatewayId_isset != other->__authGatewayId_isset) ||
      (__authGatewayId_isset && ((__authGatewayId || other->__authGatewayId) && ![__authGatewayId isEqual:other->__authGatewayId]))) {
    return NO;
  }
  if ((__sharedSecret_isset != other->__sharedSecret_isset) ||
      (__sharedSecret_isset && ((__sharedSecret || other->__sharedSecret) && ![__sharedSecret isEqual:other->__sharedSecret]))) {
    return NO;
  }
  if ((__workstationName_isset != other->__workstationName_isset) ||
      (__workstationName_isset && ((__workstationName || other->__workstationName) && ![__workstationName isEqual:other->__workstationName]))) {
    return NO;
  }
  if ((__udid_isset != other->__udid_isset) ||
      (__udid_isset && ((__udid || other->__udid) && ![__udid isEqual:other->__udid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authGatewayId release_stub];
  [__sharedSecret release_stub];
  [__workstationName release_stub];
  [__udid release_stub];
  [super dealloc_stub];
}

- (NSString *) authGatewayId {
  return [[__authGatewayId retain_stub] autorelease_stub];
}

- (void) setAuthGatewayId: (NSString *) authGatewayId {
  [authGatewayId retain_stub];
  [__authGatewayId release_stub];
  __authGatewayId = authGatewayId;
  __authGatewayId_isset = YES;
}

- (BOOL) authGatewayIdIsSet {
  return __authGatewayId_isset;
}

- (void) unsetAuthGatewayId {
  [__authGatewayId release_stub];
  __authGatewayId = nil;
  __authGatewayId_isset = NO;
}

- (NSData *) sharedSecret {
  return [[__sharedSecret retain_stub] autorelease_stub];
}

- (void) setSharedSecret: (NSData *) sharedSecret {
  [sharedSecret retain_stub];
  [__sharedSecret release_stub];
  __sharedSecret = sharedSecret;
  __sharedSecret_isset = YES;
}

- (BOOL) sharedSecretIsSet {
  return __sharedSecret_isset;
}

- (void) unsetSharedSecret {
  [__sharedSecret release_stub];
  __sharedSecret = nil;
  __sharedSecret_isset = NO;
}

- (NSString *) workstationName {
  return [[__workstationName retain_stub] autorelease_stub];
}

- (void) setWorkstationName: (NSString *) workstationName {
  [workstationName retain_stub];
  [__workstationName release_stub];
  __workstationName = workstationName;
  __workstationName_isset = YES;
}

- (BOOL) workstationNameIsSet {
  return __workstationName_isset;
}

- (void) unsetWorkstationName {
  [__workstationName release_stub];
  __workstationName = nil;
  __workstationName_isset = NO;
}

- (NSData *) udid {
  return [[__udid retain_stub] autorelease_stub];
}

- (void) setUdid: (NSData *) udid {
  [udid retain_stub];
  [__udid release_stub];
  __udid = udid;
  __udid_isset = YES;
}

- (BOOL) udidIsSet {
  return __udid_isset;
}

- (void) unsetUdid {
  [__udid release_stub];
  __udid = nil;
  __udid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthGatewayId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSharedSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWorkstationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUdid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthConnectParam"];
  if (__authGatewayId_isset) {
    if (__authGatewayId != nil) {
      [outProtocol writeFieldBeginWithName: @"authGatewayId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authGatewayId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedSecret_isset) {
    if (__sharedSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedSecret" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __sharedSecret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__workstationName_isset) {
    if (__workstationName != nil) {
      [outProtocol writeFieldBeginWithName: @"workstationName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __workstationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__udid_isset) {
    if (__udid != nil) {
      [outProtocol writeFieldBeginWithName: @"udid" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __udid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthConnectParam("];
  [ms appendString: @"authGatewayId:"];
  [ms appendFormat: @"\"%@\"", __authGatewayId];
  [ms appendString: @",sharedSecret:"];
  [ms appendFormat: @"\"%@\"", __sharedSecret];
  [ms appendString: @",workstationName:"];
  [ms appendFormat: @"\"%@\"", __workstationName];
  [ms appendString: @",udid:"];
  [ms appendFormat: @"\"%@\"", __udid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthSelectParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthGatewayId: (NSString *) authGatewayId loginId: (NSString *) loginId sharedSecret: (NSData *) sharedSecret udid: (NSData *) udid workstationName: (NSString *) workstationName clientType: (int) clientType
{
  self = [super init];
  __authGatewayId = [authGatewayId retain_stub];
  __authGatewayId_isset = YES;
  __loginId = [loginId retain_stub];
  __loginId_isset = YES;
  __sharedSecret = [sharedSecret retain_stub];
  __sharedSecret_isset = YES;
  __udid = [udid retain_stub];
  __udid_isset = YES;
  __workstationName = [workstationName retain_stub];
  __workstationName_isset = YES;
  __clientType = clientType;
  __clientType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authGatewayId"])
  {
    __authGatewayId = [[decoder decodeObjectForKey: @"authGatewayId"] retain_stub];
    __authGatewayId_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginId"])
  {
    __loginId = [[decoder decodeObjectForKey: @"loginId"] retain_stub];
    __loginId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedSecret"])
  {
    __sharedSecret = [[decoder decodeObjectForKey: @"sharedSecret"] retain_stub];
    __sharedSecret_isset = YES;
  }
  if ([decoder containsValueForKey: @"udid"])
  {
    __udid = [[decoder decodeObjectForKey: @"udid"] retain_stub];
    __udid_isset = YES;
  }
  if ([decoder containsValueForKey: @"workstationName"])
  {
    __workstationName = [[decoder decodeObjectForKey: @"workstationName"] retain_stub];
    __workstationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientType"])
  {
    __clientType = [decoder decodeIntForKey: @"clientType"];
    __clientType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authGatewayId_isset)
  {
    [encoder encodeObject: __authGatewayId forKey: @"authGatewayId"];
  }
  if (__loginId_isset)
  {
    [encoder encodeObject: __loginId forKey: @"loginId"];
  }
  if (__sharedSecret_isset)
  {
    [encoder encodeObject: __sharedSecret forKey: @"sharedSecret"];
  }
  if (__udid_isset)
  {
    [encoder encodeObject: __udid forKey: @"udid"];
  }
  if (__workstationName_isset)
  {
    [encoder encodeObject: __workstationName forKey: @"workstationName"];
  }
  if (__clientType_isset)
  {
    [encoder encodeInt: __clientType forKey: @"clientType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authGatewayId_isset ? 2654435761 : 0;
  if (__authGatewayId_isset)
  {
    hash = (hash * 31) ^ [__authGatewayId hash];
  }
  hash = (hash * 31) ^ __loginId_isset ? 2654435761 : 0;
  if (__loginId_isset)
  {
    hash = (hash * 31) ^ [__loginId hash];
  }
  hash = (hash * 31) ^ __sharedSecret_isset ? 2654435761 : 0;
  if (__sharedSecret_isset)
  {
    hash = (hash * 31) ^ [__sharedSecret hash];
  }
  hash = (hash * 31) ^ __udid_isset ? 2654435761 : 0;
  if (__udid_isset)
  {
    hash = (hash * 31) ^ [__udid hash];
  }
  hash = (hash * 31) ^ __workstationName_isset ? 2654435761 : 0;
  if (__workstationName_isset)
  {
    hash = (hash * 31) ^ [__workstationName hash];
  }
  hash = (hash * 31) ^ __clientType_isset ? 2654435761 : 0;
  if (__clientType_isset)
  {
    hash = (hash * 31) ^ [@(__clientType) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthSelectParam class]]) {
    return NO;
  }
  AuthSelectParam *other = (AuthSelectParam *)anObject;
  if ((__authGatewayId_isset != other->__authGatewayId_isset) ||
      (__authGatewayId_isset && ((__authGatewayId || other->__authGatewayId) && ![__authGatewayId isEqual:other->__authGatewayId]))) {
    return NO;
  }
  if ((__loginId_isset != other->__loginId_isset) ||
      (__loginId_isset && ((__loginId || other->__loginId) && ![__loginId isEqual:other->__loginId]))) {
    return NO;
  }
  if ((__sharedSecret_isset != other->__sharedSecret_isset) ||
      (__sharedSecret_isset && ((__sharedSecret || other->__sharedSecret) && ![__sharedSecret isEqual:other->__sharedSecret]))) {
    return NO;
  }
  if ((__udid_isset != other->__udid_isset) ||
      (__udid_isset && ((__udid || other->__udid) && ![__udid isEqual:other->__udid]))) {
    return NO;
  }
  if ((__workstationName_isset != other->__workstationName_isset) ||
      (__workstationName_isset && ((__workstationName || other->__workstationName) && ![__workstationName isEqual:other->__workstationName]))) {
    return NO;
  }
  if ((__clientType_isset != other->__clientType_isset) ||
      (__clientType_isset && (__clientType != other->__clientType))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authGatewayId release_stub];
  [__loginId release_stub];
  [__sharedSecret release_stub];
  [__udid release_stub];
  [__workstationName release_stub];
  [super dealloc_stub];
}

- (NSString *) authGatewayId {
  return [[__authGatewayId retain_stub] autorelease_stub];
}

- (void) setAuthGatewayId: (NSString *) authGatewayId {
  [authGatewayId retain_stub];
  [__authGatewayId release_stub];
  __authGatewayId = authGatewayId;
  __authGatewayId_isset = YES;
}

- (BOOL) authGatewayIdIsSet {
  return __authGatewayId_isset;
}

- (void) unsetAuthGatewayId {
  [__authGatewayId release_stub];
  __authGatewayId = nil;
  __authGatewayId_isset = NO;
}

- (NSString *) loginId {
  return [[__loginId retain_stub] autorelease_stub];
}

- (void) setLoginId: (NSString *) loginId {
  [loginId retain_stub];
  [__loginId release_stub];
  __loginId = loginId;
  __loginId_isset = YES;
}

- (BOOL) loginIdIsSet {
  return __loginId_isset;
}

- (void) unsetLoginId {
  [__loginId release_stub];
  __loginId = nil;
  __loginId_isset = NO;
}

- (NSData *) sharedSecret {
  return [[__sharedSecret retain_stub] autorelease_stub];
}

- (void) setSharedSecret: (NSData *) sharedSecret {
  [sharedSecret retain_stub];
  [__sharedSecret release_stub];
  __sharedSecret = sharedSecret;
  __sharedSecret_isset = YES;
}

- (BOOL) sharedSecretIsSet {
  return __sharedSecret_isset;
}

- (void) unsetSharedSecret {
  [__sharedSecret release_stub];
  __sharedSecret = nil;
  __sharedSecret_isset = NO;
}

- (NSData *) udid {
  return [[__udid retain_stub] autorelease_stub];
}

- (void) setUdid: (NSData *) udid {
  [udid retain_stub];
  [__udid release_stub];
  __udid = udid;
  __udid_isset = YES;
}

- (BOOL) udidIsSet {
  return __udid_isset;
}

- (void) unsetUdid {
  [__udid release_stub];
  __udid = nil;
  __udid_isset = NO;
}

- (NSString *) workstationName {
  return [[__workstationName retain_stub] autorelease_stub];
}

- (void) setWorkstationName: (NSString *) workstationName {
  [workstationName retain_stub];
  [__workstationName release_stub];
  __workstationName = workstationName;
  __workstationName_isset = YES;
}

- (BOOL) workstationNameIsSet {
  return __workstationName_isset;
}

- (void) unsetWorkstationName {
  [__workstationName release_stub];
  __workstationName = nil;
  __workstationName_isset = NO;
}

- (int) clientType {
  return __clientType;
}

- (void) setClientType: (int) clientType {
  __clientType = clientType;
  __clientType_isset = YES;
}

- (BOOL) clientTypeIsSet {
  return __clientType_isset;
}

- (void) unsetClientType {
  __clientType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthGatewayId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSharedSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUdid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWorkstationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClientType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthSelectParam"];
  if (__authGatewayId_isset) {
    if (__authGatewayId != nil) {
      [outProtocol writeFieldBeginWithName: @"authGatewayId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __authGatewayId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginId_isset) {
    if (__loginId != nil) {
      [outProtocol writeFieldBeginWithName: @"loginId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __loginId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedSecret_isset) {
    if (__sharedSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedSecret" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __sharedSecret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__udid_isset) {
    if (__udid != nil) {
      [outProtocol writeFieldBeginWithName: @"udid" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __udid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__workstationName_isset) {
    if (__workstationName != nil) {
      [outProtocol writeFieldBeginWithName: @"workstationName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __workstationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientType_isset) {
    [outProtocol writeFieldBeginWithName: @"clientType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __clientType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthSelectParam("];
  [ms appendString: @"authGatewayId:"];
  [ms appendFormat: @"\"%@\"", __authGatewayId];
  [ms appendString: @",loginId:"];
  [ms appendFormat: @"\"%@\"", __loginId];
  [ms appendString: @",sharedSecret:"];
  [ms appendFormat: @"\"%@\"", __sharedSecret];
  [ms appendString: @",udid:"];
  [ms appendFormat: @"\"%@\"", __udid];
  [ms appendString: @",workstationName:"];
  [ms appendFormat: @"\"%@\"", __workstationName];
  [ms appendString: @",clientType:"];
  [ms appendFormat: @"%i", __clientType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthSelectResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthMethods: (NSMutableArray *) authMethods
{
  self = [super init];
  __authMethods = [authMethods retain_stub];
  __authMethods_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authMethods"])
  {
    __authMethods = [[decoder decodeObjectForKey: @"authMethods"] retain_stub];
    __authMethods_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authMethods_isset)
  {
    [encoder encodeObject: __authMethods forKey: @"authMethods"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authMethods_isset ? 2654435761 : 0;
  if (__authMethods_isset)
  {
    hash = (hash * 31) ^ [__authMethods hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthSelectResponse class]]) {
    return NO;
  }
  AuthSelectResponse *other = (AuthSelectResponse *)anObject;
  if ((__authMethods_isset != other->__authMethods_isset) ||
      (__authMethods_isset && ((__authMethods || other->__authMethods) && ![__authMethods isEqual:other->__authMethods]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authMethods release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) authMethods {
  return [[__authMethods retain_stub] autorelease_stub];
}

- (void) setAuthMethods: (NSMutableArray *) authMethods {
  [authMethods retain_stub];
  [__authMethods release_stub];
  __authMethods = authMethods;
  __authMethods_isset = YES;
}

- (BOOL) authMethodsIsSet {
  return __authMethods_isset;
}

- (void) unsetAuthMethods {
  [__authMethods release_stub];
  __authMethods = nil;
  __authMethods_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            int _elem13 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithInt: _elem13]];
          }
          [inProtocol readListEnd];
          [self setAuthMethods: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthSelectResponse"];
  if (__authMethods_isset) {
    if (__authMethods != nil) {
      [outProtocol writeFieldBeginWithName: @"authMethods" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__authMethods count]];
        int idx15;
        for (idx15 = 0; idx15 < [__authMethods count]; idx15++)
        {
          [outProtocol writeI32: [[__authMethods objectAtIndex: idx15] intValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthSelectResponse("];
  [ms appendString: @"authMethods:"];
  [ms appendFormat: @"%@", __authMethods];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QrCodeResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimeToLive: (int32_t) timeToLive data: (NSString *) data
{
  self = [super init];
  __timeToLive = timeToLive;
  __timeToLive_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timeToLive"])
  {
    __timeToLive = [decoder decodeInt32ForKey: @"timeToLive"];
    __timeToLive_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timeToLive_isset)
  {
    [encoder encodeInt32: __timeToLive forKey: @"timeToLive"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __timeToLive_isset ? 2654435761 : 0;
  if (__timeToLive_isset)
  {
    hash = (hash * 31) ^ [@(__timeToLive) hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QrCodeResponse class]]) {
    return NO;
  }
  QrCodeResponse *other = (QrCodeResponse *)anObject;
  if ((__timeToLive_isset != other->__timeToLive_isset) ||
      (__timeToLive_isset && (__timeToLive != other->__timeToLive))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (int32_t) timeToLive {
  return __timeToLive;
}

- (void) setTimeToLive: (int32_t) timeToLive {
  __timeToLive = timeToLive;
  __timeToLive_isset = YES;
}

- (BOOL) timeToLiveIsSet {
  return __timeToLive_isset;
}

- (void) unsetTimeToLive {
  __timeToLive_isset = NO;
}

- (NSString *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSString *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTimeToLive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QrCodeResponse"];
  if (__timeToLive_isset) {
    [outProtocol writeFieldBeginWithName: @"timeToLive" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __timeToLive];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QrCodeResponse("];
  [ms appendString: @"timeToLive:"];
  [ms appendFormat: @"%i", __timeToLive];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SignatureParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClientSignature: (NSData *) clientSignature appDigest: (NSData *) appDigest
{
  self = [super init];
  __clientSignature = [clientSignature retain_stub];
  __clientSignature_isset = YES;
  __appDigest = [appDigest retain_stub];
  __appDigest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clientSignature"])
  {
    __clientSignature = [[decoder decodeObjectForKey: @"clientSignature"] retain_stub];
    __clientSignature_isset = YES;
  }
  if ([decoder containsValueForKey: @"appDigest"])
  {
    __appDigest = [[decoder decodeObjectForKey: @"appDigest"] retain_stub];
    __appDigest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clientSignature_isset)
  {
    [encoder encodeObject: __clientSignature forKey: @"clientSignature"];
  }
  if (__appDigest_isset)
  {
    [encoder encodeObject: __appDigest forKey: @"appDigest"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __clientSignature_isset ? 2654435761 : 0;
  if (__clientSignature_isset)
  {
    hash = (hash * 31) ^ [__clientSignature hash];
  }
  hash = (hash * 31) ^ __appDigest_isset ? 2654435761 : 0;
  if (__appDigest_isset)
  {
    hash = (hash * 31) ^ [__appDigest hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SignatureParam class]]) {
    return NO;
  }
  SignatureParam *other = (SignatureParam *)anObject;
  if ((__clientSignature_isset != other->__clientSignature_isset) ||
      (__clientSignature_isset && ((__clientSignature || other->__clientSignature) && ![__clientSignature isEqual:other->__clientSignature]))) {
    return NO;
  }
  if ((__appDigest_isset != other->__appDigest_isset) ||
      (__appDigest_isset && ((__appDigest || other->__appDigest) && ![__appDigest isEqual:other->__appDigest]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__clientSignature release_stub];
  [__appDigest release_stub];
  [super dealloc_stub];
}

- (NSData *) clientSignature {
  return [[__clientSignature retain_stub] autorelease_stub];
}

- (void) setClientSignature: (NSData *) clientSignature {
  [clientSignature retain_stub];
  [__clientSignature release_stub];
  __clientSignature = clientSignature;
  __clientSignature_isset = YES;
}

- (BOOL) clientSignatureIsSet {
  return __clientSignature_isset;
}

- (void) unsetClientSignature {
  [__clientSignature release_stub];
  __clientSignature = nil;
  __clientSignature_isset = NO;
}

- (NSData *) appDigest {
  return [[__appDigest retain_stub] autorelease_stub];
}

- (void) setAppDigest: (NSData *) appDigest {
  [appDigest retain_stub];
  [__appDigest release_stub];
  __appDigest = appDigest;
  __appDigest_isset = YES;
}

- (BOOL) appDigestIsSet {
  return __appDigest_isset;
}

- (void) unsetAppDigest {
  [__appDigest release_stub];
  __appDigest = nil;
  __appDigest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setClientSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setAppDigest: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignatureParam"];
  if (__clientSignature_isset) {
    if (__clientSignature != nil) {
      [outProtocol writeFieldBeginWithName: @"clientSignature" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __clientSignature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appDigest_isset) {
    if (__appDigest != nil) {
      [outProtocol writeFieldBeginWithName: @"appDigest" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __appDigest];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SignatureParam("];
  [ms appendString: @"clientSignature:"];
  [ms appendFormat: @"\"%@\"", __clientSignature];
  [ms appendString: @",appDigest:"];
  [ms appendFormat: @"\"%@\"", __appDigest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SignatureResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReconnectTicket: (NSData *) reconnectTicket keepAliveSeconds: (int32_t) keepAliveSeconds
{
  self = [super init];
  __reconnectTicket = [reconnectTicket retain_stub];
  __reconnectTicket_isset = YES;
  __keepAliveSeconds = keepAliveSeconds;
  __keepAliveSeconds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reconnectTicket"])
  {
    __reconnectTicket = [[decoder decodeObjectForKey: @"reconnectTicket"] retain_stub];
    __reconnectTicket_isset = YES;
  }
  if ([decoder containsValueForKey: @"keepAliveSeconds"])
  {
    __keepAliveSeconds = [decoder decodeInt32ForKey: @"keepAliveSeconds"];
    __keepAliveSeconds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reconnectTicket_isset)
  {
    [encoder encodeObject: __reconnectTicket forKey: @"reconnectTicket"];
  }
  if (__keepAliveSeconds_isset)
  {
    [encoder encodeInt32: __keepAliveSeconds forKey: @"keepAliveSeconds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __reconnectTicket_isset ? 2654435761 : 0;
  if (__reconnectTicket_isset)
  {
    hash = (hash * 31) ^ [__reconnectTicket hash];
  }
  hash = (hash * 31) ^ __keepAliveSeconds_isset ? 2654435761 : 0;
  if (__keepAliveSeconds_isset)
  {
    hash = (hash * 31) ^ [@(__keepAliveSeconds) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SignatureResponse class]]) {
    return NO;
  }
  SignatureResponse *other = (SignatureResponse *)anObject;
  if ((__reconnectTicket_isset != other->__reconnectTicket_isset) ||
      (__reconnectTicket_isset && ((__reconnectTicket || other->__reconnectTicket) && ![__reconnectTicket isEqual:other->__reconnectTicket]))) {
    return NO;
  }
  if ((__keepAliveSeconds_isset != other->__keepAliveSeconds_isset) ||
      (__keepAliveSeconds_isset && (__keepAliveSeconds != other->__keepAliveSeconds))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__reconnectTicket release_stub];
  [super dealloc_stub];
}

- (NSData *) reconnectTicket {
  return [[__reconnectTicket retain_stub] autorelease_stub];
}

- (void) setReconnectTicket: (NSData *) reconnectTicket {
  [reconnectTicket retain_stub];
  [__reconnectTicket release_stub];
  __reconnectTicket = reconnectTicket;
  __reconnectTicket_isset = YES;
}

- (BOOL) reconnectTicketIsSet {
  return __reconnectTicket_isset;
}

- (void) unsetReconnectTicket {
  [__reconnectTicket release_stub];
  __reconnectTicket = nil;
  __reconnectTicket_isset = NO;
}

- (int32_t) keepAliveSeconds {
  return __keepAliveSeconds;
}

- (void) setKeepAliveSeconds: (int32_t) keepAliveSeconds {
  __keepAliveSeconds = keepAliveSeconds;
  __keepAliveSeconds_isset = YES;
}

- (BOOL) keepAliveSecondsIsSet {
  return __keepAliveSeconds_isset;
}

- (void) unsetKeepAliveSeconds {
  __keepAliveSeconds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setReconnectTicket: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setKeepAliveSeconds: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignatureResponse"];
  if (__reconnectTicket_isset) {
    if (__reconnectTicket != nil) {
      [outProtocol writeFieldBeginWithName: @"reconnectTicket" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __reconnectTicket];
      [outProtocol writeFieldEnd];
    }
  }
  if (__keepAliveSeconds_isset) {
    [outProtocol writeFieldBeginWithName: @"keepAliveSeconds" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __keepAliveSeconds];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SignatureResponse("];
  [ms appendString: @"reconnectTicket:"];
  [ms appendFormat: @"\"%@\"", __reconnectTicket];
  [ms appendString: @",keepAliveSeconds:"];
  [ms appendFormat: @"%i", __keepAliveSeconds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeviceOfflineKey

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceId: (int32_t) deviceId udid: (NSData *) udid offlineKey: (NSData *) offlineKey
{
  self = [super init];
  __deviceId = deviceId;
  __deviceId_isset = YES;
  __udid = [udid retain_stub];
  __udid_isset = YES;
  __offlineKey = [offlineKey retain_stub];
  __offlineKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [decoder decodeInt32ForKey: @"deviceId"];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"udid"])
  {
    __udid = [[decoder decodeObjectForKey: @"udid"] retain_stub];
    __udid_isset = YES;
  }
  if ([decoder containsValueForKey: @"offlineKey"])
  {
    __offlineKey = [[decoder decodeObjectForKey: @"offlineKey"] retain_stub];
    __offlineKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeInt32: __deviceId forKey: @"deviceId"];
  }
  if (__udid_isset)
  {
    [encoder encodeObject: __udid forKey: @"udid"];
  }
  if (__offlineKey_isset)
  {
    [encoder encodeObject: __offlineKey forKey: @"offlineKey"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deviceId_isset ? 2654435761 : 0;
  if (__deviceId_isset)
  {
    hash = (hash * 31) ^ [@(__deviceId) hash];
  }
  hash = (hash * 31) ^ __udid_isset ? 2654435761 : 0;
  if (__udid_isset)
  {
    hash = (hash * 31) ^ [__udid hash];
  }
  hash = (hash * 31) ^ __offlineKey_isset ? 2654435761 : 0;
  if (__offlineKey_isset)
  {
    hash = (hash * 31) ^ [__offlineKey hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeviceOfflineKey class]]) {
    return NO;
  }
  DeviceOfflineKey *other = (DeviceOfflineKey *)anObject;
  if ((__deviceId_isset != other->__deviceId_isset) ||
      (__deviceId_isset && (__deviceId != other->__deviceId))) {
    return NO;
  }
  if ((__udid_isset != other->__udid_isset) ||
      (__udid_isset && ((__udid || other->__udid) && ![__udid isEqual:other->__udid]))) {
    return NO;
  }
  if ((__offlineKey_isset != other->__offlineKey_isset) ||
      (__offlineKey_isset && ((__offlineKey || other->__offlineKey) && ![__offlineKey isEqual:other->__offlineKey]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__udid release_stub];
  [__offlineKey release_stub];
  [super dealloc_stub];
}

- (int32_t) deviceId {
  return __deviceId;
}

- (void) setDeviceId: (int32_t) deviceId {
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  __deviceId_isset = NO;
}

- (NSData *) udid {
  return [[__udid retain_stub] autorelease_stub];
}

- (void) setUdid: (NSData *) udid {
  [udid retain_stub];
  [__udid release_stub];
  __udid = udid;
  __udid_isset = YES;
}

- (BOOL) udidIsSet {
  return __udid_isset;
}

- (void) unsetUdid {
  [__udid release_stub];
  __udid = nil;
  __udid_isset = NO;
}

- (NSData *) offlineKey {
  return [[__offlineKey retain_stub] autorelease_stub];
}

- (void) setOfflineKey: (NSData *) offlineKey {
  [offlineKey retain_stub];
  [__offlineKey release_stub];
  __offlineKey = offlineKey;
  __offlineKey_isset = YES;
}

- (BOOL) offlineKeyIsSet {
  return __offlineKey_isset;
}

- (void) unsetOfflineKey {
  [__offlineKey release_stub];
  __offlineKey = nil;
  __offlineKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUdid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setOfflineKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeviceOfflineKey"];
  if (__deviceId_isset) {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __deviceId];
    [outProtocol writeFieldEnd];
  }
  if (__udid_isset) {
    if (__udid != nil) {
      [outProtocol writeFieldBeginWithName: @"udid" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __udid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offlineKey_isset) {
    if (__offlineKey != nil) {
      [outProtocol writeFieldBeginWithName: @"offlineKey" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __offlineKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeviceOfflineKey("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"%i", __deviceId];
  [ms appendString: @",udid:"];
  [ms appendFormat: @"\"%@\"", __udid];
  [ms appendString: @",offlineKey:"];
  [ms appendFormat: @"\"%@\"", __offlineKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeviceOfflineKeysResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithWindow: (int32_t) window validFor: (int32_t) validFor deviceOfflineKeys: (NSMutableArray *) deviceOfflineKeys
{
  self = [super init];
  __window = window;
  __window_isset = YES;
  __validFor = validFor;
  __validFor_isset = YES;
  __deviceOfflineKeys = [deviceOfflineKeys retain_stub];
  __deviceOfflineKeys_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"window"])
  {
    __window = [decoder decodeInt32ForKey: @"window"];
    __window_isset = YES;
  }
  if ([decoder containsValueForKey: @"validFor"])
  {
    __validFor = [decoder decodeInt32ForKey: @"validFor"];
    __validFor_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceOfflineKeys"])
  {
    __deviceOfflineKeys = [[decoder decodeObjectForKey: @"deviceOfflineKeys"] retain_stub];
    __deviceOfflineKeys_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__window_isset)
  {
    [encoder encodeInt32: __window forKey: @"window"];
  }
  if (__validFor_isset)
  {
    [encoder encodeInt32: __validFor forKey: @"validFor"];
  }
  if (__deviceOfflineKeys_isset)
  {
    [encoder encodeObject: __deviceOfflineKeys forKey: @"deviceOfflineKeys"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __window_isset ? 2654435761 : 0;
  if (__window_isset)
  {
    hash = (hash * 31) ^ [@(__window) hash];
  }
  hash = (hash * 31) ^ __validFor_isset ? 2654435761 : 0;
  if (__validFor_isset)
  {
    hash = (hash * 31) ^ [@(__validFor) hash];
  }
  hash = (hash * 31) ^ __deviceOfflineKeys_isset ? 2654435761 : 0;
  if (__deviceOfflineKeys_isset)
  {
    hash = (hash * 31) ^ [__deviceOfflineKeys hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeviceOfflineKeysResponse class]]) {
    return NO;
  }
  DeviceOfflineKeysResponse *other = (DeviceOfflineKeysResponse *)anObject;
  if ((__window_isset != other->__window_isset) ||
      (__window_isset && (__window != other->__window))) {
    return NO;
  }
  if ((__validFor_isset != other->__validFor_isset) ||
      (__validFor_isset && (__validFor != other->__validFor))) {
    return NO;
  }
  if ((__deviceOfflineKeys_isset != other->__deviceOfflineKeys_isset) ||
      (__deviceOfflineKeys_isset && ((__deviceOfflineKeys || other->__deviceOfflineKeys) && ![__deviceOfflineKeys isEqual:other->__deviceOfflineKeys]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__deviceOfflineKeys release_stub];
  [super dealloc_stub];
}

- (int32_t) window {
  return __window;
}

- (void) setWindow: (int32_t) window {
  __window = window;
  __window_isset = YES;
}

- (BOOL) windowIsSet {
  return __window_isset;
}

- (void) unsetWindow {
  __window_isset = NO;
}

- (int32_t) validFor {
  return __validFor;
}

- (void) setValidFor: (int32_t) validFor {
  __validFor = validFor;
  __validFor_isset = YES;
}

- (BOOL) validForIsSet {
  return __validFor_isset;
}

- (void) unsetValidFor {
  __validFor_isset = NO;
}

- (NSMutableArray *) deviceOfflineKeys {
  return [[__deviceOfflineKeys retain_stub] autorelease_stub];
}

- (void) setDeviceOfflineKeys: (NSMutableArray *) deviceOfflineKeys {
  [deviceOfflineKeys retain_stub];
  [__deviceOfflineKeys release_stub];
  __deviceOfflineKeys = deviceOfflineKeys;
  __deviceOfflineKeys_isset = YES;
}

- (BOOL) deviceOfflineKeysIsSet {
  return __deviceOfflineKeys_isset;
}

- (void) unsetDeviceOfflineKeys {
  [__deviceOfflineKeys release_stub];
  __deviceOfflineKeys = nil;
  __deviceOfflineKeys_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWindow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setValidFor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            DeviceOfflineKey *_elem18 = [[DeviceOfflineKey alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release_stub];
          }
          [inProtocol readListEnd];
          [self setDeviceOfflineKeys: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeviceOfflineKeysResponse"];
  if (__window_isset) {
    [outProtocol writeFieldBeginWithName: @"window" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __window];
    [outProtocol writeFieldEnd];
  }
  if (__validFor_isset) {
    [outProtocol writeFieldBeginWithName: @"validFor" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __validFor];
    [outProtocol writeFieldEnd];
  }
  if (__deviceOfflineKeys_isset) {
    if (__deviceOfflineKeys != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceOfflineKeys" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__deviceOfflineKeys count]];
        int idx20;
        for (idx20 = 0; idx20 < [__deviceOfflineKeys count]; idx20++)
        {
          [[__deviceOfflineKeys objectAtIndex: idx20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeviceOfflineKeysResponse("];
  [ms appendString: @"window:"];
  [ms appendFormat: @"%i", __window];
  [ms appendString: @",validFor:"];
  [ms appendFormat: @"%i", __validFor];
  [ms appendString: @",deviceOfflineKeys:"];
  [ms appendFormat: @"%@", __deviceOfflineKeys];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation AppToServerConstants
+ (void) initialize {
}
@end

@interface serverSignature_args : NSObject <TBase, NSCoding> {
  ServerSignatureParam * __serverSignatureParam;

  BOOL __serverSignatureParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=serverSignatureParam, setter=setServerSignatureParam:) ServerSignatureParam * serverSignatureParam;
#endif

- (id) init;
- (id) initWithServerSignatureParam: (ServerSignatureParam *) serverSignatureParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ServerSignatureParam *) serverSignatureParam;
- (void) setServerSignatureParam: (ServerSignatureParam *) serverSignatureParam;
#endif
- (BOOL) serverSignatureParamIsSet;

@end

@implementation serverSignature_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServerSignatureParam: (ServerSignatureParam *) serverSignatureParam
{
  self = [super init];
  __serverSignatureParam = [serverSignatureParam retain_stub];
  __serverSignatureParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serverSignatureParam"])
  {
    __serverSignatureParam = [[decoder decodeObjectForKey: @"serverSignatureParam"] retain_stub];
    __serverSignatureParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serverSignatureParam_isset)
  {
    [encoder encodeObject: __serverSignatureParam forKey: @"serverSignatureParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serverSignatureParam_isset ? 2654435761 : 0;
  if (__serverSignatureParam_isset)
  {
    hash = (hash * 31) ^ [__serverSignatureParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[serverSignature_args class]]) {
    return NO;
  }
  serverSignature_args *other = (serverSignature_args *)anObject;
  if ((__serverSignatureParam_isset != other->__serverSignatureParam_isset) ||
      (__serverSignatureParam_isset && ((__serverSignatureParam || other->__serverSignatureParam) && ![__serverSignatureParam isEqual:other->__serverSignatureParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serverSignatureParam release_stub];
  [super dealloc_stub];
}

- (ServerSignatureParam *) serverSignatureParam {
  return [[__serverSignatureParam retain_stub] autorelease_stub];
}

- (void) setServerSignatureParam: (ServerSignatureParam *) serverSignatureParam {
  [serverSignatureParam retain_stub];
  [__serverSignatureParam release_stub];
  __serverSignatureParam = serverSignatureParam;
  __serverSignatureParam_isset = YES;
}

- (BOOL) serverSignatureParamIsSet {
  return __serverSignatureParam_isset;
}

- (void) unsetServerSignatureParam {
  [__serverSignatureParam release_stub];
  __serverSignatureParam = nil;
  __serverSignatureParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServerSignatureParam *fieldValue = [[ServerSignatureParam alloc] init];
          [fieldValue read: inProtocol];
          [self setServerSignatureParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"serverSignature_args"];
  if (__serverSignatureParam_isset) {
    if (__serverSignatureParam != nil) {
      [outProtocol writeFieldBeginWithName: @"serverSignatureParam" type: TType_STRUCT fieldID: 1];
      [__serverSignatureParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"serverSignature_args("];
  [ms appendString: @"serverSignatureParam:"];
  [ms appendFormat: @"%@", __serverSignatureParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ServerSignature_result : NSObject <TBase, NSCoding> {
  ServerSignatureResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ServerSignatureResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (ServerSignatureResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ServerSignatureResponse *) success;
- (void) setSuccess: (ServerSignatureResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation ServerSignature_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ServerSignatureResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ServerSignature_result class]]) {
    return NO;
  }
  ServerSignature_result *other = (ServerSignature_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (ServerSignatureResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ServerSignatureResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ServerSignatureResponse *fieldValue = [[ServerSignatureResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServerSignature_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServerSignature_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDomainSdkConfig_args : NSObject <TBase, NSCoding> {
  DomainSdkConfigParam * __domainSdkConfigParam;

  BOOL __domainSdkConfigParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=domainSdkConfigParam, setter=setDomainSdkConfigParam:) DomainSdkConfigParam * domainSdkConfigParam;
#endif

- (id) init;
- (id) initWithDomainSdkConfigParam: (DomainSdkConfigParam *) domainSdkConfigParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DomainSdkConfigParam *) domainSdkConfigParam;
- (void) setDomainSdkConfigParam: (DomainSdkConfigParam *) domainSdkConfigParam;
#endif
- (BOOL) domainSdkConfigParamIsSet;

@end

@implementation getDomainSdkConfig_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDomainSdkConfigParam: (DomainSdkConfigParam *) domainSdkConfigParam
{
  self = [super init];
  __domainSdkConfigParam = [domainSdkConfigParam retain_stub];
  __domainSdkConfigParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"domainSdkConfigParam"])
  {
    __domainSdkConfigParam = [[decoder decodeObjectForKey: @"domainSdkConfigParam"] retain_stub];
    __domainSdkConfigParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__domainSdkConfigParam_isset)
  {
    [encoder encodeObject: __domainSdkConfigParam forKey: @"domainSdkConfigParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __domainSdkConfigParam_isset ? 2654435761 : 0;
  if (__domainSdkConfigParam_isset)
  {
    hash = (hash * 31) ^ [__domainSdkConfigParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getDomainSdkConfig_args class]]) {
    return NO;
  }
  getDomainSdkConfig_args *other = (getDomainSdkConfig_args *)anObject;
  if ((__domainSdkConfigParam_isset != other->__domainSdkConfigParam_isset) ||
      (__domainSdkConfigParam_isset && ((__domainSdkConfigParam || other->__domainSdkConfigParam) && ![__domainSdkConfigParam isEqual:other->__domainSdkConfigParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__domainSdkConfigParam release_stub];
  [super dealloc_stub];
}

- (DomainSdkConfigParam *) domainSdkConfigParam {
  return [[__domainSdkConfigParam retain_stub] autorelease_stub];
}

- (void) setDomainSdkConfigParam: (DomainSdkConfigParam *) domainSdkConfigParam {
  [domainSdkConfigParam retain_stub];
  [__domainSdkConfigParam release_stub];
  __domainSdkConfigParam = domainSdkConfigParam;
  __domainSdkConfigParam_isset = YES;
}

- (BOOL) domainSdkConfigParamIsSet {
  return __domainSdkConfigParam_isset;
}

- (void) unsetDomainSdkConfigParam {
  [__domainSdkConfigParam release_stub];
  __domainSdkConfigParam = nil;
  __domainSdkConfigParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DomainSdkConfigParam *fieldValue = [[DomainSdkConfigParam alloc] init];
          [fieldValue read: inProtocol];
          [self setDomainSdkConfigParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDomainSdkConfig_args"];
  if (__domainSdkConfigParam_isset) {
    if (__domainSdkConfigParam != nil) {
      [outProtocol writeFieldBeginWithName: @"domainSdkConfigParam" type: TType_STRUCT fieldID: 1];
      [__domainSdkConfigParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDomainSdkConfig_args("];
  [ms appendString: @"domainSdkConfigParam:"];
  [ms appendFormat: @"%@", __domainSdkConfigParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDomainSdkConfig_result : NSObject <TBase, NSCoding> {
  DomainSdkConfigResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DomainSdkConfigResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (DomainSdkConfigResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DomainSdkConfigResponse *) success;
- (void) setSuccess: (DomainSdkConfigResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetDomainSdkConfig_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (DomainSdkConfigResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetDomainSdkConfig_result class]]) {
    return NO;
  }
  GetDomainSdkConfig_result *other = (GetDomainSdkConfig_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (DomainSdkConfigResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (DomainSdkConfigResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DomainSdkConfigResponse *fieldValue = [[DomainSdkConfigResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDomainSdkConfig_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDomainSdkConfig_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface registerDispatcher_args : NSObject <TBase, NSCoding> {
  RegisterDispatcherParam * __registerDispatcherParam;

  BOOL __registerDispatcherParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registerDispatcherParam, setter=setRegisterDispatcherParam:) RegisterDispatcherParam * registerDispatcherParam;
#endif

- (id) init;
- (id) initWithRegisterDispatcherParam: (RegisterDispatcherParam *) registerDispatcherParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RegisterDispatcherParam *) registerDispatcherParam;
- (void) setRegisterDispatcherParam: (RegisterDispatcherParam *) registerDispatcherParam;
#endif
- (BOOL) registerDispatcherParamIsSet;

@end

@implementation registerDispatcher_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegisterDispatcherParam: (RegisterDispatcherParam *) registerDispatcherParam
{
  self = [super init];
  __registerDispatcherParam = [registerDispatcherParam retain_stub];
  __registerDispatcherParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"registerDispatcherParam"])
  {
    __registerDispatcherParam = [[decoder decodeObjectForKey: @"registerDispatcherParam"] retain_stub];
    __registerDispatcherParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__registerDispatcherParam_isset)
  {
    [encoder encodeObject: __registerDispatcherParam forKey: @"registerDispatcherParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __registerDispatcherParam_isset ? 2654435761 : 0;
  if (__registerDispatcherParam_isset)
  {
    hash = (hash * 31) ^ [__registerDispatcherParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[registerDispatcher_args class]]) {
    return NO;
  }
  registerDispatcher_args *other = (registerDispatcher_args *)anObject;
  if ((__registerDispatcherParam_isset != other->__registerDispatcherParam_isset) ||
      (__registerDispatcherParam_isset && ((__registerDispatcherParam || other->__registerDispatcherParam) && ![__registerDispatcherParam isEqual:other->__registerDispatcherParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__registerDispatcherParam release_stub];
  [super dealloc_stub];
}

- (RegisterDispatcherParam *) registerDispatcherParam {
  return [[__registerDispatcherParam retain_stub] autorelease_stub];
}

- (void) setRegisterDispatcherParam: (RegisterDispatcherParam *) registerDispatcherParam {
  [registerDispatcherParam retain_stub];
  [__registerDispatcherParam release_stub];
  __registerDispatcherParam = registerDispatcherParam;
  __registerDispatcherParam_isset = YES;
}

- (BOOL) registerDispatcherParamIsSet {
  return __registerDispatcherParam_isset;
}

- (void) unsetRegisterDispatcherParam {
  [__registerDispatcherParam release_stub];
  __registerDispatcherParam = nil;
  __registerDispatcherParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RegisterDispatcherParam *fieldValue = [[RegisterDispatcherParam alloc] init];
          [fieldValue read: inProtocol];
          [self setRegisterDispatcherParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerDispatcher_args"];
  if (__registerDispatcherParam_isset) {
    if (__registerDispatcherParam != nil) {
      [outProtocol writeFieldBeginWithName: @"registerDispatcherParam" type: TType_STRUCT fieldID: 1];
      [__registerDispatcherParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerDispatcher_args("];
  [ms appendString: @"registerDispatcherParam:"];
  [ms appendFormat: @"%@", __registerDispatcherParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegisterDispatcher_result : NSObject <TBase, NSCoding> {
  RegisterDispatcherResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RegisterDispatcherResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (RegisterDispatcherResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RegisterDispatcherResponse *) success;
- (void) setSuccess: (RegisterDispatcherResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation RegisterDispatcher_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RegisterDispatcherResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegisterDispatcher_result class]]) {
    return NO;
  }
  RegisterDispatcher_result *other = (RegisterDispatcher_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (RegisterDispatcherResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RegisterDispatcherResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RegisterDispatcherResponse *fieldValue = [[RegisterDispatcherResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterDispatcher_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterDispatcher_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface activation_args : NSObject <TBase, NSCoding> {
  ActivationParam * __activationParam;

  BOOL __activationParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=activationParam, setter=setActivationParam:) ActivationParam * activationParam;
#endif

- (id) init;
- (id) initWithActivationParam: (ActivationParam *) activationParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ActivationParam *) activationParam;
- (void) setActivationParam: (ActivationParam *) activationParam;
#endif
- (BOOL) activationParamIsSet;

@end

@implementation activation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithActivationParam: (ActivationParam *) activationParam
{
  self = [super init];
  __activationParam = [activationParam retain_stub];
  __activationParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"activationParam"])
  {
    __activationParam = [[decoder decodeObjectForKey: @"activationParam"] retain_stub];
    __activationParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__activationParam_isset)
  {
    [encoder encodeObject: __activationParam forKey: @"activationParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __activationParam_isset ? 2654435761 : 0;
  if (__activationParam_isset)
  {
    hash = (hash * 31) ^ [__activationParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[activation_args class]]) {
    return NO;
  }
  activation_args *other = (activation_args *)anObject;
  if ((__activationParam_isset != other->__activationParam_isset) ||
      (__activationParam_isset && ((__activationParam || other->__activationParam) && ![__activationParam isEqual:other->__activationParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__activationParam release_stub];
  [super dealloc_stub];
}

- (ActivationParam *) activationParam {
  return [[__activationParam retain_stub] autorelease_stub];
}

- (void) setActivationParam: (ActivationParam *) activationParam {
  [activationParam retain_stub];
  [__activationParam release_stub];
  __activationParam = activationParam;
  __activationParam_isset = YES;
}

- (BOOL) activationParamIsSet {
  return __activationParam_isset;
}

- (void) unsetActivationParam {
  [__activationParam release_stub];
  __activationParam = nil;
  __activationParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ActivationParam *fieldValue = [[ActivationParam alloc] init];
          [fieldValue read: inProtocol];
          [self setActivationParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"activation_args"];
  if (__activationParam_isset) {
    if (__activationParam != nil) {
      [outProtocol writeFieldBeginWithName: @"activationParam" type: TType_STRUCT fieldID: 1];
      [__activationParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"activation_args("];
  [ms appendString: @"activationParam:"];
  [ms appendFormat: @"%@", __activationParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Activation_result : NSObject <TBase, NSCoding> {
  ActivationResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ActivationResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (ActivationResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ActivationResponse *) success;
- (void) setSuccess: (ActivationResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation Activation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ActivationResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Activation_result class]]) {
    return NO;
  }
  Activation_result *other = (Activation_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (ActivationResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ActivationResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ActivationResponse *fieldValue = [[ActivationResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Activation_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Activation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface login_args : NSObject <TBase, NSCoding> {
  LoginParam * __loginParam;

  BOOL __loginParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=loginParam, setter=setLoginParam:) LoginParam * loginParam;
#endif

- (id) init;
- (id) initWithLoginParam: (LoginParam *) loginParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginParam *) loginParam;
- (void) setLoginParam: (LoginParam *) loginParam;
#endif
- (BOOL) loginParamIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLoginParam: (LoginParam *) loginParam
{
  self = [super init];
  __loginParam = [loginParam retain_stub];
  __loginParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"loginParam"])
  {
    __loginParam = [[decoder decodeObjectForKey: @"loginParam"] retain_stub];
    __loginParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__loginParam_isset)
  {
    [encoder encodeObject: __loginParam forKey: @"loginParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __loginParam_isset ? 2654435761 : 0;
  if (__loginParam_isset)
  {
    hash = (hash * 31) ^ [__loginParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[login_args class]]) {
    return NO;
  }
  login_args *other = (login_args *)anObject;
  if ((__loginParam_isset != other->__loginParam_isset) ||
      (__loginParam_isset && ((__loginParam || other->__loginParam) && ![__loginParam isEqual:other->__loginParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__loginParam release_stub];
  [super dealloc_stub];
}

- (LoginParam *) loginParam {
  return [[__loginParam retain_stub] autorelease_stub];
}

- (void) setLoginParam: (LoginParam *) loginParam {
  [loginParam retain_stub];
  [__loginParam release_stub];
  __loginParam = loginParam;
  __loginParam_isset = YES;
}

- (BOOL) loginParamIsSet {
  return __loginParam_isset;
}

- (void) unsetLoginParam {
  [__loginParam release_stub];
  __loginParam = nil;
  __loginParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LoginParam *fieldValue = [[LoginParam alloc] init];
          [fieldValue read: inProtocol];
          [self setLoginParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__loginParam_isset) {
    if (__loginParam != nil) {
      [outProtocol writeFieldBeginWithName: @"loginParam" type: TType_STRUCT fieldID: 1];
      [__loginParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"loginParam:"];
  [ms appendFormat: @"%@", __loginParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  LoginResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResponse *) success;
- (void) setSuccess: (LoginResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Login_result class]]) {
    return NO;
  }
  Login_result *other = (Login_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (LoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResponse *fieldValue = [[LoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface clientSignature_args : NSObject <TBase, NSCoding> {
  SignatureParam * __signaturenParam;

  BOOL __signaturenParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=signaturenParam, setter=setSignaturenParam:) SignatureParam * signaturenParam;
#endif

- (id) init;
- (id) initWithSignaturenParam: (SignatureParam *) signaturenParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SignatureParam *) signaturenParam;
- (void) setSignaturenParam: (SignatureParam *) signaturenParam;
#endif
- (BOOL) signaturenParamIsSet;

@end

@implementation clientSignature_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSignaturenParam: (SignatureParam *) signaturenParam
{
  self = [super init];
  __signaturenParam = [signaturenParam retain_stub];
  __signaturenParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"signaturenParam"])
  {
    __signaturenParam = [[decoder decodeObjectForKey: @"signaturenParam"] retain_stub];
    __signaturenParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__signaturenParam_isset)
  {
    [encoder encodeObject: __signaturenParam forKey: @"signaturenParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __signaturenParam_isset ? 2654435761 : 0;
  if (__signaturenParam_isset)
  {
    hash = (hash * 31) ^ [__signaturenParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[clientSignature_args class]]) {
    return NO;
  }
  clientSignature_args *other = (clientSignature_args *)anObject;
  if ((__signaturenParam_isset != other->__signaturenParam_isset) ||
      (__signaturenParam_isset && ((__signaturenParam || other->__signaturenParam) && ![__signaturenParam isEqual:other->__signaturenParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__signaturenParam release_stub];
  [super dealloc_stub];
}

- (SignatureParam *) signaturenParam {
  return [[__signaturenParam retain_stub] autorelease_stub];
}

- (void) setSignaturenParam: (SignatureParam *) signaturenParam {
  [signaturenParam retain_stub];
  [__signaturenParam release_stub];
  __signaturenParam = signaturenParam;
  __signaturenParam_isset = YES;
}

- (BOOL) signaturenParamIsSet {
  return __signaturenParam_isset;
}

- (void) unsetSignaturenParam {
  [__signaturenParam release_stub];
  __signaturenParam = nil;
  __signaturenParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SignatureParam *fieldValue = [[SignatureParam alloc] init];
          [fieldValue read: inProtocol];
          [self setSignaturenParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"clientSignature_args"];
  if (__signaturenParam_isset) {
    if (__signaturenParam != nil) {
      [outProtocol writeFieldBeginWithName: @"signaturenParam" type: TType_STRUCT fieldID: 1];
      [__signaturenParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"clientSignature_args("];
  [ms appendString: @"signaturenParam:"];
  [ms appendFormat: @"%@", __signaturenParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ClientSignature_result : NSObject <TBase, NSCoding> {
  SignatureResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SignatureResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (SignatureResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SignatureResponse *) success;
- (void) setSuccess: (SignatureResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation ClientSignature_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SignatureResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ClientSignature_result class]]) {
    return NO;
  }
  ClientSignature_result *other = (ClientSignature_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (SignatureResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SignatureResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SignatureResponse *fieldValue = [[SignatureResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ClientSignature_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ClientSignature_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getTemplateFromId_args : NSObject <TBase, NSCoding> {
  int32_t __id;

  BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getTemplateFromId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getTemplateFromId_args class]]) {
    return NO;
  }
  getTemplateFromId_args *other = (getTemplateFromId_args *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getTemplateFromId_args"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getTemplateFromId_args("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetTemplateFromId_result : NSObject <TBase, NSCoding> {
  Template * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Template * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (Template *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Template *) success;
- (void) setSuccess: (Template *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetTemplateFromId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Template *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetTemplateFromId_result class]]) {
    return NO;
  }
  GetTemplateFromId_result *other = (GetTemplateFromId_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (Template *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Template *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Template *fieldValue = [[Template alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTemplateFromId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTemplateFromId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendMessage_args : NSObject <TBase, NSCoding> {
  AppMessage * __appMessage;

  BOOL __appMessage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=appMessage, setter=setAppMessage:) AppMessage * appMessage;
#endif

- (id) init;
- (id) initWithAppMessage: (AppMessage *) appMessage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppMessage *) appMessage;
- (void) setAppMessage: (AppMessage *) appMessage;
#endif
- (BOOL) appMessageIsSet;

@end

@implementation sendMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppMessage: (AppMessage *) appMessage
{
  self = [super init];
  __appMessage = [appMessage retain_stub];
  __appMessage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appMessage"])
  {
    __appMessage = [[decoder decodeObjectForKey: @"appMessage"] retain_stub];
    __appMessage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appMessage_isset)
  {
    [encoder encodeObject: __appMessage forKey: @"appMessage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appMessage_isset ? 2654435761 : 0;
  if (__appMessage_isset)
  {
    hash = (hash * 31) ^ [__appMessage hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[sendMessage_args class]]) {
    return NO;
  }
  sendMessage_args *other = (sendMessage_args *)anObject;
  if ((__appMessage_isset != other->__appMessage_isset) ||
      (__appMessage_isset && ((__appMessage || other->__appMessage) && ![__appMessage isEqual:other->__appMessage]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__appMessage release_stub];
  [super dealloc_stub];
}

- (AppMessage *) appMessage {
  return [[__appMessage retain_stub] autorelease_stub];
}

- (void) setAppMessage: (AppMessage *) appMessage {
  [appMessage retain_stub];
  [__appMessage release_stub];
  __appMessage = appMessage;
  __appMessage_isset = YES;
}

- (BOOL) appMessageIsSet {
  return __appMessage_isset;
}

- (void) unsetAppMessage {
  [__appMessage release_stub];
  __appMessage = nil;
  __appMessage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppMessage *fieldValue = [[AppMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setAppMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendMessage_args"];
  if (__appMessage_isset) {
    if (__appMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"appMessage" type: TType_STRUCT fieldID: 1];
      [__appMessage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendMessage_args("];
  [ms appendString: @"appMessage:"];
  [ms appendFormat: @"%@", __appMessage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendMessage_result : NSObject <TBase, NSCoding> {
  BOOL __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation SendMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SendMessage_result class]]) {
    return NO;
  }
  SendMessage_result *other = (SendMessage_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendMessage_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendMessageResponse_args : NSObject <TBase, NSCoding> {
  AppMessageResponse * __appMessageResponse;

  BOOL __appMessageResponse_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=appMessageResponse, setter=setAppMessageResponse:) AppMessageResponse * appMessageResponse;
#endif

- (id) init;
- (id) initWithAppMessageResponse: (AppMessageResponse *) appMessageResponse;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppMessageResponse *) appMessageResponse;
- (void) setAppMessageResponse: (AppMessageResponse *) appMessageResponse;
#endif
- (BOOL) appMessageResponseIsSet;

@end

@implementation sendMessageResponse_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppMessageResponse: (AppMessageResponse *) appMessageResponse
{
  self = [super init];
  __appMessageResponse = [appMessageResponse retain_stub];
  __appMessageResponse_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appMessageResponse"])
  {
    __appMessageResponse = [[decoder decodeObjectForKey: @"appMessageResponse"] retain_stub];
    __appMessageResponse_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appMessageResponse_isset)
  {
    [encoder encodeObject: __appMessageResponse forKey: @"appMessageResponse"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appMessageResponse_isset ? 2654435761 : 0;
  if (__appMessageResponse_isset)
  {
    hash = (hash * 31) ^ [__appMessageResponse hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[sendMessageResponse_args class]]) {
    return NO;
  }
  sendMessageResponse_args *other = (sendMessageResponse_args *)anObject;
  if ((__appMessageResponse_isset != other->__appMessageResponse_isset) ||
      (__appMessageResponse_isset && ((__appMessageResponse || other->__appMessageResponse) && ![__appMessageResponse isEqual:other->__appMessageResponse]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__appMessageResponse release_stub];
  [super dealloc_stub];
}

- (AppMessageResponse *) appMessageResponse {
  return [[__appMessageResponse retain_stub] autorelease_stub];
}

- (void) setAppMessageResponse: (AppMessageResponse *) appMessageResponse {
  [appMessageResponse retain_stub];
  [__appMessageResponse release_stub];
  __appMessageResponse = appMessageResponse;
  __appMessageResponse_isset = YES;
}

- (BOOL) appMessageResponseIsSet {
  return __appMessageResponse_isset;
}

- (void) unsetAppMessageResponse {
  [__appMessageResponse release_stub];
  __appMessageResponse = nil;
  __appMessageResponse_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppMessageResponse *fieldValue = [[AppMessageResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setAppMessageResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendMessageResponse_args"];
  if (__appMessageResponse_isset) {
    if (__appMessageResponse != nil) {
      [outProtocol writeFieldBeginWithName: @"appMessageResponse" type: TType_STRUCT fieldID: 1];
      [__appMessageResponse write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendMessageResponse_args("];
  [ms appendString: @"appMessageResponse:"];
  [ms appendFormat: @"%@", __appMessageResponse];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendMessageResponse_result : NSObject <TBase, NSCoding> {
  AppException * __ouch;

  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithOuch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation SendMessageResponse_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOuch: (AppException *) ouch
{
  self = [super init];
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SendMessageResponse_result class]]) {
    return NO;
  }
  SendMessageResponse_result *other = (SendMessageResponse_result *)anObject;
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendMessageResponse_result"];

  if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendMessageResponse_result("];
  [ms appendString: @"ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendLoginQrCode_args : NSObject <TBase, NSCoding> {
  NSString * __data;

  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=data, setter=setData:) NSString * data;
#endif

- (id) init;
- (id) initWithData: (NSString *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) data;
- (void) setData: (NSString *) data;
#endif
- (BOOL) dataIsSet;

@end

@implementation sendLoginQrCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (NSString *) data
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[sendLoginQrCode_args class]]) {
    return NO;
  }
  sendLoginQrCode_args *other = (sendLoginQrCode_args *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (NSString *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSString *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendLoginQrCode_args"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendLoginQrCode_args("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendLoginQrCode_result : NSObject <TBase, NSCoding> {
  AppException * __ouch;

  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithOuch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation SendLoginQrCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOuch: (AppException *) ouch
{
  self = [super init];
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SendLoginQrCode_result class]]) {
    return NO;
  }
  SendLoginQrCode_result *other = (SendLoginQrCode_result *)anObject;
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendLoginQrCode_result"];

  if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendLoginQrCode_result("];
  [ms appendString: @"ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getLoginQrCode_args : NSObject <TBase, NSCoding> {
  NSString * __operatorId;
  NSString * __sessionId;

  BOOL __operatorId_isset;
  BOOL __sessionId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=operatorId, setter=setOperatorId:) NSString * operatorId;
@property (nonatomic, retain, getter=sessionId, setter=setSessionId:) NSString * sessionId;
#endif

- (id) init;
- (id) initWithOperatorId: (NSString *) operatorId sessionId: (NSString *) sessionId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) operatorId;
- (void) setOperatorId: (NSString *) operatorId;
#endif
- (BOOL) operatorIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) sessionId;
- (void) setSessionId: (NSString *) sessionId;
#endif
- (BOOL) sessionIdIsSet;

@end

@implementation getLoginQrCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOperatorId: (NSString *) operatorId sessionId: (NSString *) sessionId
{
  self = [super init];
  __operatorId = [operatorId retain_stub];
  __operatorId_isset = YES;
  __sessionId = [sessionId retain_stub];
  __sessionId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"operatorId"])
  {
    __operatorId = [[decoder decodeObjectForKey: @"operatorId"] retain_stub];
    __operatorId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionId"])
  {
    __sessionId = [[decoder decodeObjectForKey: @"sessionId"] retain_stub];
    __sessionId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__operatorId_isset)
  {
    [encoder encodeObject: __operatorId forKey: @"operatorId"];
  }
  if (__sessionId_isset)
  {
    [encoder encodeObject: __sessionId forKey: @"sessionId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __operatorId_isset ? 2654435761 : 0;
  if (__operatorId_isset)
  {
    hash = (hash * 31) ^ [__operatorId hash];
  }
  hash = (hash * 31) ^ __sessionId_isset ? 2654435761 : 0;
  if (__sessionId_isset)
  {
    hash = (hash * 31) ^ [__sessionId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getLoginQrCode_args class]]) {
    return NO;
  }
  getLoginQrCode_args *other = (getLoginQrCode_args *)anObject;
  if ((__operatorId_isset != other->__operatorId_isset) ||
      (__operatorId_isset && ((__operatorId || other->__operatorId) && ![__operatorId isEqual:other->__operatorId]))) {
    return NO;
  }
  if ((__sessionId_isset != other->__sessionId_isset) ||
      (__sessionId_isset && ((__sessionId || other->__sessionId) && ![__sessionId isEqual:other->__sessionId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__operatorId release_stub];
  [__sessionId release_stub];
  [super dealloc_stub];
}

- (NSString *) operatorId {
  return [[__operatorId retain_stub] autorelease_stub];
}

- (void) setOperatorId: (NSString *) operatorId {
  [operatorId retain_stub];
  [__operatorId release_stub];
  __operatorId = operatorId;
  __operatorId_isset = YES;
}

- (BOOL) operatorIdIsSet {
  return __operatorId_isset;
}

- (void) unsetOperatorId {
  [__operatorId release_stub];
  __operatorId = nil;
  __operatorId_isset = NO;
}

- (NSString *) sessionId {
  return [[__sessionId retain_stub] autorelease_stub];
}

- (void) setSessionId: (NSString *) sessionId {
  [sessionId retain_stub];
  [__sessionId release_stub];
  __sessionId = sessionId;
  __sessionId_isset = YES;
}

- (BOOL) sessionIdIsSet {
  return __sessionId_isset;
}

- (void) unsetSessionId {
  [__sessionId release_stub];
  __sessionId = nil;
  __sessionId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperatorId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLoginQrCode_args"];
  if (__operatorId_isset) {
    if (__operatorId != nil) {
      [outProtocol writeFieldBeginWithName: @"operatorId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __operatorId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionId_isset) {
    if (__sessionId != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sessionId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLoginQrCode_args("];
  [ms appendString: @"operatorId:"];
  [ms appendFormat: @"\"%@\"", __operatorId];
  [ms appendString: @",sessionId:"];
  [ms appendFormat: @"\"%@\"", __sessionId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLoginQrCode_result : NSObject <TBase, NSCoding> {
  QrCodeResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QrCodeResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (QrCodeResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QrCodeResponse *) success;
- (void) setSuccess: (QrCodeResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetLoginQrCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QrCodeResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetLoginQrCode_result class]]) {
    return NO;
  }
  GetLoginQrCode_result *other = (GetLoginQrCode_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (QrCodeResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QrCodeResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QrCodeResponse *fieldValue = [[QrCodeResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLoginQrCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLoginQrCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface changePassword_args : NSObject <TBase, NSCoding> {
  NSData * __encPassword;
  NSData * __newEncPassword;

  BOOL __encPassword_isset;
  BOOL __newEncPassword_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=encPassword, setter=setEncPassword:) NSData * encPassword;
@property (nonatomic, retain, getter=newEncPassword, setter=setNewEncPassword:) NSData * newEncPassword;
#endif

- (id) init;
- (id) initWithEncPassword: (NSData *) encPassword newEncPassword: (NSData *) newEncPassword;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) encPassword;
- (void) setEncPassword: (NSData *) encPassword;
#endif
- (BOOL) encPasswordIsSet;

#if !__has_feature(objc_arc)
- (NSData *) newEncPassword;
- (void) setNewEncPassword: (NSData *) newEncPassword;
#endif
- (BOOL) newEncPasswordIsSet;

@end

@implementation changePassword_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEncPassword: (NSData *) encPassword newEncPassword: (NSData *) newEncPassword
{
  self = [super init];
  __encPassword = [encPassword retain_stub];
  __encPassword_isset = YES;
  __newEncPassword = [newEncPassword retain_stub];
  __newEncPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"encPassword"])
  {
    __encPassword = [[decoder decodeObjectForKey: @"encPassword"] retain_stub];
    __encPassword_isset = YES;
  }
  if ([decoder containsValueForKey: @"newEncPassword"])
  {
    __newEncPassword = [[decoder decodeObjectForKey: @"newEncPassword"] retain_stub];
    __newEncPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__encPassword_isset)
  {
    [encoder encodeObject: __encPassword forKey: @"encPassword"];
  }
  if (__newEncPassword_isset)
  {
    [encoder encodeObject: __newEncPassword forKey: @"newEncPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __encPassword_isset ? 2654435761 : 0;
  if (__encPassword_isset)
  {
    hash = (hash * 31) ^ [__encPassword hash];
  }
  hash = (hash * 31) ^ __newEncPassword_isset ? 2654435761 : 0;
  if (__newEncPassword_isset)
  {
    hash = (hash * 31) ^ [__newEncPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[changePassword_args class]]) {
    return NO;
  }
  changePassword_args *other = (changePassword_args *)anObject;
  if ((__encPassword_isset != other->__encPassword_isset) ||
      (__encPassword_isset && ((__encPassword || other->__encPassword) && ![__encPassword isEqual:other->__encPassword]))) {
    return NO;
  }
  if ((__newEncPassword_isset != other->__newEncPassword_isset) ||
      (__newEncPassword_isset && ((__newEncPassword || other->__newEncPassword) && ![__newEncPassword isEqual:other->__newEncPassword]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__encPassword release_stub];
  [__newEncPassword release_stub];
  [super dealloc_stub];
}

- (NSData *) encPassword {
  return [[__encPassword retain_stub] autorelease_stub];
}

- (void) setEncPassword: (NSData *) encPassword {
  [encPassword retain_stub];
  [__encPassword release_stub];
  __encPassword = encPassword;
  __encPassword_isset = YES;
}

- (BOOL) encPasswordIsSet {
  return __encPassword_isset;
}

- (void) unsetEncPassword {
  [__encPassword release_stub];
  __encPassword = nil;
  __encPassword_isset = NO;
}

- (NSData *) newEncPassword {
  return [[__newEncPassword retain_stub] autorelease_stub];
}

- (void) setNewEncPassword: (NSData *) newEncPassword {
  [newEncPassword retain_stub];
  [__newEncPassword release_stub];
  __newEncPassword = newEncPassword;
  __newEncPassword_isset = YES;
}

- (BOOL) newEncPasswordIsSet {
  return __newEncPassword_isset;
}

- (void) unsetNewEncPassword {
  [__newEncPassword release_stub];
  __newEncPassword = nil;
  __newEncPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setEncPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setNewEncPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"changePassword_args"];
  if (__encPassword_isset) {
    if (__encPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __encPassword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newEncPassword_isset) {
    if (__newEncPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"newEncPassword" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __newEncPassword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"changePassword_args("];
  [ms appendString: @"encPassword:"];
  [ms appendFormat: @"\"%@\"", __encPassword];
  [ms appendString: @",newEncPassword:"];
  [ms appendFormat: @"\"%@\"", __newEncPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChangePassword_result : NSObject <TBase, NSCoding> {
  AppException * __ouch;

  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithOuch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation ChangePassword_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOuch: (AppException *) ouch
{
  self = [super init];
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ChangePassword_result class]]) {
    return NO;
  }
  ChangePassword_result *other = (ChangePassword_result *)anObject;
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChangePassword_result"];

  if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChangePassword_result("];
  [ms appendString: @"ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCloudSafe_args : NSObject <TBase, NSCoding> {
  SdkCloudSafeKey * __uniqueKey;
  NSString * __userLoginId;

  BOOL __uniqueKey_isset;
  BOOL __userLoginId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uniqueKey, setter=setUniqueKey:) SdkCloudSafeKey * uniqueKey;
@property (nonatomic, retain, getter=userLoginId, setter=setUserLoginId:) NSString * userLoginId;
#endif

- (id) init;
- (id) initWithUniqueKey: (SdkCloudSafeKey *) uniqueKey userLoginId: (NSString *) userLoginId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SdkCloudSafeKey *) uniqueKey;
- (void) setUniqueKey: (SdkCloudSafeKey *) uniqueKey;
#endif
- (BOOL) uniqueKeyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userLoginId;
- (void) setUserLoginId: (NSString *) userLoginId;
#endif
- (BOOL) userLoginIdIsSet;

@end

@implementation getCloudSafe_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUniqueKey: (SdkCloudSafeKey *) uniqueKey userLoginId: (NSString *) userLoginId
{
  self = [super init];
  __uniqueKey = [uniqueKey retain_stub];
  __uniqueKey_isset = YES;
  __userLoginId = [userLoginId retain_stub];
  __userLoginId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uniqueKey"])
  {
    __uniqueKey = [[decoder decodeObjectForKey: @"uniqueKey"] retain_stub];
    __uniqueKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"userLoginId"])
  {
    __userLoginId = [[decoder decodeObjectForKey: @"userLoginId"] retain_stub];
    __userLoginId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uniqueKey_isset)
  {
    [encoder encodeObject: __uniqueKey forKey: @"uniqueKey"];
  }
  if (__userLoginId_isset)
  {
    [encoder encodeObject: __userLoginId forKey: @"userLoginId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uniqueKey_isset ? 2654435761 : 0;
  if (__uniqueKey_isset)
  {
    hash = (hash * 31) ^ [__uniqueKey hash];
  }
  hash = (hash * 31) ^ __userLoginId_isset ? 2654435761 : 0;
  if (__userLoginId_isset)
  {
    hash = (hash * 31) ^ [__userLoginId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getCloudSafe_args class]]) {
    return NO;
  }
  getCloudSafe_args *other = (getCloudSafe_args *)anObject;
  if ((__uniqueKey_isset != other->__uniqueKey_isset) ||
      (__uniqueKey_isset && ((__uniqueKey || other->__uniqueKey) && ![__uniqueKey isEqual:other->__uniqueKey]))) {
    return NO;
  }
  if ((__userLoginId_isset != other->__userLoginId_isset) ||
      (__userLoginId_isset && ((__userLoginId || other->__userLoginId) && ![__userLoginId isEqual:other->__userLoginId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uniqueKey release_stub];
  [__userLoginId release_stub];
  [super dealloc_stub];
}

- (SdkCloudSafeKey *) uniqueKey {
  return [[__uniqueKey retain_stub] autorelease_stub];
}

- (void) setUniqueKey: (SdkCloudSafeKey *) uniqueKey {
  [uniqueKey retain_stub];
  [__uniqueKey release_stub];
  __uniqueKey = uniqueKey;
  __uniqueKey_isset = YES;
}

- (BOOL) uniqueKeyIsSet {
  return __uniqueKey_isset;
}

- (void) unsetUniqueKey {
  [__uniqueKey release_stub];
  __uniqueKey = nil;
  __uniqueKey_isset = NO;
}

- (NSString *) userLoginId {
  return [[__userLoginId retain_stub] autorelease_stub];
}

- (void) setUserLoginId: (NSString *) userLoginId {
  [userLoginId retain_stub];
  [__userLoginId release_stub];
  __userLoginId = userLoginId;
  __userLoginId_isset = YES;
}

- (BOOL) userLoginIdIsSet {
  return __userLoginId_isset;
}

- (void) unsetUserLoginId {
  [__userLoginId release_stub];
  __userLoginId = nil;
  __userLoginId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SdkCloudSafeKey *fieldValue = [[SdkCloudSafeKey alloc] init];
          [fieldValue read: inProtocol];
          [self setUniqueKey: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserLoginId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCloudSafe_args"];
  if (__uniqueKey_isset) {
    if (__uniqueKey != nil) {
      [outProtocol writeFieldBeginWithName: @"uniqueKey" type: TType_STRUCT fieldID: 1];
      [__uniqueKey write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userLoginId_isset) {
    if (__userLoginId != nil) {
      [outProtocol writeFieldBeginWithName: @"userLoginId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userLoginId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCloudSafe_args("];
  [ms appendString: @"uniqueKey:"];
  [ms appendFormat: @"%@", __uniqueKey];
  [ms appendString: @",userLoginId:"];
  [ms appendFormat: @"\"%@\"", __userLoginId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCloudSafe_result : NSObject <TBase, NSCoding> {
  SdkCloudSafe * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SdkCloudSafe * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (SdkCloudSafe *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SdkCloudSafe *) success;
- (void) setSuccess: (SdkCloudSafe *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetCloudSafe_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SdkCloudSafe *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetCloudSafe_result class]]) {
    return NO;
  }
  GetCloudSafe_result *other = (GetCloudSafe_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (SdkCloudSafe *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SdkCloudSafe *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SdkCloudSafe *fieldValue = [[SdkCloudSafe alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCloudSafe_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCloudSafe_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setCloudSafe_args : NSObject <TBase, NSCoding> {
  SdkCloudSafe * __sdkCloudSafe;

  BOOL __sdkCloudSafe_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sdkCloudSafe, setter=setSdkCloudSafe:) SdkCloudSafe * sdkCloudSafe;
#endif

- (id) init;
- (id) initWithSdkCloudSafe: (SdkCloudSafe *) sdkCloudSafe;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SdkCloudSafe *) sdkCloudSafe;
- (void) setSdkCloudSafe: (SdkCloudSafe *) sdkCloudSafe;
#endif
- (BOOL) sdkCloudSafeIsSet;

@end

@implementation setCloudSafe_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSdkCloudSafe: (SdkCloudSafe *) sdkCloudSafe
{
  self = [super init];
  __sdkCloudSafe = [sdkCloudSafe retain_stub];
  __sdkCloudSafe_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sdkCloudSafe"])
  {
    __sdkCloudSafe = [[decoder decodeObjectForKey: @"sdkCloudSafe"] retain_stub];
    __sdkCloudSafe_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sdkCloudSafe_isset)
  {
    [encoder encodeObject: __sdkCloudSafe forKey: @"sdkCloudSafe"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sdkCloudSafe_isset ? 2654435761 : 0;
  if (__sdkCloudSafe_isset)
  {
    hash = (hash * 31) ^ [__sdkCloudSafe hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[setCloudSafe_args class]]) {
    return NO;
  }
  setCloudSafe_args *other = (setCloudSafe_args *)anObject;
  if ((__sdkCloudSafe_isset != other->__sdkCloudSafe_isset) ||
      (__sdkCloudSafe_isset && ((__sdkCloudSafe || other->__sdkCloudSafe) && ![__sdkCloudSafe isEqual:other->__sdkCloudSafe]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sdkCloudSafe release_stub];
  [super dealloc_stub];
}

- (SdkCloudSafe *) sdkCloudSafe {
  return [[__sdkCloudSafe retain_stub] autorelease_stub];
}

- (void) setSdkCloudSafe: (SdkCloudSafe *) sdkCloudSafe {
  [sdkCloudSafe retain_stub];
  [__sdkCloudSafe release_stub];
  __sdkCloudSafe = sdkCloudSafe;
  __sdkCloudSafe_isset = YES;
}

- (BOOL) sdkCloudSafeIsSet {
  return __sdkCloudSafe_isset;
}

- (void) unsetSdkCloudSafe {
  [__sdkCloudSafe release_stub];
  __sdkCloudSafe = nil;
  __sdkCloudSafe_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SdkCloudSafe *fieldValue = [[SdkCloudSafe alloc] init];
          [fieldValue read: inProtocol];
          [self setSdkCloudSafe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setCloudSafe_args"];
  if (__sdkCloudSafe_isset) {
    if (__sdkCloudSafe != nil) {
      [outProtocol writeFieldBeginWithName: @"sdkCloudSafe" type: TType_STRUCT fieldID: 1];
      [__sdkCloudSafe write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setCloudSafe_args("];
  [ms appendString: @"sdkCloudSafe:"];
  [ms appendFormat: @"%@", __sdkCloudSafe];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetCloudSafe_result : NSObject <TBase, NSCoding> {
  int64_t __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int64_t success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (int64_t) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) success;
- (void) setSuccess: (int64_t) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation SetCloudSafe_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int64_t) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt64ForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt64: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetCloudSafe_result class]]) {
    return NO;
  }
  SetCloudSafe_result *other = (SetCloudSafe_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (int64_t) success {
  return __success;
}

- (void) setSuccess: (int64_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetCloudSafe_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
    [outProtocol writeI64: __success];
    [outProtocol writeFieldEnd];
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetCloudSafe_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCloudSafeList_args : NSObject <TBase, NSCoding> {
  NSString * __nameFilter;
  BOOL __includeShare;
  int64_t __modifiedFromEpoch;
  int __owner;

  BOOL __nameFilter_isset;
  BOOL __includeShare_isset;
  BOOL __modifiedFromEpoch_isset;
  BOOL __owner_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=nameFilter, setter=setNameFilter:) NSString * nameFilter;
@property (nonatomic, getter=includeShare, setter=setIncludeShare:) BOOL includeShare;
@property (nonatomic, getter=modifiedFromEpoch, setter=setModifiedFromEpoch:) int64_t modifiedFromEpoch;
@property (nonatomic, getter=owner, setter=setOwner:) int owner;
#endif

- (id) init;
- (id) initWithNameFilter: (NSString *) nameFilter includeShare: (BOOL) includeShare modifiedFromEpoch: (int64_t) modifiedFromEpoch owner: (int) owner;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) nameFilter;
- (void) setNameFilter: (NSString *) nameFilter;
#endif
- (BOOL) nameFilterIsSet;

#if !__has_feature(objc_arc)
- (BOOL) includeShare;
- (void) setIncludeShare: (BOOL) includeShare;
#endif
- (BOOL) includeShareIsSet;

#if !__has_feature(objc_arc)
- (int64_t) modifiedFromEpoch;
- (void) setModifiedFromEpoch: (int64_t) modifiedFromEpoch;
#endif
- (BOOL) modifiedFromEpochIsSet;

#if !__has_feature(objc_arc)
- (int) owner;
- (void) setOwner: (int) owner;
#endif
- (BOOL) ownerIsSet;

@end

@implementation getCloudSafeList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNameFilter: (NSString *) nameFilter includeShare: (BOOL) includeShare modifiedFromEpoch: (int64_t) modifiedFromEpoch owner: (int) owner
{
  self = [super init];
  __nameFilter = [nameFilter retain_stub];
  __nameFilter_isset = YES;
  __includeShare = includeShare;
  __includeShare_isset = YES;
  __modifiedFromEpoch = modifiedFromEpoch;
  __modifiedFromEpoch_isset = YES;
  __owner = owner;
  __owner_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"nameFilter"])
  {
    __nameFilter = [[decoder decodeObjectForKey: @"nameFilter"] retain_stub];
    __nameFilter_isset = YES;
  }
  if ([decoder containsValueForKey: @"includeShare"])
  {
    __includeShare = [decoder decodeBoolForKey: @"includeShare"];
    __includeShare_isset = YES;
  }
  if ([decoder containsValueForKey: @"modifiedFromEpoch"])
  {
    __modifiedFromEpoch = [decoder decodeInt64ForKey: @"modifiedFromEpoch"];
    __modifiedFromEpoch_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [decoder decodeIntForKey: @"owner"];
    __owner_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__nameFilter_isset)
  {
    [encoder encodeObject: __nameFilter forKey: @"nameFilter"];
  }
  if (__includeShare_isset)
  {
    [encoder encodeBool: __includeShare forKey: @"includeShare"];
  }
  if (__modifiedFromEpoch_isset)
  {
    [encoder encodeInt64: __modifiedFromEpoch forKey: @"modifiedFromEpoch"];
  }
  if (__owner_isset)
  {
    [encoder encodeInt: __owner forKey: @"owner"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __nameFilter_isset ? 2654435761 : 0;
  if (__nameFilter_isset)
  {
    hash = (hash * 31) ^ [__nameFilter hash];
  }
  hash = (hash * 31) ^ __includeShare_isset ? 2654435761 : 0;
  if (__includeShare_isset)
  {
    hash = (hash * 31) ^ [@(__includeShare) hash];
  }
  hash = (hash * 31) ^ __modifiedFromEpoch_isset ? 2654435761 : 0;
  if (__modifiedFromEpoch_isset)
  {
    hash = (hash * 31) ^ [@(__modifiedFromEpoch) hash];
  }
  hash = (hash * 31) ^ __owner_isset ? 2654435761 : 0;
  if (__owner_isset)
  {
    hash = (hash * 31) ^ [@(__owner) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getCloudSafeList_args class]]) {
    return NO;
  }
  getCloudSafeList_args *other = (getCloudSafeList_args *)anObject;
  if ((__nameFilter_isset != other->__nameFilter_isset) ||
      (__nameFilter_isset && ((__nameFilter || other->__nameFilter) && ![__nameFilter isEqual:other->__nameFilter]))) {
    return NO;
  }
  if ((__includeShare_isset != other->__includeShare_isset) ||
      (__includeShare_isset && (__includeShare != other->__includeShare))) {
    return NO;
  }
  if ((__modifiedFromEpoch_isset != other->__modifiedFromEpoch_isset) ||
      (__modifiedFromEpoch_isset && (__modifiedFromEpoch != other->__modifiedFromEpoch))) {
    return NO;
  }
  if ((__owner_isset != other->__owner_isset) ||
      (__owner_isset && (__owner != other->__owner))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__nameFilter release_stub];
  [super dealloc_stub];
}

- (NSString *) nameFilter {
  return [[__nameFilter retain_stub] autorelease_stub];
}

- (void) setNameFilter: (NSString *) nameFilter {
  [nameFilter retain_stub];
  [__nameFilter release_stub];
  __nameFilter = nameFilter;
  __nameFilter_isset = YES;
}

- (BOOL) nameFilterIsSet {
  return __nameFilter_isset;
}

- (void) unsetNameFilter {
  [__nameFilter release_stub];
  __nameFilter = nil;
  __nameFilter_isset = NO;
}

- (BOOL) includeShare {
  return __includeShare;
}

- (void) setIncludeShare: (BOOL) includeShare {
  __includeShare = includeShare;
  __includeShare_isset = YES;
}

- (BOOL) includeShareIsSet {
  return __includeShare_isset;
}

- (void) unsetIncludeShare {
  __includeShare_isset = NO;
}

- (int64_t) modifiedFromEpoch {
  return __modifiedFromEpoch;
}

- (void) setModifiedFromEpoch: (int64_t) modifiedFromEpoch {
  __modifiedFromEpoch = modifiedFromEpoch;
  __modifiedFromEpoch_isset = YES;
}

- (BOOL) modifiedFromEpochIsSet {
  return __modifiedFromEpoch_isset;
}

- (void) unsetModifiedFromEpoch {
  __modifiedFromEpoch_isset = NO;
}

- (int) owner {
  return __owner;
}

- (void) setOwner: (int) owner {
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  __owner_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNameFilter: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludeShare: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setModifiedFromEpoch: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCloudSafeList_args"];
  if (__nameFilter_isset) {
    if (__nameFilter != nil) {
      [outProtocol writeFieldBeginWithName: @"nameFilter" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __nameFilter];
      [outProtocol writeFieldEnd];
    }
  }
  if (__includeShare_isset) {
    [outProtocol writeFieldBeginWithName: @"includeShare" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __includeShare];
    [outProtocol writeFieldEnd];
  }
  if (__modifiedFromEpoch_isset) {
    [outProtocol writeFieldBeginWithName: @"modifiedFromEpoch" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __modifiedFromEpoch];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    [outProtocol writeFieldBeginWithName: @"owner" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __owner];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCloudSafeList_args("];
  [ms appendString: @"nameFilter:"];
  [ms appendFormat: @"\"%@\"", __nameFilter];
  [ms appendString: @",includeShare:"];
  [ms appendFormat: @"%i", __includeShare];
  [ms appendString: @",modifiedFromEpoch:"];
  [ms appendFormat: @"%qi", __modifiedFromEpoch];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%i", __owner];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCloudSafeList_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetCloudSafeList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetCloudSafeList_result class]]) {
    return NO;
  }
  GetCloudSafeList_result *other = (GetCloudSafeList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            SdkCloudSafe *_elem23 = [[SdkCloudSafe alloc] init];
            [_elem23 read: inProtocol];
            [fieldValue addObject: _elem23];
            [_elem23 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCloudSafeList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx25;
        for (idx25 = 0; idx25 < [__success count]; idx25++)
        {
          [[__success objectAtIndex: idx25] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCloudSafeList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface disconnect_args : NSObject <TBase, NSCoding> {
  int __appErrorCodes;
  NSString * __message;

  BOOL __appErrorCodes_isset;
  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=appErrorCodes, setter=setAppErrorCodes:) int appErrorCodes;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithAppErrorCodes: (int) appErrorCodes message: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) appErrorCodes;
- (void) setAppErrorCodes: (int) appErrorCodes;
#endif
- (BOOL) appErrorCodesIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@implementation disconnect_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppErrorCodes: (int) appErrorCodes message: (NSString *) message
{
  self = [super init];
  __appErrorCodes = appErrorCodes;
  __appErrorCodes_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appErrorCodes"])
  {
    __appErrorCodes = [decoder decodeIntForKey: @"appErrorCodes"];
    __appErrorCodes_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appErrorCodes_isset)
  {
    [encoder encodeInt: __appErrorCodes forKey: @"appErrorCodes"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appErrorCodes_isset ? 2654435761 : 0;
  if (__appErrorCodes_isset)
  {
    hash = (hash * 31) ^ [@(__appErrorCodes) hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[disconnect_args class]]) {
    return NO;
  }
  disconnect_args *other = (disconnect_args *)anObject;
  if ((__appErrorCodes_isset != other->__appErrorCodes_isset) ||
      (__appErrorCodes_isset && (__appErrorCodes != other->__appErrorCodes))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int) appErrorCodes {
  return __appErrorCodes;
}

- (void) setAppErrorCodes: (int) appErrorCodes {
  __appErrorCodes = appErrorCodes;
  __appErrorCodes_isset = YES;
}

- (BOOL) appErrorCodesIsSet {
  return __appErrorCodes_isset;
}

- (void) unsetAppErrorCodes {
  __appErrorCodes_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setAppErrorCodes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"disconnect_args"];
  if (__appErrorCodes_isset) {
    [outProtocol writeFieldBeginWithName: @"appErrorCodes" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __appErrorCodes];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"disconnect_args("];
  [ms appendString: @"appErrorCodes:"];
  [ms appendFormat: @"%i", __appErrorCodes];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Disconnect_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation Disconnect_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Disconnect_result class]]) {
    return NO;
  }
  Disconnect_result *other = (Disconnect_result *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Disconnect_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Disconnect_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface keepAlive_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation keepAlive_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[keepAlive_args class]]) {
    return NO;
  }
  keepAlive_args *other = (keepAlive_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"keepAlive_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"keepAlive_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface KeepAlive_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation KeepAlive_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[KeepAlive_result class]]) {
    return NO;
  }
  KeepAlive_result *other = (KeepAlive_result *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"KeepAlive_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"KeepAlive_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface deactivate_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation deactivate_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[deactivate_args class]]) {
    return NO;
  }
  deactivate_args *other = (deactivate_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"deactivate_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"deactivate_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Deactivate_result : NSObject <TBase, NSCoding> {
  AppException * __ouch;

  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithOuch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation Deactivate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOuch: (AppException *) ouch
{
  self = [super init];
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Deactivate_result class]]) {
    return NO;
  }
  Deactivate_result *other = (Deactivate_result *)anObject;
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Deactivate_result"];

  if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Deactivate_result("];
  [ms appendString: @"ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface requestActivationCode_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation requestActivationCode_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[requestActivationCode_args class]]) {
    return NO;
  }
  requestActivationCode_args *other = (requestActivationCode_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"requestActivationCode_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"requestActivationCode_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RequestActivationCode_result : NSObject <TBase, NSCoding> {
  RequestActivationCodeResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RequestActivationCodeResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (RequestActivationCodeResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RequestActivationCodeResponse *) success;
- (void) setSuccess: (RequestActivationCodeResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation RequestActivationCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RequestActivationCodeResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RequestActivationCode_result class]]) {
    return NO;
  }
  RequestActivationCode_result *other = (RequestActivationCode_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (RequestActivationCodeResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RequestActivationCodeResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RequestActivationCodeResponse *fieldValue = [[RequestActivationCodeResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestActivationCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestActivationCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface verifyPassword_args : NSObject <TBase, NSCoding> {
  NSData * __encPassword;

  BOOL __encPassword_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=encPassword, setter=setEncPassword:) NSData * encPassword;
#endif

- (id) init;
- (id) initWithEncPassword: (NSData *) encPassword;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) encPassword;
- (void) setEncPassword: (NSData *) encPassword;
#endif
- (BOOL) encPasswordIsSet;

@end

@implementation verifyPassword_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEncPassword: (NSData *) encPassword
{
  self = [super init];
  __encPassword = [encPassword retain_stub];
  __encPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"encPassword"])
  {
    __encPassword = [[decoder decodeObjectForKey: @"encPassword"] retain_stub];
    __encPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__encPassword_isset)
  {
    [encoder encodeObject: __encPassword forKey: @"encPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __encPassword_isset ? 2654435761 : 0;
  if (__encPassword_isset)
  {
    hash = (hash * 31) ^ [__encPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[verifyPassword_args class]]) {
    return NO;
  }
  verifyPassword_args *other = (verifyPassword_args *)anObject;
  if ((__encPassword_isset != other->__encPassword_isset) ||
      (__encPassword_isset && ((__encPassword || other->__encPassword) && ![__encPassword isEqual:other->__encPassword]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__encPassword release_stub];
  [super dealloc_stub];
}

- (NSData *) encPassword {
  return [[__encPassword retain_stub] autorelease_stub];
}

- (void) setEncPassword: (NSData *) encPassword {
  [encPassword retain_stub];
  [__encPassword release_stub];
  __encPassword = encPassword;
  __encPassword_isset = YES;
}

- (BOOL) encPasswordIsSet {
  return __encPassword_isset;
}

- (void) unsetEncPassword {
  [__encPassword release_stub];
  __encPassword = nil;
  __encPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setEncPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"verifyPassword_args"];
  if (__encPassword_isset) {
    if (__encPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __encPassword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"verifyPassword_args("];
  [ms appendString: @"encPassword:"];
  [ms appendFormat: @"\"%@\"", __encPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface VerifyPassword_result : NSObject <TBase, NSCoding> {
  AppException * __ouch;

  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithOuch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation VerifyPassword_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOuch: (AppException *) ouch
{
  self = [super init];
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[VerifyPassword_result class]]) {
    return NO;
  }
  VerifyPassword_result *other = (VerifyPassword_result *)anObject;
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyPassword_result"];

  if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VerifyPassword_result("];
  [ms appendString: @"ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface authenticateUser_args : NSObject <TBase, NSCoding> {
  AuthUserParam * __authUserParam;

  BOOL __authUserParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authUserParam, setter=setAuthUserParam:) AuthUserParam * authUserParam;
#endif

- (id) init;
- (id) initWithAuthUserParam: (AuthUserParam *) authUserParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthUserParam *) authUserParam;
- (void) setAuthUserParam: (AuthUserParam *) authUserParam;
#endif
- (BOOL) authUserParamIsSet;

@end

@implementation authenticateUser_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthUserParam: (AuthUserParam *) authUserParam
{
  self = [super init];
  __authUserParam = [authUserParam retain_stub];
  __authUserParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authUserParam"])
  {
    __authUserParam = [[decoder decodeObjectForKey: @"authUserParam"] retain_stub];
    __authUserParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authUserParam_isset)
  {
    [encoder encodeObject: __authUserParam forKey: @"authUserParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authUserParam_isset ? 2654435761 : 0;
  if (__authUserParam_isset)
  {
    hash = (hash * 31) ^ [__authUserParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[authenticateUser_args class]]) {
    return NO;
  }
  authenticateUser_args *other = (authenticateUser_args *)anObject;
  if ((__authUserParam_isset != other->__authUserParam_isset) ||
      (__authUserParam_isset && ((__authUserParam || other->__authUserParam) && ![__authUserParam isEqual:other->__authUserParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authUserParam release_stub];
  [super dealloc_stub];
}

- (AuthUserParam *) authUserParam {
  return [[__authUserParam retain_stub] autorelease_stub];
}

- (void) setAuthUserParam: (AuthUserParam *) authUserParam {
  [authUserParam retain_stub];
  [__authUserParam release_stub];
  __authUserParam = authUserParam;
  __authUserParam_isset = YES;
}

- (BOOL) authUserParamIsSet {
  return __authUserParam_isset;
}

- (void) unsetAuthUserParam {
  [__authUserParam release_stub];
  __authUserParam = nil;
  __authUserParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthUserParam *fieldValue = [[AuthUserParam alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthUserParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"authenticateUser_args"];
  if (__authUserParam_isset) {
    if (__authUserParam != nil) {
      [outProtocol writeFieldBeginWithName: @"authUserParam" type: TType_STRUCT fieldID: 1];
      [__authUserParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"authenticateUser_args("];
  [ms appendString: @"authUserParam:"];
  [ms appendFormat: @"%@", __authUserParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthenticateUser_result : NSObject <TBase, NSCoding> {
  AuthUserResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthUserResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (AuthUserResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthUserResponse *) success;
- (void) setSuccess: (AuthUserResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation AuthenticateUser_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthUserResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthenticateUser_result class]]) {
    return NO;
  }
  AuthenticateUser_result *other = (AuthenticateUser_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AuthUserResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthUserResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthUserResponse *fieldValue = [[AuthUserResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthenticateUser_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthenticateUser_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getAuthenticationMethods_args : NSObject <TBase, NSCoding> {
  AuthSelectParam * __authSelectParam;

  BOOL __authSelectParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authSelectParam, setter=setAuthSelectParam:) AuthSelectParam * authSelectParam;
#endif

- (id) init;
- (id) initWithAuthSelectParam: (AuthSelectParam *) authSelectParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthSelectParam *) authSelectParam;
- (void) setAuthSelectParam: (AuthSelectParam *) authSelectParam;
#endif
- (BOOL) authSelectParamIsSet;

@end

@implementation getAuthenticationMethods_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthSelectParam: (AuthSelectParam *) authSelectParam
{
  self = [super init];
  __authSelectParam = [authSelectParam retain_stub];
  __authSelectParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authSelectParam"])
  {
    __authSelectParam = [[decoder decodeObjectForKey: @"authSelectParam"] retain_stub];
    __authSelectParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authSelectParam_isset)
  {
    [encoder encodeObject: __authSelectParam forKey: @"authSelectParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authSelectParam_isset ? 2654435761 : 0;
  if (__authSelectParam_isset)
  {
    hash = (hash * 31) ^ [__authSelectParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getAuthenticationMethods_args class]]) {
    return NO;
  }
  getAuthenticationMethods_args *other = (getAuthenticationMethods_args *)anObject;
  if ((__authSelectParam_isset != other->__authSelectParam_isset) ||
      (__authSelectParam_isset && ((__authSelectParam || other->__authSelectParam) && ![__authSelectParam isEqual:other->__authSelectParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authSelectParam release_stub];
  [super dealloc_stub];
}

- (AuthSelectParam *) authSelectParam {
  return [[__authSelectParam retain_stub] autorelease_stub];
}

- (void) setAuthSelectParam: (AuthSelectParam *) authSelectParam {
  [authSelectParam retain_stub];
  [__authSelectParam release_stub];
  __authSelectParam = authSelectParam;
  __authSelectParam_isset = YES;
}

- (BOOL) authSelectParamIsSet {
  return __authSelectParam_isset;
}

- (void) unsetAuthSelectParam {
  [__authSelectParam release_stub];
  __authSelectParam = nil;
  __authSelectParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthSelectParam *fieldValue = [[AuthSelectParam alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthSelectParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAuthenticationMethods_args"];
  if (__authSelectParam_isset) {
    if (__authSelectParam != nil) {
      [outProtocol writeFieldBeginWithName: @"authSelectParam" type: TType_STRUCT fieldID: 1];
      [__authSelectParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAuthenticationMethods_args("];
  [ms appendString: @"authSelectParam:"];
  [ms appendFormat: @"%@", __authSelectParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAuthenticationMethods_result : NSObject <TBase, NSCoding> {
  AuthSelectResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthSelectResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (AuthSelectResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthSelectResponse *) success;
- (void) setSuccess: (AuthSelectResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetAuthenticationMethods_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AuthSelectResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetAuthenticationMethods_result class]]) {
    return NO;
  }
  GetAuthenticationMethods_result *other = (GetAuthenticationMethods_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AuthSelectResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AuthSelectResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthSelectResponse *fieldValue = [[AuthSelectResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAuthenticationMethods_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAuthenticationMethods_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDeviceOfflineKeys_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getDeviceOfflineKeys_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getDeviceOfflineKeys_args class]]) {
    return NO;
  }
  getDeviceOfflineKeys_args *other = (getDeviceOfflineKeys_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDeviceOfflineKeys_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDeviceOfflineKeys_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDeviceOfflineKeys_result : NSObject <TBase, NSCoding> {
  DeviceOfflineKeysResponse * __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DeviceOfflineKeysResponse * success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (DeviceOfflineKeysResponse *) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeviceOfflineKeysResponse *) success;
- (void) setSuccess: (DeviceOfflineKeysResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation GetDeviceOfflineKeys_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (DeviceOfflineKeysResponse *) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetDeviceOfflineKeys_result class]]) {
    return NO;
  }
  GetDeviceOfflineKeys_result *other = (GetDeviceOfflineKeys_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ouch release_stub];
  [super dealloc_stub];
}

- (DeviceOfflineKeysResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (DeviceOfflineKeysResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DeviceOfflineKeysResponse *fieldValue = [[DeviceOfflineKeysResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDeviceOfflineKeys_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDeviceOfflineKeys_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface authConnect_args : NSObject <TBase, NSCoding> {
  AuthConnectParam * __authUserParam;

  BOOL __authUserParam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authUserParam, setter=setAuthUserParam:) AuthConnectParam * authUserParam;
#endif

- (id) init;
- (id) initWithAuthUserParam: (AuthConnectParam *) authUserParam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AuthConnectParam *) authUserParam;
- (void) setAuthUserParam: (AuthConnectParam *) authUserParam;
#endif
- (BOOL) authUserParamIsSet;

@end

@implementation authConnect_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthUserParam: (AuthConnectParam *) authUserParam
{
  self = [super init];
  __authUserParam = [authUserParam retain_stub];
  __authUserParam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authUserParam"])
  {
    __authUserParam = [[decoder decodeObjectForKey: @"authUserParam"] retain_stub];
    __authUserParam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authUserParam_isset)
  {
    [encoder encodeObject: __authUserParam forKey: @"authUserParam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __authUserParam_isset ? 2654435761 : 0;
  if (__authUserParam_isset)
  {
    hash = (hash * 31) ^ [__authUserParam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[authConnect_args class]]) {
    return NO;
  }
  authConnect_args *other = (authConnect_args *)anObject;
  if ((__authUserParam_isset != other->__authUserParam_isset) ||
      (__authUserParam_isset && ((__authUserParam || other->__authUserParam) && ![__authUserParam isEqual:other->__authUserParam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__authUserParam release_stub];
  [super dealloc_stub];
}

- (AuthConnectParam *) authUserParam {
  return [[__authUserParam retain_stub] autorelease_stub];
}

- (void) setAuthUserParam: (AuthConnectParam *) authUserParam {
  [authUserParam retain_stub];
  [__authUserParam release_stub];
  __authUserParam = authUserParam;
  __authUserParam_isset = YES;
}

- (BOOL) authUserParamIsSet {
  return __authUserParam_isset;
}

- (void) unsetAuthUserParam {
  [__authUserParam release_stub];
  __authUserParam = nil;
  __authUserParam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthConnectParam *fieldValue = [[AuthConnectParam alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthUserParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"authConnect_args"];
  if (__authUserParam_isset) {
    if (__authUserParam != nil) {
      [outProtocol writeFieldBeginWithName: @"authUserParam" type: TType_STRUCT fieldID: 1];
      [__authUserParam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"authConnect_args("];
  [ms appendString: @"authUserParam:"];
  [ms appendFormat: @"%@", __authUserParam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AuthConnect_result : NSObject <TBase, NSCoding> {
  int32_t __success;
  AppException * __ouch;

  BOOL __success_isset;
  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success ouch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation AuthConnect_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success ouch: (AppException *) ouch
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthConnect_result class]]) {
    return NO;
  }
  AuthConnect_result *other = (AuthConnect_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthConnect_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  } else if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthConnect_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface proxyData_args : NSObject <TBase, NSCoding> {
  int64_t __handle;
  NSData * __data;

  BOOL __handle_isset;
  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=handle, setter=setHandle:) int64_t handle;
@property (nonatomic, retain, getter=data, setter=setData:) NSData * data;
#endif

- (id) init;
- (id) initWithHandle: (int64_t) handle data: (NSData *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) handle;
- (void) setHandle: (int64_t) handle;
#endif
- (BOOL) handleIsSet;

#if !__has_feature(objc_arc)
- (NSData *) data;
- (void) setData: (NSData *) data;
#endif
- (BOOL) dataIsSet;

@end

@implementation proxyData_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHandle: (int64_t) handle data: (NSData *) data
{
  self = [super init];
  __handle = handle;
  __handle_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"handle"])
  {
    __handle = [decoder decodeInt64ForKey: @"handle"];
    __handle_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__handle_isset)
  {
    [encoder encodeInt64: __handle forKey: @"handle"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __handle_isset ? 2654435761 : 0;
  if (__handle_isset)
  {
    hash = (hash * 31) ^ [@(__handle) hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[proxyData_args class]]) {
    return NO;
  }
  proxyData_args *other = (proxyData_args *)anObject;
  if ((__handle_isset != other->__handle_isset) ||
      (__handle_isset && (__handle != other->__handle))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (int64_t) handle {
  return __handle;
}

- (void) setHandle: (int64_t) handle {
  __handle = handle;
  __handle_isset = YES;
}

- (BOOL) handleIsSet {
  return __handle_isset;
}

- (void) unsetHandle {
  __handle_isset = NO;
}

- (NSData *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSData *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setHandle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"proxyData_args"];
  if (__handle_isset) {
    [outProtocol writeFieldBeginWithName: @"handle" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __handle];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"proxyData_args("];
  [ms appendString: @"handle:"];
  [ms appendFormat: @"%qi", __handle];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ProxyData_result : NSObject <TBase, NSCoding> {
  AppException * __ouch;

  BOOL __ouch_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ouch, setter=setOuch:) AppException * ouch;
#endif

- (id) init;
- (id) initWithOuch: (AppException *) ouch;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AppException *) ouch;
- (void) setOuch: (AppException *) ouch;
#endif
- (BOOL) ouchIsSet;

@end

@implementation ProxyData_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOuch: (AppException *) ouch
{
  self = [super init];
  __ouch = [ouch retain_stub];
  __ouch_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ouch"])
  {
    __ouch = [[decoder decodeObjectForKey: @"ouch"] retain_stub];
    __ouch_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ouch_isset)
  {
    [encoder encodeObject: __ouch forKey: @"ouch"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ouch_isset ? 2654435761 : 0;
  if (__ouch_isset)
  {
    hash = (hash * 31) ^ [__ouch hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ProxyData_result class]]) {
    return NO;
  }
  ProxyData_result *other = (ProxyData_result *)anObject;
  if ((__ouch_isset != other->__ouch_isset) ||
      (__ouch_isset && ((__ouch || other->__ouch) && ![__ouch isEqual:other->__ouch]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ouch release_stub];
  [super dealloc_stub];
}

- (AppException *) ouch {
  return [[__ouch retain_stub] autorelease_stub];
}

- (void) setOuch: (AppException *) ouch {
  [ouch retain_stub];
  [__ouch release_stub];
  __ouch = ouch;
  __ouch_isset = YES;
}

- (BOOL) ouchIsSet {
  return __ouch_isset;
}

- (void) unsetOuch {
  [__ouch release_stub];
  __ouch = nil;
  __ouch_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AppException *fieldValue = [[AppException alloc] init];
          [fieldValue read: inProtocol];
          [self setOuch: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProxyData_result"];

  if (__ouch_isset) {
    if (__ouch != nil) {
      [outProtocol writeFieldBeginWithName: @"ouch" type: TType_STRUCT fieldID: 1];
      [__ouch write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ProxyData_result("];
  [ms appendString: @"ouch:"];
  [ms appendFormat: @"%@", __ouch];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface proxyClose_args : NSObject <TBase, NSCoding> {
  int64_t __handle;

  BOOL __handle_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=handle, setter=setHandle:) int64_t handle;
#endif

- (id) init;
- (id) initWithHandle: (int64_t) handle;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) handle;
- (void) setHandle: (int64_t) handle;
#endif
- (BOOL) handleIsSet;

@end

@implementation proxyClose_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHandle: (int64_t) handle
{
  self = [super init];
  __handle = handle;
  __handle_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"handle"])
  {
    __handle = [decoder decodeInt64ForKey: @"handle"];
    __handle_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__handle_isset)
  {
    [encoder encodeInt64: __handle forKey: @"handle"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __handle_isset ? 2654435761 : 0;
  if (__handle_isset)
  {
    hash = (hash * 31) ^ [@(__handle) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[proxyClose_args class]]) {
    return NO;
  }
  proxyClose_args *other = (proxyClose_args *)anObject;
  if ((__handle_isset != other->__handle_isset) ||
      (__handle_isset && (__handle != other->__handle))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) handle {
  return __handle;
}

- (void) setHandle: (int64_t) handle {
  __handle = handle;
  __handle_isset = YES;
}

- (BOOL) handleIsSet {
  return __handle_isset;
}

- (void) unsetHandle {
  __handle_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setHandle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"proxyClose_args"];
  if (__handle_isset) {
    [outProtocol writeFieldBeginWithName: @"handle" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __handle];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"proxyClose_args("];
  [ms appendString: @"handle:"];
  [ms appendFormat: @"%qi", __handle];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ProxyClose_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation ProxyClose_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ProxyClose_result class]]) {
    return NO;
  }
  ProxyClose_result *other = (ProxyClose_result *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProxyClose_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ProxyClose_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppToServerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_serverSignature: (ServerSignatureParam *) serverSignatureParam
{
  [outProtocol writeMessageBeginWithName: @"serverSignature" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"serverSignature_args"];
  if (serverSignatureParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"serverSignatureParam" type: TType_STRUCT fieldID: 1];
    [serverSignatureParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ServerSignatureResponse *) recv_serverSignature
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  ServerSignature_result * result = [[[ServerSignature_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"serverSignature failed: unknown result"];
}

- (ServerSignatureResponse *) serverSignature: (ServerSignatureParam *) serverSignatureParam
{
  [self send_serverSignature : serverSignatureParam];
  [[outProtocol transport] flush];
  return [self recv_serverSignature];
}

- (void) send_getDomainSdkConfig: (DomainSdkConfigParam *) domainSdkConfigParam
{
  [outProtocol writeMessageBeginWithName: @"getDomainSdkConfig" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDomainSdkConfig_args"];
  if (domainSdkConfigParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"domainSdkConfigParam" type: TType_STRUCT fieldID: 1];
    [domainSdkConfigParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (DomainSdkConfigResponse *) recv_getDomainSdkConfig
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetDomainSdkConfig_result * result = [[[GetDomainSdkConfig_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDomainSdkConfig failed: unknown result"];
}

- (DomainSdkConfigResponse *) getDomainSdkConfig: (DomainSdkConfigParam *) domainSdkConfigParam
{
  [self send_getDomainSdkConfig : domainSdkConfigParam];
  [[outProtocol transport] flush];
  return [self recv_getDomainSdkConfig];
}

- (void) send_registerDispatcher: (RegisterDispatcherParam *) registerDispatcherParam
{
  [outProtocol writeMessageBeginWithName: @"registerDispatcher" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerDispatcher_args"];
  if (registerDispatcherParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"registerDispatcherParam" type: TType_STRUCT fieldID: 1];
    [registerDispatcherParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RegisterDispatcherResponse *) recv_registerDispatcher
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  RegisterDispatcher_result * result = [[[RegisterDispatcher_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerDispatcher failed: unknown result"];
}

- (RegisterDispatcherResponse *) registerDispatcher: (RegisterDispatcherParam *) registerDispatcherParam
{
  [self send_registerDispatcher : registerDispatcherParam];
  [[outProtocol transport] flush];
  return [self recv_registerDispatcher];
}

- (void) send_activation: (ActivationParam *) activationParam
{
  [outProtocol writeMessageBeginWithName: @"activation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"activation_args"];
  if (activationParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"activationParam" type: TType_STRUCT fieldID: 1];
    [activationParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (ActivationResponse *) recv_activation
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Activation_result * result = [[[Activation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"activation failed: unknown result"];
}

- (ActivationResponse *) activation: (ActivationParam *) activationParam
{
  [self send_activation : activationParam];
  [[outProtocol transport] flush];
  return [self recv_activation];
}

- (void) send_login: (LoginParam *) loginParam
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (loginParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"loginParam" type: TType_STRUCT fieldID: 1];
    [loginParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (LoginResponse *) recv_login
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (LoginResponse *) login: (LoginParam *) loginParam
{
  [self send_login : loginParam];
  [[outProtocol transport] flush];
  return [self recv_login];
}

- (void) send_clientSignature: (SignatureParam *) signaturenParam
{
  [outProtocol writeMessageBeginWithName: @"clientSignature" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"clientSignature_args"];
  if (signaturenParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"signaturenParam" type: TType_STRUCT fieldID: 1];
    [signaturenParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (SignatureResponse *) recv_clientSignature
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  ClientSignature_result * result = [[[ClientSignature_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"clientSignature failed: unknown result"];
}

- (SignatureResponse *) clientSignature: (SignatureParam *) signaturenParam
{
  [self send_clientSignature : signaturenParam];
  [[outProtocol transport] flush];
  return [self recv_clientSignature];
}

- (void) send_getTemplateFromId: (int32_t) id
{
  [outProtocol writeMessageBeginWithName: @"getTemplateFromId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getTemplateFromId_args"];
  [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Template *) recv_getTemplateFromId
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetTemplateFromId_result * result = [[[GetTemplateFromId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getTemplateFromId failed: unknown result"];
}

- (Template *) getTemplateFromId: (int32_t) id
{
  [self send_getTemplateFromId : id];
  [[outProtocol transport] flush];
  return [self recv_getTemplateFromId];
}

- (void) send_sendMessage: (AppMessage *) appMessage
{
  [outProtocol writeMessageBeginWithName: @"sendMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendMessage_args"];
  if (appMessage != nil)  {
    [outProtocol writeFieldBeginWithName: @"appMessage" type: TType_STRUCT fieldID: 1];
    [appMessage write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BOOL) recv_sendMessage
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SendMessage_result * result = [[[SendMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendMessage failed: unknown result"];
}

- (BOOL) sendMessage: (AppMessage *) appMessage
{
  [self send_sendMessage : appMessage];
  [[outProtocol transport] flush];
  return [self recv_sendMessage];
}

- (void) send_sendMessageResponse: (AppMessageResponse *) appMessageResponse
{
  [outProtocol writeMessageBeginWithName: @"sendMessageResponse" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendMessageResponse_args"];
  if (appMessageResponse != nil)  {
    [outProtocol writeFieldBeginWithName: @"appMessageResponse" type: TType_STRUCT fieldID: 1];
    [appMessageResponse write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_sendMessageResponse
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SendMessageResponse_result * result = [[[SendMessageResponse_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  return;
}

- (void) sendMessageResponse: (AppMessageResponse *) appMessageResponse
{
  [self send_sendMessageResponse : appMessageResponse];
  [[outProtocol transport] flush];
  [self recv_sendMessageResponse];
}

- (void) send_sendLoginQrCode: (NSString *) data
{
  [outProtocol writeMessageBeginWithName: @"sendLoginQrCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendLoginQrCode_args"];
  if (data != nil)  {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 1];
    [outProtocol writeString: data];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_sendLoginQrCode
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SendLoginQrCode_result * result = [[[SendLoginQrCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  return;
}

- (void) sendLoginQrCode: (NSString *) data
{
  [self send_sendLoginQrCode : data];
  [[outProtocol transport] flush];
  [self recv_sendLoginQrCode];
}

- (void) send_getLoginQrCode: (NSString *) operatorId sessionId: (NSString *) sessionId
{
  [outProtocol writeMessageBeginWithName: @"getLoginQrCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLoginQrCode_args"];
  if (operatorId != nil)  {
    [outProtocol writeFieldBeginWithName: @"operatorId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: operatorId];
    [outProtocol writeFieldEnd];
  }
  if (sessionId != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: sessionId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QrCodeResponse *) recv_getLoginQrCode
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetLoginQrCode_result * result = [[[GetLoginQrCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLoginQrCode failed: unknown result"];
}

- (QrCodeResponse *) getLoginQrCode: (NSString *) operatorId sessionId: (NSString *) sessionId
{
  [self send_getLoginQrCode : operatorId sessionId: sessionId];
  [[outProtocol transport] flush];
  return [self recv_getLoginQrCode];
}

- (void) send_changePassword: (NSData *) encPassword newEncPassword: (NSData *) newEncPassword
{
  [outProtocol writeMessageBeginWithName: @"changePassword" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"changePassword_args"];
  if (encPassword != nil)  {
    [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 1];
    [outProtocol writeBinary: encPassword];
    [outProtocol writeFieldEnd];
  }
  if (newEncPassword != nil)  {
    [outProtocol writeFieldBeginWithName: @"newEncPassword" type: TType_STRING fieldID: 2];
    [outProtocol writeBinary: newEncPassword];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_changePassword
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  ChangePassword_result * result = [[[ChangePassword_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  return;
}

- (void) changePassword: (NSData *) encPassword newEncPassword: (NSData *) newEncPassword
{
  [self send_changePassword : encPassword newEncPassword: newEncPassword];
  [[outProtocol transport] flush];
  [self recv_changePassword];
}

- (void) send_getCloudSafe: (SdkCloudSafeKey *) uniqueKey userLoginId: (NSString *) userLoginId
{
  [outProtocol writeMessageBeginWithName: @"getCloudSafe" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCloudSafe_args"];
  if (uniqueKey != nil)  {
    [outProtocol writeFieldBeginWithName: @"uniqueKey" type: TType_STRUCT fieldID: 1];
    [uniqueKey write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userLoginId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userLoginId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: userLoginId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (SdkCloudSafe *) recv_getCloudSafe
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetCloudSafe_result * result = [[[GetCloudSafe_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCloudSafe failed: unknown result"];
}

- (SdkCloudSafe *) getCloudSafe: (SdkCloudSafeKey *) uniqueKey userLoginId: (NSString *) userLoginId
{
  [self send_getCloudSafe : uniqueKey userLoginId: userLoginId];
  [[outProtocol transport] flush];
  return [self recv_getCloudSafe];
}

- (void) send_setCloudSafe: (SdkCloudSafe *) sdkCloudSafe
{
  [outProtocol writeMessageBeginWithName: @"setCloudSafe" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setCloudSafe_args"];
  if (sdkCloudSafe != nil)  {
    [outProtocol writeFieldBeginWithName: @"sdkCloudSafe" type: TType_STRUCT fieldID: 1];
    [sdkCloudSafe write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (int64_t) recv_setCloudSafe
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SetCloudSafe_result * result = [[[SetCloudSafe_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setCloudSafe failed: unknown result"];
}

- (int64_t) setCloudSafe: (SdkCloudSafe *) sdkCloudSafe
{
  [self send_setCloudSafe : sdkCloudSafe];
  [[outProtocol transport] flush];
  return [self recv_setCloudSafe];
}

- (void) send_getCloudSafeList: (NSString *) nameFilter includeShare: (BOOL) includeShare modifiedFromEpoch: (int64_t) modifiedFromEpoch owner: (int) owner
{
  [outProtocol writeMessageBeginWithName: @"getCloudSafeList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCloudSafeList_args"];
  if (nameFilter != nil)  {
    [outProtocol writeFieldBeginWithName: @"nameFilter" type: TType_STRING fieldID: 1];
    [outProtocol writeString: nameFilter];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"includeShare" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: includeShare];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"modifiedFromEpoch" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: modifiedFromEpoch];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"owner" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: owner];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NSMutableArray *) recv_getCloudSafeList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetCloudSafeList_result * result = [[[GetCloudSafeList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCloudSafeList failed: unknown result"];
}

- (NSMutableArray *) getCloudSafeList: (NSString *) nameFilter includeShare: (BOOL) includeShare modifiedFromEpoch: (int64_t) modifiedFromEpoch owner: (int) owner
{
  [self send_getCloudSafeList : nameFilter includeShare: includeShare modifiedFromEpoch: modifiedFromEpoch owner: owner];
  [[outProtocol transport] flush];
  return [self recv_getCloudSafeList];
}

- (void) send_disconnect: (int) appErrorCodes message: (NSString *) message
{
  [outProtocol writeMessageBeginWithName: @"disconnect" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"disconnect_args"];
  [outProtocol writeFieldBeginWithName: @"appErrorCodes" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: appErrorCodes];
  [outProtocol writeFieldEnd];
  if (message != nil)  {
    [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
    [outProtocol writeString: message];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_disconnect
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Disconnect_result * result = [[[Disconnect_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) disconnect: (int) appErrorCodes message: (NSString *) message
{
  [self send_disconnect : appErrorCodes message: message];
  [[outProtocol transport] flush];
  [self recv_disconnect];
}

- (void) send_keepAlive
{
  [outProtocol writeMessageBeginWithName: @"keepAlive" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"keepAlive_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_keepAlive
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  KeepAlive_result * result = [[[KeepAlive_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) keepAlive
{
  [self send_keepAlive];
  [[outProtocol transport] flush];
  [self recv_keepAlive];
}

- (void) send_deactivate
{
  [outProtocol writeMessageBeginWithName: @"deactivate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"deactivate_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_deactivate
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Deactivate_result * result = [[[Deactivate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  return;
}

- (void) deactivate
{
  [self send_deactivate];
  [[outProtocol transport] flush];
  [self recv_deactivate];
}

- (void) send_requestActivationCode
{
  [outProtocol writeMessageBeginWithName: @"requestActivationCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"requestActivationCode_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RequestActivationCodeResponse *) recv_requestActivationCode
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  RequestActivationCode_result * result = [[[RequestActivationCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"requestActivationCode failed: unknown result"];
}

- (RequestActivationCodeResponse *) requestActivationCode
{
  [self send_requestActivationCode];
  [[outProtocol transport] flush];
  return [self recv_requestActivationCode];
}

- (void) send_verifyPassword: (NSData *) encPassword
{
  [outProtocol writeMessageBeginWithName: @"verifyPassword" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"verifyPassword_args"];
  if (encPassword != nil)  {
    [outProtocol writeFieldBeginWithName: @"encPassword" type: TType_STRING fieldID: 1];
    [outProtocol writeBinary: encPassword];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_verifyPassword
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  VerifyPassword_result * result = [[[VerifyPassword_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  return;
}

- (void) verifyPassword: (NSData *) encPassword
{
  [self send_verifyPassword : encPassword];
  [[outProtocol transport] flush];
  [self recv_verifyPassword];
}

- (void) send_authenticateUser: (AuthUserParam *) authUserParam
{
  [outProtocol writeMessageBeginWithName: @"authenticateUser" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"authenticateUser_args"];
  if (authUserParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"authUserParam" type: TType_STRUCT fieldID: 1];
    [authUserParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AuthUserResponse *) recv_authenticateUser
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthenticateUser_result * result = [[[AuthenticateUser_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"authenticateUser failed: unknown result"];
}

- (AuthUserResponse *) authenticateUser: (AuthUserParam *) authUserParam
{
  [self send_authenticateUser : authUserParam];
  [[outProtocol transport] flush];
  return [self recv_authenticateUser];
}

- (void) send_getAuthenticationMethods: (AuthSelectParam *) authSelectParam
{
  [outProtocol writeMessageBeginWithName: @"getAuthenticationMethods" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAuthenticationMethods_args"];
  if (authSelectParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"authSelectParam" type: TType_STRUCT fieldID: 1];
    [authSelectParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AuthSelectResponse *) recv_getAuthenticationMethods
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetAuthenticationMethods_result * result = [[[GetAuthenticationMethods_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAuthenticationMethods failed: unknown result"];
}

- (AuthSelectResponse *) getAuthenticationMethods: (AuthSelectParam *) authSelectParam
{
  [self send_getAuthenticationMethods : authSelectParam];
  [[outProtocol transport] flush];
  return [self recv_getAuthenticationMethods];
}

- (void) send_getDeviceOfflineKeys
{
  [outProtocol writeMessageBeginWithName: @"getDeviceOfflineKeys" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDeviceOfflineKeys_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (DeviceOfflineKeysResponse *) recv_getDeviceOfflineKeys
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetDeviceOfflineKeys_result * result = [[[GetDeviceOfflineKeys_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDeviceOfflineKeys failed: unknown result"];
}

- (DeviceOfflineKeysResponse *) getDeviceOfflineKeys
{
  [self send_getDeviceOfflineKeys];
  [[outProtocol transport] flush];
  return [self recv_getDeviceOfflineKeys];
}

- (void) send_authConnect: (AuthConnectParam *) authUserParam
{
  [outProtocol writeMessageBeginWithName: @"authConnect" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"authConnect_args"];
  if (authUserParam != nil)  {
    [outProtocol writeFieldBeginWithName: @"authUserParam" type: TType_STRUCT fieldID: 1];
    [authUserParam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (int32_t) recv_authConnect
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AuthConnect_result * result = [[[AuthConnect_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"authConnect failed: unknown result"];
}

- (int32_t) authConnect: (AuthConnectParam *) authUserParam
{
  [self send_authConnect : authUserParam];
  [[outProtocol transport] flush];
  return [self recv_authConnect];
}

- (void) send_proxyData: (int64_t) handle data: (NSData *) data
{
  [outProtocol writeMessageBeginWithName: @"proxyData" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"proxyData_args"];
  [outProtocol writeFieldBeginWithName: @"handle" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: handle];
  [outProtocol writeFieldEnd];
  if (data != nil)  {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 2];
    [outProtocol writeBinary: data];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_proxyData
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  ProxyData_result * result = [[[ProxyData_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result ouchIsSet]) {
    @throw [result ouch];
  }
  return;
}

- (void) proxyData: (int64_t) handle data: (NSData *) data
{
  [self send_proxyData : handle data: data];
  [[outProtocol transport] flush];
  [self recv_proxyData];
}

- (void) send_proxyClose: (int64_t) handle
{
  [outProtocol writeMessageBeginWithName: @"proxyClose" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"proxyClose_args"];
  [outProtocol writeFieldBeginWithName: @"handle" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: handle];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) recv_proxyClose
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  ProxyClose_result * result = [[[ProxyClose_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) proxyClose: (int64_t) handle
{
  [self send_proxyClose : handle];
  [[outProtocol transport] flush];
  [self recv_proxyClose];
}

@end

@implementation AppToServerProcessor

- (id) initWithAppToServer: (id <AppToServer>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_serverSignature_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"serverSignature"];
}
{
  SEL s = @selector(process_getDomainSdkConfig_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getDomainSdkConfig"];
}
{
  SEL s = @selector(process_registerDispatcher_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"registerDispatcher"];
}
{
  SEL s = @selector(process_activation_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"activation"];
}
{
  SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"login"];
}
{
  SEL s = @selector(process_clientSignature_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"clientSignature"];
}
{
  SEL s = @selector(process_getTemplateFromId_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getTemplateFromId"];
}
{
  SEL s = @selector(process_sendMessage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendMessage"];
}
{
  SEL s = @selector(process_sendMessageResponse_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendMessageResponse"];
}
{
  SEL s = @selector(process_sendLoginQrCode_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendLoginQrCode"];
}
{
  SEL s = @selector(process_getLoginQrCode_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getLoginQrCode"];
}
{
  SEL s = @selector(process_changePassword_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"changePassword"];
}
{
  SEL s = @selector(process_getCloudSafe_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getCloudSafe"];
}
{
  SEL s = @selector(process_setCloudSafe_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"setCloudSafe"];
}
{
  SEL s = @selector(process_getCloudSafeList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getCloudSafeList"];
}
{
  SEL s = @selector(process_disconnect_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"disconnect"];
}
{
  SEL s = @selector(process_keepAlive_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"keepAlive"];
}
{
  SEL s = @selector(process_deactivate_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"deactivate"];
}
{
  SEL s = @selector(process_requestActivationCode_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"requestActivationCode"];
}
{
  SEL s = @selector(process_verifyPassword_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"verifyPassword"];
}
{
  SEL s = @selector(process_authenticateUser_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"authenticateUser"];
}
{
  SEL s = @selector(process_getAuthenticationMethods_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getAuthenticationMethods"];
}
{
  SEL s = @selector(process_getDeviceOfflineKeys_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getDeviceOfflineKeys"];
}
{
  SEL s = @selector(process_authConnect_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"authConnect"];
}
{
  SEL s = @selector(process_proxyData_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"proxyData"];
}
{
  SEL s = @selector(process_proxyClose_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"proxyClose"];
}
return self;
}

- (id<AppToServer>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_serverSignature_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
serverSignature_args * args = [[serverSignature_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ServerSignature_result * result = [[ServerSignature_result alloc] init];
[result setSuccess: [mService serverSignature: [args serverSignatureParam]]];
[outProtocol writeMessageBeginWithName: @"serverSignature"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getDomainSdkConfig_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getDomainSdkConfig_args * args = [[getDomainSdkConfig_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetDomainSdkConfig_result * result = [[GetDomainSdkConfig_result alloc] init];
[result setSuccess: [mService getDomainSdkConfig: [args domainSdkConfigParam]]];
[outProtocol writeMessageBeginWithName: @"getDomainSdkConfig"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_registerDispatcher_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
registerDispatcher_args * args = [[registerDispatcher_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RegisterDispatcher_result * result = [[RegisterDispatcher_result alloc] init];
[result setSuccess: [mService registerDispatcher: [args registerDispatcherParam]]];
[outProtocol writeMessageBeginWithName: @"registerDispatcher"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_activation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
activation_args * args = [[activation_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Activation_result * result = [[Activation_result alloc] init];
[result setSuccess: [mService activation: [args activationParam]]];
[outProtocol writeMessageBeginWithName: @"activation"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
login_args * args = [[login_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Login_result * result = [[Login_result alloc] init];
[result setSuccess: [mService login: [args loginParam]]];
[outProtocol writeMessageBeginWithName: @"login"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_clientSignature_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
clientSignature_args * args = [[clientSignature_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ClientSignature_result * result = [[ClientSignature_result alloc] init];
[result setSuccess: [mService clientSignature: [args signaturenParam]]];
[outProtocol writeMessageBeginWithName: @"clientSignature"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getTemplateFromId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getTemplateFromId_args * args = [[getTemplateFromId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetTemplateFromId_result * result = [[GetTemplateFromId_result alloc] init];
[result setSuccess: [mService getTemplateFromId: [args id]]];
[outProtocol writeMessageBeginWithName: @"getTemplateFromId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
sendMessage_args * args = [[sendMessage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SendMessage_result * result = [[SendMessage_result alloc] init];
[result setSuccess: [mService sendMessage: [args appMessage]]];
[outProtocol writeMessageBeginWithName: @"sendMessage"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendMessageResponse_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
sendMessageResponse_args * args = [[sendMessageResponse_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SendMessageResponse_result * result = [[SendMessageResponse_result alloc] init];
[mService sendMessageResponse: [args appMessageResponse]];
[outProtocol writeMessageBeginWithName: @"sendMessageResponse"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendLoginQrCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
sendLoginQrCode_args * args = [[sendLoginQrCode_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SendLoginQrCode_result * result = [[SendLoginQrCode_result alloc] init];
[mService sendLoginQrCode: [args data]];
[outProtocol writeMessageBeginWithName: @"sendLoginQrCode"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getLoginQrCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getLoginQrCode_args * args = [[getLoginQrCode_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetLoginQrCode_result * result = [[GetLoginQrCode_result alloc] init];
[result setSuccess: [mService getLoginQrCode: [args operatorId] sessionId: [args sessionId]]];
[outProtocol writeMessageBeginWithName: @"getLoginQrCode"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_changePassword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
changePassword_args * args = [[changePassword_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ChangePassword_result * result = [[ChangePassword_result alloc] init];
[mService changePassword: [args encPassword] newEncPassword: [args newEncPassword]];
[outProtocol writeMessageBeginWithName: @"changePassword"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getCloudSafe_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getCloudSafe_args * args = [[getCloudSafe_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetCloudSafe_result * result = [[GetCloudSafe_result alloc] init];
[result setSuccess: [mService getCloudSafe: [args uniqueKey] userLoginId: [args userLoginId]]];
[outProtocol writeMessageBeginWithName: @"getCloudSafe"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_setCloudSafe_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
setCloudSafe_args * args = [[setCloudSafe_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SetCloudSafe_result * result = [[SetCloudSafe_result alloc] init];
[result setSuccess: [mService setCloudSafe: [args sdkCloudSafe]]];
[outProtocol writeMessageBeginWithName: @"setCloudSafe"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getCloudSafeList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getCloudSafeList_args * args = [[getCloudSafeList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetCloudSafeList_result * result = [[GetCloudSafeList_result alloc] init];
[result setSuccess: [mService getCloudSafeList: [args nameFilter] includeShare: [args includeShare] modifiedFromEpoch: [args modifiedFromEpoch] owner: [args owner]]];
[outProtocol writeMessageBeginWithName: @"getCloudSafeList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_disconnect_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
disconnect_args * args = [[disconnect_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Disconnect_result * result = [[Disconnect_result alloc] init];
[mService disconnect: [args appErrorCodes] message: [args message]];
[outProtocol writeMessageBeginWithName: @"disconnect"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_keepAlive_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
keepAlive_args * args = [[keepAlive_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
KeepAlive_result * result = [[KeepAlive_result alloc] init];
[mService keepAlive];
[outProtocol writeMessageBeginWithName: @"keepAlive"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_deactivate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deactivate_args * args = [[deactivate_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Deactivate_result * result = [[Deactivate_result alloc] init];
[mService deactivate];
[outProtocol writeMessageBeginWithName: @"deactivate"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_requestActivationCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
requestActivationCode_args * args = [[requestActivationCode_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RequestActivationCode_result * result = [[RequestActivationCode_result alloc] init];
[result setSuccess: [mService requestActivationCode]];
[outProtocol writeMessageBeginWithName: @"requestActivationCode"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_verifyPassword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
verifyPassword_args * args = [[verifyPassword_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
VerifyPassword_result * result = [[VerifyPassword_result alloc] init];
[mService verifyPassword: [args encPassword]];
[outProtocol writeMessageBeginWithName: @"verifyPassword"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_authenticateUser_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
authenticateUser_args * args = [[authenticateUser_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthenticateUser_result * result = [[AuthenticateUser_result alloc] init];
[result setSuccess: [mService authenticateUser: [args authUserParam]]];
[outProtocol writeMessageBeginWithName: @"authenticateUser"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getAuthenticationMethods_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAuthenticationMethods_args * args = [[getAuthenticationMethods_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAuthenticationMethods_result * result = [[GetAuthenticationMethods_result alloc] init];
[result setSuccess: [mService getAuthenticationMethods: [args authSelectParam]]];
[outProtocol writeMessageBeginWithName: @"getAuthenticationMethods"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getDeviceOfflineKeys_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getDeviceOfflineKeys_args * args = [[getDeviceOfflineKeys_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetDeviceOfflineKeys_result * result = [[GetDeviceOfflineKeys_result alloc] init];
[result setSuccess: [mService getDeviceOfflineKeys]];
[outProtocol writeMessageBeginWithName: @"getDeviceOfflineKeys"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_authConnect_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
authConnect_args * args = [[authConnect_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AuthConnect_result * result = [[AuthConnect_result alloc] init];
[result setSuccess: [mService authConnect: [args authUserParam]]];
[outProtocol writeMessageBeginWithName: @"authConnect"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_proxyData_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
proxyData_args * args = [[proxyData_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ProxyData_result * result = [[ProxyData_result alloc] init];
[mService proxyData: [args handle] data: [args data]];
[outProtocol writeMessageBeginWithName: @"proxyData"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_proxyClose_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
proxyClose_args * args = [[proxyClose_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ProxyClose_result * result = [[ProxyClose_result alloc] init];
[mService proxyClose: [args handle]];
[outProtocol writeMessageBeginWithName: @"proxyClose"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

