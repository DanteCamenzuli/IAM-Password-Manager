/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "AppSystem.h"

@interface ServerSignatureParam : NSObject <TBase, NSCoding> {
  NSData * __dataForSignature;
  AppVersion * __appVersion;
  AppVersion * __libVersion;
  NSString * __domainName;
  BOOL __iamDcem;
  int __commClientType;

  BOOL __dataForSignature_isset;
  BOOL __appVersion_isset;
  BOOL __libVersion_isset;
  BOOL __domainName_isset;
  BOOL __iamDcem_isset;
  BOOL __commClientType_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dataForSignature, setter=setDataForSignature:) NSData * dataForSignature;
@property (nonatomic, retain, getter=appVersion, setter=setAppVersion:) AppVersion * appVersion;
@property (nonatomic, retain, getter=libVersion, setter=setLibVersion:) AppVersion * libVersion;
@property (nonatomic, retain, getter=domainName, setter=setDomainName:) NSString * domainName;
@property (nonatomic, getter=iamDcem, setter=setIamDcem:) BOOL iamDcem;
@property (nonatomic, getter=commClientType, setter=setCommClientType:) int commClientType;
#endif

- (id) init;
- (id) initWithDataForSignature: (NSData *) dataForSignature appVersion: (AppVersion *) appVersion libVersion: (AppVersion *) libVersion domainName: (NSString *) domainName iamDcem: (BOOL) iamDcem commClientType: (int) commClientType;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) dataForSignature;
- (void) setDataForSignature: (NSData *) dataForSignature;
#endif
- (BOOL) dataForSignatureIsSet;

#if !__has_feature(objc_arc)
- (AppVersion *) appVersion;
- (void) setAppVersion: (AppVersion *) appVersion;
#endif
- (BOOL) appVersionIsSet;

#if !__has_feature(objc_arc)
- (AppVersion *) libVersion;
- (void) setLibVersion: (AppVersion *) libVersion;
#endif
- (BOOL) libVersionIsSet;

#if !__has_feature(objc_arc)
- (NSString *) domainName;
- (void) setDomainName: (NSString *) domainName;
#endif
- (BOOL) domainNameIsSet;

#if !__has_feature(objc_arc)
- (BOOL) iamDcem;
- (void) setIamDcem: (BOOL) iamDcem;
#endif
- (BOOL) iamDcemIsSet;

#if !__has_feature(objc_arc)
- (int) commClientType;
- (void) setCommClientType: (int) commClientType;
#endif
- (BOOL) commClientTypeIsSet;

@end

@interface ServerSignatureResponse : NSObject <TBase, NSCoding> {
  NSData * __serverSignature;
  AppVersion * __serverVersion;
  BOOL __isReverseProxy;
  BOOL __isDispatched;
  NSData * __challenge;

  BOOL __serverSignature_isset;
  BOOL __serverVersion_isset;
  BOOL __isReverseProxy_isset;
  BOOL __isDispatched_isset;
  BOOL __challenge_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=serverSignature, setter=setServerSignature:) NSData * serverSignature;
@property (nonatomic, retain, getter=serverVersion, setter=setServerVersion:) AppVersion * serverVersion;
@property (nonatomic, getter=isReverseProxy, setter=setIsReverseProxy:) BOOL isReverseProxy;
@property (nonatomic, getter=isDispatched, setter=setIsDispatched:) BOOL isDispatched;
@property (nonatomic, retain, getter=challenge, setter=setChallenge:) NSData * challenge;
#endif

- (id) init;
- (id) initWithServerSignature: (NSData *) serverSignature serverVersion: (AppVersion *) serverVersion isReverseProxy: (BOOL) isReverseProxy isDispatched: (BOOL) isDispatched challenge: (NSData *) challenge;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) serverSignature;
- (void) setServerSignature: (NSData *) serverSignature;
#endif
- (BOOL) serverSignatureIsSet;

#if !__has_feature(objc_arc)
- (AppVersion *) serverVersion;
- (void) setServerVersion: (AppVersion *) serverVersion;
#endif
- (BOOL) serverVersionIsSet;

#if !__has_feature(objc_arc)
- (BOOL) isReverseProxy;
- (void) setIsReverseProxy: (BOOL) isReverseProxy;
#endif
- (BOOL) isReverseProxyIsSet;

#if !__has_feature(objc_arc)
- (BOOL) isDispatched;
- (void) setIsDispatched: (BOOL) isDispatched;
#endif
- (BOOL) isDispatchedIsSet;

#if !__has_feature(objc_arc)
- (NSData *) challenge;
- (void) setChallenge: (NSData *) challenge;
#endif
- (BOOL) challengeIsSet;

@end

@interface DomainSdkConfigParam : NSObject <TBase, NSCoding> {
  NSString * __domainName;
  NSString * __activationCode;
  NSString * __userId;
  NSData * __dispatcherSignature;

  BOOL __domainName_isset;
  BOOL __activationCode_isset;
  BOOL __userId_isset;
  BOOL __dispatcherSignature_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=domainName, setter=setDomainName:) NSString * domainName;
@property (nonatomic, retain, getter=activationCode, setter=setActivationCode:) NSString * activationCode;
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=dispatcherSignature, setter=setDispatcherSignature:) NSData * dispatcherSignature;
#endif

- (id) init;
- (id) initWithDomainName: (NSString *) domainName activationCode: (NSString *) activationCode userId: (NSString *) userId dispatcherSignature: (NSData *) dispatcherSignature;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) domainName;
- (void) setDomainName: (NSString *) domainName;
#endif
- (BOOL) domainNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) activationCode;
- (void) setActivationCode: (NSString *) activationCode;
#endif
- (BOOL) activationCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) dispatcherSignature;
- (void) setDispatcherSignature: (NSData *) dispatcherSignature;
#endif
- (BOOL) dispatcherSignatureIsSet;

@end

@interface DomainSdkConfigResponse : NSObject <TBase, NSCoding> {
  NSData * __sdkConfigDcem;

  BOOL __sdkConfigDcem_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sdkConfigDcem, setter=setSdkConfigDcem:) NSData * sdkConfigDcem;
#endif

- (id) init;
- (id) initWithSdkConfigDcem: (NSData *) sdkConfigDcem;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) sdkConfigDcem;
- (void) setSdkConfigDcem: (NSData *) sdkConfigDcem;
#endif
- (BOOL) sdkConfigDcemIsSet;

@end

@interface RegisterDispatcherParam : NSObject <TBase, NSCoding> {
  NSString * __domainName;
  NSData * __dispatcherSignature;
  NSString * __pnKey;

  BOOL __domainName_isset;
  BOOL __dispatcherSignature_isset;
  BOOL __pnKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=domainName, setter=setDomainName:) NSString * domainName;
@property (nonatomic, retain, getter=dispatcherSignature, setter=setDispatcherSignature:) NSData * dispatcherSignature;
@property (nonatomic, retain, getter=pnKey, setter=setPnKey:) NSString * pnKey;
#endif

- (id) init;
- (id) initWithDomainName: (NSString *) domainName dispatcherSignature: (NSData *) dispatcherSignature pnKey: (NSString *) pnKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) domainName;
- (void) setDomainName: (NSString *) domainName;
#endif
- (BOOL) domainNameIsSet;

#if !__has_feature(objc_arc)
- (NSData *) dispatcherSignature;
- (void) setDispatcherSignature: (NSData *) dispatcherSignature;
#endif
- (BOOL) dispatcherSignatureIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pnKey;
- (void) setPnKey: (NSString *) pnKey;
#endif
- (BOOL) pnKeyIsSet;

@end

@interface RegisterDispatcherResponse : NSObject <TBase, NSCoding> {
  NSString * __clusterId;

  BOOL __clusterId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clusterId, setter=setClusterId:) NSString * clusterId;
#endif

- (id) init;
- (id) initWithClusterId: (NSString *) clusterId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clusterId;
- (void) setClusterId: (NSString *) clusterId;
#endif
- (BOOL) clusterIdIsSet;

@end

@interface ActivationParam : NSObject <TBase, NSCoding> {
  NSString * __activationCode;
  NSString * __userId;
  NSData * __udid;
  NSData * __encPassword;
  int __cpuArch;
  NSString * __osVersion;
  NSString * __locale;
  NSString * __manufacture;
  NSString * __deviceModel;
  NSString * __deviceName;
  NSData * __publicKey;
  NSData * __signature;
  int __clientType;
  NSData * __digest;
  NSData * __risk;

  BOOL __activationCode_isset;
  BOOL __userId_isset;
  BOOL __udid_isset;
  BOOL __encPassword_isset;
  BOOL __cpuArch_isset;
  BOOL __osVersion_isset;
  BOOL __locale_isset;
  BOOL __manufacture_isset;
  BOOL __deviceModel_isset;
  BOOL __deviceName_isset;
  BOOL __publicKey_isset;
  BOOL __signature_isset;
  BOOL __clientType_isset;
  BOOL __digest_isset;
  BOOL __risk_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=activationCode, setter=setActivationCode:) NSString * activationCode;
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=udid, setter=setUdid:) NSData * udid;
@property (nonatomic, retain, getter=encPassword, setter=setEncPassword:) NSData * encPassword;
@property (nonatomic, getter=cpuArch, setter=setCpuArch:) int cpuArch;
@property (nonatomic, retain, getter=osVersion, setter=setOsVersion:) NSString * osVersion;
@property (nonatomic, retain, getter=locale, setter=setLocale:) NSString * locale;
@property (nonatomic, retain, getter=manufacture, setter=setManufacture:) NSString * manufacture;
@property (nonatomic, retain, getter=deviceModel, setter=setDeviceModel:) NSString * deviceModel;
@property (nonatomic, retain, getter=deviceName, setter=setDeviceName:) NSString * deviceName;
@property (nonatomic, retain, getter=publicKey, setter=setPublicKey:) NSData * publicKey;
@property (nonatomic, retain, getter=signature, setter=setSignature:) NSData * signature;
@property (nonatomic, getter=clientType, setter=setClientType:) int clientType;
@property (nonatomic, retain, getter=digest, setter=setDigest:) NSData * digest;
@property (nonatomic, retain, getter=risk, setter=setRisk:) NSData * risk;
#endif

- (id) init;
- (id) initWithActivationCode: (NSString *) activationCode userId: (NSString *) userId udid: (NSData *) udid encPassword: (NSData *) encPassword cpuArch: (int) cpuArch osVersion: (NSString *) osVersion locale: (NSString *) locale manufacture: (NSString *) manufacture deviceModel: (NSString *) deviceModel deviceName: (NSString *) deviceName publicKey: (NSData *) publicKey signature: (NSData *) signature clientType: (int) clientType digest: (NSData *) digest risk: (NSData *) risk;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) activationCode;
- (void) setActivationCode: (NSString *) activationCode;
#endif
- (BOOL) activationCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) udid;
- (void) setUdid: (NSData *) udid;
#endif
- (BOOL) udidIsSet;

#if !__has_feature(objc_arc)
- (NSData *) encPassword;
- (void) setEncPassword: (NSData *) encPassword;
#endif
- (BOOL) encPasswordIsSet;

#if !__has_feature(objc_arc)
- (int) cpuArch;
- (void) setCpuArch: (int) cpuArch;
#endif
- (BOOL) cpuArchIsSet;

#if !__has_feature(objc_arc)
- (NSString *) osVersion;
- (void) setOsVersion: (NSString *) osVersion;
#endif
- (BOOL) osVersionIsSet;

#if !__has_feature(objc_arc)
- (NSString *) locale;
- (void) setLocale: (NSString *) locale;
#endif
- (BOOL) localeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) manufacture;
- (void) setManufacture: (NSString *) manufacture;
#endif
- (BOOL) manufactureIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceModel;
- (void) setDeviceModel: (NSString *) deviceModel;
#endif
- (BOOL) deviceModelIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceName;
- (void) setDeviceName: (NSString *) deviceName;
#endif
- (BOOL) deviceNameIsSet;

#if !__has_feature(objc_arc)
- (NSData *) publicKey;
- (void) setPublicKey: (NSData *) publicKey;
#endif
- (BOOL) publicKeyIsSet;

#if !__has_feature(objc_arc)
- (NSData *) signature;
- (void) setSignature: (NSData *) signature;
#endif
- (BOOL) signatureIsSet;

#if !__has_feature(objc_arc)
- (int) clientType;
- (void) setClientType: (int) clientType;
#endif
- (BOOL) clientTypeIsSet;

#if !__has_feature(objc_arc)
- (NSData *) digest;
- (void) setDigest: (NSData *) digest;
#endif
- (BOOL) digestIsSet;

#if !__has_feature(objc_arc)
- (NSData *) risk;
- (void) setRisk: (NSData *) risk;
#endif
- (BOOL) riskIsSet;

@end

@interface ActivationResponse : NSObject <TBase, NSCoding> {
  BOOL __updateAvailable;
  int32_t __deviceId;
  NSData * __signedCertificate;
  NSData * __deviceKey;
  NSData * __offlineKey;
  NSString * __deviceName;

  BOOL __updateAvailable_isset;
  BOOL __deviceId_isset;
  BOOL __signedCertificate_isset;
  BOOL __deviceKey_isset;
  BOOL __offlineKey_isset;
  BOOL __deviceName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=updateAvailable, setter=setUpdateAvailable:) BOOL updateAvailable;
@property (nonatomic, getter=deviceId, setter=setDeviceId:) int32_t deviceId;
@property (nonatomic, retain, getter=signedCertificate, setter=setSignedCertificate:) NSData * signedCertificate;
@property (nonatomic, retain, getter=deviceKey, setter=setDeviceKey:) NSData * deviceKey;
@property (nonatomic, retain, getter=offlineKey, setter=setOfflineKey:) NSData * offlineKey;
@property (nonatomic, retain, getter=deviceName, setter=setDeviceName:) NSString * deviceName;
#endif

- (id) init;
- (id) initWithUpdateAvailable: (BOOL) updateAvailable deviceId: (int32_t) deviceId signedCertificate: (NSData *) signedCertificate deviceKey: (NSData *) deviceKey offlineKey: (NSData *) offlineKey deviceName: (NSString *) deviceName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) updateAvailable;
- (void) setUpdateAvailable: (BOOL) updateAvailable;
#endif
- (BOOL) updateAvailableIsSet;

#if !__has_feature(objc_arc)
- (int32_t) deviceId;
- (void) setDeviceId: (int32_t) deviceId;
#endif
- (BOOL) deviceIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) signedCertificate;
- (void) setSignedCertificate: (NSData *) signedCertificate;
#endif
- (BOOL) signedCertificateIsSet;

#if !__has_feature(objc_arc)
- (NSData *) deviceKey;
- (void) setDeviceKey: (NSData *) deviceKey;
#endif
- (BOOL) deviceKeyIsSet;

#if !__has_feature(objc_arc)
- (NSData *) offlineKey;
- (void) setOfflineKey: (NSData *) offlineKey;
#endif
- (BOOL) offlineKeyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceName;
- (void) setDeviceName: (NSString *) deviceName;
#endif
- (BOOL) deviceNameIsSet;

@end

@interface LoginParam : NSObject <TBase, NSCoding> {
  int32_t __deviceId;
  NSData * __udid;
  NSData * __encPassword;
  NSString * __osVersion;
  NSString * __locale;
  int32_t __hotpCounter;
  NSData * __digest;
  NSData * __risk;
  BOOL __passwordLess;
  int __cpuArch;
  int __commClientType;

  BOOL __deviceId_isset;
  BOOL __udid_isset;
  BOOL __encPassword_isset;
  BOOL __osVersion_isset;
  BOOL __locale_isset;
  BOOL __hotpCounter_isset;
  BOOL __digest_isset;
  BOOL __risk_isset;
  BOOL __passwordLess_isset;
  BOOL __cpuArch_isset;
  BOOL __commClientType_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=deviceId, setter=setDeviceId:) int32_t deviceId;
@property (nonatomic, retain, getter=udid, setter=setUdid:) NSData * udid;
@property (nonatomic, retain, getter=encPassword, setter=setEncPassword:) NSData * encPassword;
@property (nonatomic, retain, getter=osVersion, setter=setOsVersion:) NSString * osVersion;
@property (nonatomic, retain, getter=locale, setter=setLocale:) NSString * locale;
@property (nonatomic, getter=hotpCounter, setter=setHotpCounter:) int32_t hotpCounter;
@property (nonatomic, retain, getter=digest, setter=setDigest:) NSData * digest;
@property (nonatomic, retain, getter=risk, setter=setRisk:) NSData * risk;
@property (nonatomic, getter=passwordLess, setter=setPasswordLess:) BOOL passwordLess;
@property (nonatomic, getter=cpuArch, setter=setCpuArch:) int cpuArch;
@property (nonatomic, getter=commClientType, setter=setCommClientType:) int commClientType;
#endif

- (id) init;
- (id) initWithDeviceId: (int32_t) deviceId udid: (NSData *) udid encPassword: (NSData *) encPassword osVersion: (NSString *) osVersion locale: (NSString *) locale hotpCounter: (int32_t) hotpCounter digest: (NSData *) digest risk: (NSData *) risk passwordLess: (BOOL) passwordLess cpuArch: (int) cpuArch commClientType: (int) commClientType;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) deviceId;
- (void) setDeviceId: (int32_t) deviceId;
#endif
- (BOOL) deviceIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) udid;
- (void) setUdid: (NSData *) udid;
#endif
- (BOOL) udidIsSet;

#if !__has_feature(objc_arc)
- (NSData *) encPassword;
- (void) setEncPassword: (NSData *) encPassword;
#endif
- (BOOL) encPasswordIsSet;

#if !__has_feature(objc_arc)
- (NSString *) osVersion;
- (void) setOsVersion: (NSString *) osVersion;
#endif
- (BOOL) osVersionIsSet;

#if !__has_feature(objc_arc)
- (NSString *) locale;
- (void) setLocale: (NSString *) locale;
#endif
- (BOOL) localeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) hotpCounter;
- (void) setHotpCounter: (int32_t) hotpCounter;
#endif
- (BOOL) hotpCounterIsSet;

#if !__has_feature(objc_arc)
- (NSData *) digest;
- (void) setDigest: (NSData *) digest;
#endif
- (BOOL) digestIsSet;

#if !__has_feature(objc_arc)
- (NSData *) risk;
- (void) setRisk: (NSData *) risk;
#endif
- (BOOL) riskIsSet;

#if !__has_feature(objc_arc)
- (BOOL) passwordLess;
- (void) setPasswordLess: (BOOL) passwordLess;
#endif
- (BOOL) passwordLessIsSet;

#if !__has_feature(objc_arc)
- (int) cpuArch;
- (void) setCpuArch: (int) cpuArch;
#endif
- (BOOL) cpuArchIsSet;

#if !__has_feature(objc_arc)
- (int) commClientType;
- (void) setCommClientType: (int) commClientType;
#endif
- (BOOL) commClientTypeIsSet;

@end

@interface LoginResponse : NSObject <TBase, NSCoding> {
  NSData * __deviceKey;
  NSString * __oneTimePassword;
  int64_t __updateAvailableTill;
  int32_t __passcodeValidFor;
  NSString * __updateInfo;
  int64_t __licenceExpiresOn;
  BOOL __testLicence;
  BOOL __ldapUser;
  int32_t __keepAliveSeconds;

  BOOL __deviceKey_isset;
  BOOL __oneTimePassword_isset;
  BOOL __updateAvailableTill_isset;
  BOOL __passcodeValidFor_isset;
  BOOL __updateInfo_isset;
  BOOL __licenceExpiresOn_isset;
  BOOL __testLicence_isset;
  BOOL __ldapUser_isset;
  BOOL __keepAliveSeconds_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=deviceKey, setter=setDeviceKey:) NSData * deviceKey;
@property (nonatomic, retain, getter=oneTimePassword, setter=setOneTimePassword:) NSString * oneTimePassword;
@property (nonatomic, getter=updateAvailableTill, setter=setUpdateAvailableTill:) int64_t updateAvailableTill;
@property (nonatomic, getter=passcodeValidFor, setter=setPasscodeValidFor:) int32_t passcodeValidFor;
@property (nonatomic, retain, getter=updateInfo, setter=setUpdateInfo:) NSString * updateInfo;
@property (nonatomic, getter=licenceExpiresOn, setter=setLicenceExpiresOn:) int64_t licenceExpiresOn;
@property (nonatomic, getter=testLicence, setter=setTestLicence:) BOOL testLicence;
@property (nonatomic, getter=ldapUser, setter=setLdapUser:) BOOL ldapUser;
@property (nonatomic, getter=keepAliveSeconds, setter=setKeepAliveSeconds:) int32_t keepAliveSeconds;
#endif

- (id) init;
- (id) initWithDeviceKey: (NSData *) deviceKey oneTimePassword: (NSString *) oneTimePassword updateAvailableTill: (int64_t) updateAvailableTill passcodeValidFor: (int32_t) passcodeValidFor updateInfo: (NSString *) updateInfo licenceExpiresOn: (int64_t) licenceExpiresOn testLicence: (BOOL) testLicence ldapUser: (BOOL) ldapUser keepAliveSeconds: (int32_t) keepAliveSeconds;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) deviceKey;
- (void) setDeviceKey: (NSData *) deviceKey;
#endif
- (BOOL) deviceKeyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) oneTimePassword;
- (void) setOneTimePassword: (NSString *) oneTimePassword;
#endif
- (BOOL) oneTimePasswordIsSet;

#if !__has_feature(objc_arc)
- (int64_t) updateAvailableTill;
- (void) setUpdateAvailableTill: (int64_t) updateAvailableTill;
#endif
- (BOOL) updateAvailableTillIsSet;

#if !__has_feature(objc_arc)
- (int32_t) passcodeValidFor;
- (void) setPasscodeValidFor: (int32_t) passcodeValidFor;
#endif
- (BOOL) passcodeValidForIsSet;

#if !__has_feature(objc_arc)
- (NSString *) updateInfo;
- (void) setUpdateInfo: (NSString *) updateInfo;
#endif
- (BOOL) updateInfoIsSet;

#if !__has_feature(objc_arc)
- (int64_t) licenceExpiresOn;
- (void) setLicenceExpiresOn: (int64_t) licenceExpiresOn;
#endif
- (BOOL) licenceExpiresOnIsSet;

#if !__has_feature(objc_arc)
- (BOOL) testLicence;
- (void) setTestLicence: (BOOL) testLicence;
#endif
- (BOOL) testLicenceIsSet;

#if !__has_feature(objc_arc)
- (BOOL) ldapUser;
- (void) setLdapUser: (BOOL) ldapUser;
#endif
- (BOOL) ldapUserIsSet;

#if !__has_feature(objc_arc)
- (int32_t) keepAliveSeconds;
- (void) setKeepAliveSeconds: (int32_t) keepAliveSeconds;
#endif
- (BOOL) keepAliveSecondsIsSet;

@end

@interface RequestActivationCodeResponse : NSObject <TBase, NSCoding> {
  NSString * __activationCode;
  int64_t __validTill;

  BOOL __activationCode_isset;
  BOOL __validTill_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=activationCode, setter=setActivationCode:) NSString * activationCode;
@property (nonatomic, getter=validTill, setter=setValidTill:) int64_t validTill;
#endif

- (id) init;
- (id) initWithActivationCode: (NSString *) activationCode validTill: (int64_t) validTill;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) activationCode;
- (void) setActivationCode: (NSString *) activationCode;
#endif
- (BOOL) activationCodeIsSet;

#if !__has_feature(objc_arc)
- (int64_t) validTill;
- (void) setValidTill: (int64_t) validTill;
#endif
- (BOOL) validTillIsSet;

@end

@interface AuthUserParam : NSObject <TBase, NSCoding> {
  NSString * __authGatewayId;
  NSString * __loginId;
  int __authMethod;
  NSData * __encPassword;
  NSData * __encPasscode;
  NSData * __sharedSecret;
  NSData * __udid;
  NSString * __workstationName;
  int __clientType;
  NSMutableDictionary * __propertyMap;

  BOOL __authGatewayId_isset;
  BOOL __loginId_isset;
  BOOL __authMethod_isset;
  BOOL __encPassword_isset;
  BOOL __encPasscode_isset;
  BOOL __sharedSecret_isset;
  BOOL __udid_isset;
  BOOL __workstationName_isset;
  BOOL __clientType_isset;
  BOOL __propertyMap_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authGatewayId, setter=setAuthGatewayId:) NSString * authGatewayId;
@property (nonatomic, retain, getter=loginId, setter=setLoginId:) NSString * loginId;
@property (nonatomic, getter=authMethod, setter=setAuthMethod:) int authMethod;
@property (nonatomic, retain, getter=encPassword, setter=setEncPassword:) NSData * encPassword;
@property (nonatomic, retain, getter=encPasscode, setter=setEncPasscode:) NSData * encPasscode;
@property (nonatomic, retain, getter=sharedSecret, setter=setSharedSecret:) NSData * sharedSecret;
@property (nonatomic, retain, getter=udid, setter=setUdid:) NSData * udid;
@property (nonatomic, retain, getter=workstationName, setter=setWorkstationName:) NSString * workstationName;
@property (nonatomic, getter=clientType, setter=setClientType:) int clientType;
@property (nonatomic, retain, getter=propertyMap, setter=setPropertyMap:) NSMutableDictionary * propertyMap;
#endif

- (id) init;
- (id) initWithAuthGatewayId: (NSString *) authGatewayId loginId: (NSString *) loginId authMethod: (int) authMethod encPassword: (NSData *) encPassword encPasscode: (NSData *) encPasscode sharedSecret: (NSData *) sharedSecret udid: (NSData *) udid workstationName: (NSString *) workstationName clientType: (int) clientType propertyMap: (NSMutableDictionary *) propertyMap;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) authGatewayId;
- (void) setAuthGatewayId: (NSString *) authGatewayId;
#endif
- (BOOL) authGatewayIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) loginId;
- (void) setLoginId: (NSString *) loginId;
#endif
- (BOOL) loginIdIsSet;

#if !__has_feature(objc_arc)
- (int) authMethod;
- (void) setAuthMethod: (int) authMethod;
#endif
- (BOOL) authMethodIsSet;

#if !__has_feature(objc_arc)
- (NSData *) encPassword;
- (void) setEncPassword: (NSData *) encPassword;
#endif
- (BOOL) encPasswordIsSet;

#if !__has_feature(objc_arc)
- (NSData *) encPasscode;
- (void) setEncPasscode: (NSData *) encPasscode;
#endif
- (BOOL) encPasscodeIsSet;

#if !__has_feature(objc_arc)
- (NSData *) sharedSecret;
- (void) setSharedSecret: (NSData *) sharedSecret;
#endif
- (BOOL) sharedSecretIsSet;

#if !__has_feature(objc_arc)
- (NSData *) udid;
- (void) setUdid: (NSData *) udid;
#endif
- (BOOL) udidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) workstationName;
- (void) setWorkstationName: (NSString *) workstationName;
#endif
- (BOOL) workstationNameIsSet;

#if !__has_feature(objc_arc)
- (int) clientType;
- (void) setClientType: (int) clientType;
#endif
- (BOOL) clientTypeIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) propertyMap;
- (void) setPropertyMap: (NSMutableDictionary *) propertyMap;
#endif
- (BOOL) propertyMapIsSet;

@end

@interface AuthUserResponse : NSObject <TBase, NSCoding> {
  BOOL __success;
  NSMutableArray * __authMethods;
  int32_t __responseTime;
  int64_t __msgId;
  NSData * __userKey;
  NSString * __sessionCookie;
  int32_t __sessionCookieExpiresOn;
  NSString * __secureMsgRandomCode;
  NSString * __phoneNumber;
  NSString * __fqUserLoginId;
  NSString * __fidoResponse;
  NSString * __ldapDomain;

  BOOL __success_isset;
  BOOL __authMethods_isset;
  BOOL __responseTime_isset;
  BOOL __msgId_isset;
  BOOL __userKey_isset;
  BOOL __sessionCookie_isset;
  BOOL __sessionCookieExpiresOn_isset;
  BOOL __secureMsgRandomCode_isset;
  BOOL __phoneNumber_isset;
  BOOL __fqUserLoginId_isset;
  BOOL __fidoResponse_isset;
  BOOL __ldapDomain_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
@property (nonatomic, retain, getter=authMethods, setter=setAuthMethods:) NSMutableArray * authMethods;
@property (nonatomic, getter=responseTime, setter=setResponseTime:) int32_t responseTime;
@property (nonatomic, getter=msgId, setter=setMsgId:) int64_t msgId;
@property (nonatomic, retain, getter=userKey, setter=setUserKey:) NSData * userKey;
@property (nonatomic, retain, getter=sessionCookie, setter=setSessionCookie:) NSString * sessionCookie;
@property (nonatomic, getter=sessionCookieExpiresOn, setter=setSessionCookieExpiresOn:) int32_t sessionCookieExpiresOn;
@property (nonatomic, retain, getter=secureMsgRandomCode, setter=setSecureMsgRandomCode:) NSString * secureMsgRandomCode;
@property (nonatomic, retain, getter=phoneNumber, setter=setPhoneNumber:) NSString * phoneNumber;
@property (nonatomic, retain, getter=fqUserLoginId, setter=setFqUserLoginId:) NSString * fqUserLoginId;
@property (nonatomic, retain, getter=fidoResponse, setter=setFidoResponse:) NSString * fidoResponse;
@property (nonatomic, retain, getter=ldapDomain, setter=setLdapDomain:) NSString * ldapDomain;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success authMethods: (NSMutableArray *) authMethods responseTime: (int32_t) responseTime msgId: (int64_t) msgId userKey: (NSData *) userKey sessionCookie: (NSString *) sessionCookie sessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn secureMsgRandomCode: (NSString *) secureMsgRandomCode phoneNumber: (NSString *) phoneNumber fqUserLoginId: (NSString *) fqUserLoginId fidoResponse: (NSString *) fidoResponse ldapDomain: (NSString *) ldapDomain;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) authMethods;
- (void) setAuthMethods: (NSMutableArray *) authMethods;
#endif
- (BOOL) authMethodsIsSet;

#if !__has_feature(objc_arc)
- (int32_t) responseTime;
- (void) setResponseTime: (int32_t) responseTime;
#endif
- (BOOL) responseTimeIsSet;

#if !__has_feature(objc_arc)
- (int64_t) msgId;
- (void) setMsgId: (int64_t) msgId;
#endif
- (BOOL) msgIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) userKey;
- (void) setUserKey: (NSData *) userKey;
#endif
- (BOOL) userKeyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) sessionCookie;
- (void) setSessionCookie: (NSString *) sessionCookie;
#endif
- (BOOL) sessionCookieIsSet;

#if !__has_feature(objc_arc)
- (int32_t) sessionCookieExpiresOn;
- (void) setSessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn;
#endif
- (BOOL) sessionCookieExpiresOnIsSet;

#if !__has_feature(objc_arc)
- (NSString *) secureMsgRandomCode;
- (void) setSecureMsgRandomCode: (NSString *) secureMsgRandomCode;
#endif
- (BOOL) secureMsgRandomCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) phoneNumber;
- (void) setPhoneNumber: (NSString *) phoneNumber;
#endif
- (BOOL) phoneNumberIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fqUserLoginId;
- (void) setFqUserLoginId: (NSString *) fqUserLoginId;
#endif
- (BOOL) fqUserLoginIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fidoResponse;
- (void) setFidoResponse: (NSString *) fidoResponse;
#endif
- (BOOL) fidoResponseIsSet;

#if !__has_feature(objc_arc)
- (NSString *) ldapDomain;
- (void) setLdapDomain: (NSString *) ldapDomain;
#endif
- (BOOL) ldapDomainIsSet;

@end

@interface AuthConnectParam : NSObject <TBase, NSCoding> {
  NSString * __authGatewayId;
  NSData * __sharedSecret;
  NSString * __workstationName;
  NSData * __udid;

  BOOL __authGatewayId_isset;
  BOOL __sharedSecret_isset;
  BOOL __workstationName_isset;
  BOOL __udid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authGatewayId, setter=setAuthGatewayId:) NSString * authGatewayId;
@property (nonatomic, retain, getter=sharedSecret, setter=setSharedSecret:) NSData * sharedSecret;
@property (nonatomic, retain, getter=workstationName, setter=setWorkstationName:) NSString * workstationName;
@property (nonatomic, retain, getter=udid, setter=setUdid:) NSData * udid;
#endif

- (id) init;
- (id) initWithAuthGatewayId: (NSString *) authGatewayId sharedSecret: (NSData *) sharedSecret workstationName: (NSString *) workstationName udid: (NSData *) udid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) authGatewayId;
- (void) setAuthGatewayId: (NSString *) authGatewayId;
#endif
- (BOOL) authGatewayIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) sharedSecret;
- (void) setSharedSecret: (NSData *) sharedSecret;
#endif
- (BOOL) sharedSecretIsSet;

#if !__has_feature(objc_arc)
- (NSString *) workstationName;
- (void) setWorkstationName: (NSString *) workstationName;
#endif
- (BOOL) workstationNameIsSet;

#if !__has_feature(objc_arc)
- (NSData *) udid;
- (void) setUdid: (NSData *) udid;
#endif
- (BOOL) udidIsSet;

@end

@interface AuthSelectParam : NSObject <TBase, NSCoding> {
  NSString * __authGatewayId;
  NSString * __loginId;
  NSData * __sharedSecret;
  NSData * __udid;
  NSString * __workstationName;
  int __clientType;

  BOOL __authGatewayId_isset;
  BOOL __loginId_isset;
  BOOL __sharedSecret_isset;
  BOOL __udid_isset;
  BOOL __workstationName_isset;
  BOOL __clientType_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authGatewayId, setter=setAuthGatewayId:) NSString * authGatewayId;
@property (nonatomic, retain, getter=loginId, setter=setLoginId:) NSString * loginId;
@property (nonatomic, retain, getter=sharedSecret, setter=setSharedSecret:) NSData * sharedSecret;
@property (nonatomic, retain, getter=udid, setter=setUdid:) NSData * udid;
@property (nonatomic, retain, getter=workstationName, setter=setWorkstationName:) NSString * workstationName;
@property (nonatomic, getter=clientType, setter=setClientType:) int clientType;
#endif

- (id) init;
- (id) initWithAuthGatewayId: (NSString *) authGatewayId loginId: (NSString *) loginId sharedSecret: (NSData *) sharedSecret udid: (NSData *) udid workstationName: (NSString *) workstationName clientType: (int) clientType;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) authGatewayId;
- (void) setAuthGatewayId: (NSString *) authGatewayId;
#endif
- (BOOL) authGatewayIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) loginId;
- (void) setLoginId: (NSString *) loginId;
#endif
- (BOOL) loginIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) sharedSecret;
- (void) setSharedSecret: (NSData *) sharedSecret;
#endif
- (BOOL) sharedSecretIsSet;

#if !__has_feature(objc_arc)
- (NSData *) udid;
- (void) setUdid: (NSData *) udid;
#endif
- (BOOL) udidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) workstationName;
- (void) setWorkstationName: (NSString *) workstationName;
#endif
- (BOOL) workstationNameIsSet;

#if !__has_feature(objc_arc)
- (int) clientType;
- (void) setClientType: (int) clientType;
#endif
- (BOOL) clientTypeIsSet;

@end

@interface AuthSelectResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __authMethods;

  BOOL __authMethods_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=authMethods, setter=setAuthMethods:) NSMutableArray * authMethods;
#endif

- (id) init;
- (id) initWithAuthMethods: (NSMutableArray *) authMethods;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) authMethods;
- (void) setAuthMethods: (NSMutableArray *) authMethods;
#endif
- (BOOL) authMethodsIsSet;

@end

@interface QrCodeResponse : NSObject <TBase, NSCoding> {
  int32_t __timeToLive;
  NSString * __data;

  BOOL __timeToLive_isset;
  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=timeToLive, setter=setTimeToLive:) int32_t timeToLive;
@property (nonatomic, retain, getter=data, setter=setData:) NSString * data;
#endif

- (id) init;
- (id) initWithTimeToLive: (int32_t) timeToLive data: (NSString *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) timeToLive;
- (void) setTimeToLive: (int32_t) timeToLive;
#endif
- (BOOL) timeToLiveIsSet;

#if !__has_feature(objc_arc)
- (NSString *) data;
- (void) setData: (NSString *) data;
#endif
- (BOOL) dataIsSet;

@end

@interface SignatureParam : NSObject <TBase, NSCoding> {
  NSData * __clientSignature;
  NSData * __appDigest;

  BOOL __clientSignature_isset;
  BOOL __appDigest_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clientSignature, setter=setClientSignature:) NSData * clientSignature;
@property (nonatomic, retain, getter=appDigest, setter=setAppDigest:) NSData * appDigest;
#endif

- (id) init;
- (id) initWithClientSignature: (NSData *) clientSignature appDigest: (NSData *) appDigest;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) clientSignature;
- (void) setClientSignature: (NSData *) clientSignature;
#endif
- (BOOL) clientSignatureIsSet;

#if !__has_feature(objc_arc)
- (NSData *) appDigest;
- (void) setAppDigest: (NSData *) appDigest;
#endif
- (BOOL) appDigestIsSet;

@end

@interface SignatureResponse : NSObject <TBase, NSCoding> {
  NSData * __reconnectTicket;
  int32_t __keepAliveSeconds;

  BOOL __reconnectTicket_isset;
  BOOL __keepAliveSeconds_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reconnectTicket, setter=setReconnectTicket:) NSData * reconnectTicket;
@property (nonatomic, getter=keepAliveSeconds, setter=setKeepAliveSeconds:) int32_t keepAliveSeconds;
#endif

- (id) init;
- (id) initWithReconnectTicket: (NSData *) reconnectTicket keepAliveSeconds: (int32_t) keepAliveSeconds;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) reconnectTicket;
- (void) setReconnectTicket: (NSData *) reconnectTicket;
#endif
- (BOOL) reconnectTicketIsSet;

#if !__has_feature(objc_arc)
- (int32_t) keepAliveSeconds;
- (void) setKeepAliveSeconds: (int32_t) keepAliveSeconds;
#endif
- (BOOL) keepAliveSecondsIsSet;

@end

@interface DeviceOfflineKey : NSObject <TBase, NSCoding> {
  int32_t __deviceId;
  NSData * __udid;
  NSData * __offlineKey;

  BOOL __deviceId_isset;
  BOOL __udid_isset;
  BOOL __offlineKey_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=deviceId, setter=setDeviceId:) int32_t deviceId;
@property (nonatomic, retain, getter=udid, setter=setUdid:) NSData * udid;
@property (nonatomic, retain, getter=offlineKey, setter=setOfflineKey:) NSData * offlineKey;
#endif

- (id) init;
- (id) initWithDeviceId: (int32_t) deviceId udid: (NSData *) udid offlineKey: (NSData *) offlineKey;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) deviceId;
- (void) setDeviceId: (int32_t) deviceId;
#endif
- (BOOL) deviceIdIsSet;

#if !__has_feature(objc_arc)
- (NSData *) udid;
- (void) setUdid: (NSData *) udid;
#endif
- (BOOL) udidIsSet;

#if !__has_feature(objc_arc)
- (NSData *) offlineKey;
- (void) setOfflineKey: (NSData *) offlineKey;
#endif
- (BOOL) offlineKeyIsSet;

@end

@interface DeviceOfflineKeysResponse : NSObject <TBase, NSCoding> {
  int32_t __window;
  int32_t __validFor;
  NSMutableArray * __deviceOfflineKeys;

  BOOL __window_isset;
  BOOL __validFor_isset;
  BOOL __deviceOfflineKeys_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=window, setter=setWindow:) int32_t window;
@property (nonatomic, getter=validFor, setter=setValidFor:) int32_t validFor;
@property (nonatomic, retain, getter=deviceOfflineKeys, setter=setDeviceOfflineKeys:) NSMutableArray * deviceOfflineKeys;
#endif

- (id) init;
- (id) initWithWindow: (int32_t) window validFor: (int32_t) validFor deviceOfflineKeys: (NSMutableArray *) deviceOfflineKeys;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) window;
- (void) setWindow: (int32_t) window;
#endif
- (BOOL) windowIsSet;

#if !__has_feature(objc_arc)
- (int32_t) validFor;
- (void) setValidFor: (int32_t) validFor;
#endif
- (BOOL) validForIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) deviceOfflineKeys;
- (void) setDeviceOfflineKeys: (NSMutableArray *) deviceOfflineKeys;
#endif
- (BOOL) deviceOfflineKeysIsSet;

@end

@protocol AppToServer <NSObject>
- (ServerSignatureResponse *) serverSignature: (ServerSignatureParam *) serverSignatureParam;  // throws AppException *, TException
- (DomainSdkConfigResponse *) getDomainSdkConfig: (DomainSdkConfigParam *) domainSdkConfigParam;  // throws AppException *, TException
- (RegisterDispatcherResponse *) registerDispatcher: (RegisterDispatcherParam *) registerDispatcherParam;  // throws AppException *, TException
- (ActivationResponse *) activation: (ActivationParam *) activationParam;  // throws AppException *, TException
- (LoginResponse *) login: (LoginParam *) loginParam;  // throws AppException *, TException
- (SignatureResponse *) clientSignature: (SignatureParam *) signaturenParam;  // throws AppException *, TException
- (Template *) getTemplateFromId: (int32_t) id;  // throws AppException *, TException
- (BOOL) sendMessage: (AppMessage *) appMessage;  // throws AppException *, TException
- (void) sendMessageResponse: (AppMessageResponse *) appMessageResponse;  // throws AppException *, TException
- (void) sendLoginQrCode: (NSString *) data;  // throws AppException *, TException
- (QrCodeResponse *) getLoginQrCode: (NSString *) operatorId sessionId: (NSString *) sessionId;  // throws AppException *, TException
- (void) changePassword: (NSData *) encPassword newEncPassword: (NSData *) newEncPassword;  // throws AppException *, TException
- (SdkCloudSafe *) getCloudSafe: (SdkCloudSafeKey *) uniqueKey userLoginId: (NSString *) userLoginId;  // throws AppException *, TException
- (int64_t) setCloudSafe: (SdkCloudSafe *) sdkCloudSafe;  // throws AppException *, TException
- (NSMutableArray *) getCloudSafeList: (NSString *) nameFilter includeShare: (BOOL) includeShare modifiedFromEpoch: (int64_t) modifiedFromEpoch owner: (int) owner;  // throws AppException *, TException
- (void) disconnect: (int) appErrorCodes message: (NSString *) message;  // throws TException
- (void) keepAlive;  // throws TException
- (void) deactivate;  // throws AppException *, TException
- (RequestActivationCodeResponse *) requestActivationCode;  // throws AppException *, TException
- (void) verifyPassword: (NSData *) encPassword;  // throws AppException *, TException
- (AuthUserResponse *) authenticateUser: (AuthUserParam *) authUserParam;  // throws AppException *, TException
- (AuthSelectResponse *) getAuthenticationMethods: (AuthSelectParam *) authSelectParam;  // throws AppException *, TException
- (DeviceOfflineKeysResponse *) getDeviceOfflineKeys;  // throws AppException *, TException
- (int32_t) authConnect: (AuthConnectParam *) authUserParam;  // throws AppException *, TException
- (void) proxyData: (int64_t) handle data: (NSData *) data;  // throws AppException *, TException
- (void) proxyClose: (int64_t) handle;  // throws TException
@end

@interface AppToServerClient : TBaseClient <AppToServer> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface AppToServerProcessor : NSObject <TProcessor> {
  id <AppToServer> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithAppToServer: (id <AppToServer>) service;
- (id<AppToServer>) service;
@end

@interface AppToServerConstants : NSObject {
}
@end
