/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


enum CloudSafeOptions {
  CloudSafeOptions_ENC = 0,
  CloudSafeOptions_PWD = 1
};

enum AppErrorCodes {
  AppErrorCodes_OK = 0,
  AppErrorCodes_WRONG_CREDENTIALS = 1,
  AppErrorCodes_INVALID_ACTIVATION_CODE = 2,
  AppErrorCodes_ACTIVATION_CODE_EXPIRED = 3,
  AppErrorCodes_USER_PASSWORD_MAX_RETRIES = 4,
  AppErrorCodes_UNKNOWN_CLIENT_TYPE = 5,
  AppErrorCodes_UNKNOWN_ARCH_TYPE = 6,
  AppErrorCodes_REJECT_RISK = 7,
  AppErrorCodes_UPDATE_NECESSARY = 8,
  AppErrorCodes_INVALID_USERID = 9,
  AppErrorCodes_UNEXPECTED_ERROR = 10,
  AppErrorCodes_INVALID_VERSION = 11,
  AppErrorCodes_INVALID_PIN = 12,
  AppErrorCodes_CSR_SIGNATURE = 13,
  AppErrorCodes_CSR_ERROR = 14,
  AppErrorCodes_TRANSPORT_ERROR = 15,
  AppErrorCodes_USER_DISABLED = 16,
  AppErrorCodes_USER_TEMPORARY_DISABLED = 17,
  AppErrorCodes_INVALID_DEVICE_NAME = 18,
  AppErrorCodes_INVALID_DEVICE_ID = 19,
  AppErrorCodes_DEVICE_DISABLED = 20,
  AppErrorCodes_INCORRECT_STATE = 21,
  AppErrorCodes_INVALID_UDID = 22,
  AppErrorCodes_INVALID_CLIENT_SIGNATURE = 23,
  AppErrorCodes_NO_TEMPLATE_FOUND = 24,
  AppErrorCodes_RESPONSE_MESSAGE_ERROR = 25,
  AppErrorCodes_CLIENT_ERROR = 26,
  AppErrorCodes_RESPONSE_MESSAGE_INVALID_ID = 27,
  AppErrorCodes_INVALID_PASSWORD = 28,
  AppErrorCodes_DUPLICATED_DEVICE_NAME = 29,
  AppErrorCodes_REST_ADD_MESSAGE_FAILURE = 30,
  AppErrorCodes_APP_MSG_RESPONSE_TIMEDOUT = 31,
  AppErrorCodes_INVALID_MESSAGE_SIGNATURE = 32,
  AppErrorCodes_PROPERTY_NOT_FOUND = 33,
  AppErrorCodes_VERSION_UPDATED_REQUIRED = 34,
  AppErrorCodes_VERSION_DISABLED = 35,
  AppErrorCodes_FCM_PUSHNOTIFICATION = 36,
  AppErrorCodes_INVALID_CLOUD_SAFE_SIGNATURE = 37,
  AppErrorCodes_CLOUD_SAFE_NOT_FOUND = 38,
  AppErrorCodes_LICENCE_EXPIRED = 39,
  AppErrorCodes_LICENCE_MAX_USER = 40,
  AppErrorCodes_INVALID_DOMAIN_NAME = 41,
  AppErrorCodes_DISPATCHER_CONNECTION_TO_DCEM_FAILED = 42,
  AppErrorCodes_CONNECTION_TO_LDAP_FAILED = 43,
  AppErrorCodes_UNREGISTERED_DCEM = 44,
  AppErrorCodes_NO_CONNECTION_TO_DESTINATION_DCEM = 45,
  AppErrorCodes_NOT_A_DISPATCHER_PROXY = 46,
  AppErrorCodes_DOMAIN_CANNOT_CONNECT_TO_ITSELF = 47,
  AppErrorCodes_DOMAIN_HAS_NO_CONFIGURATION = 48,
  AppErrorCodes_REVERSE_PROXY_CONNECTION_LIMIT = 49,
  AppErrorCodes_INVALID_DEVICE_KEY = 50,
  AppErrorCodes_INVALID_OFFLINE_KEY = 51,
  AppErrorCodes_USER_HAS_NO_DEVICES = 52,
  AppErrorCodes_NO_DISTINCT_USER_NAME = 53,
  AppErrorCodes_INVALID_PASSCODE = 54,
  AppErrorCodes_PASSCODE_NOT_NUMERIC = 55,
  AppErrorCodes_INVALID_AUTH_METHOD = 56,
  AppErrorCodes_AUTH_METHOD_NOT_ALLOWED = 57,
  AppErrorCodes_NO_AUTH_METHOD_FOUND = 58,
  AppErrorCodes_SMS_USER_HAS_NO_MOBILE = 59,
  AppErrorCodes_SMS_SEND_EXCEPTION = 60,
  AppErrorCodes_SEND_VOICE_EXCEPTION = 61,
  AppErrorCodes_INVALID_OTP = 62,
  AppErrorCodes_USER_HAS_NO_OTP_TOKENS = 63,
  AppErrorCodes_INVALID_TENANT_IDENTIFIER = 64,
  AppErrorCodes_USER_HAS_NO_TELEPHONE_OR_MOBILE = 65,
  AppErrorCodes_INVALID_CLOUD_SAFE_OWNER = 66,
  AppErrorCodes_APP_MSG_IGNORED = 67,
  AppErrorCodes_DB_DECRYTION_ERROR = 68,
  AppErrorCodes_NO_WRITE_ACCESS = 69,
  AppErrorCodes_REVERSE_PROXY_REDIRECTION = 70,
  AppErrorCodes_PASSWORD_SAFE_LIMIT_REACHED = 71,
  AppErrorCodes_CLOUD_SAFE_LIMIT_REACHED = 72,
  AppErrorCodes_PASSWORD_SAFE_NOT_ENABLED = 73,
  AppErrorCodes_CLOUD_SAFE_GLOBAL_LIMIT_REACHED = 74,
  AppErrorCodes_CLOUD_SAFE_USER_LIMIT_REACHED = 75,
  AppErrorCodes_CLOUD_SAFE_USER_EXPIRY_DATE_REACHED = 76,
  AppErrorCodes_CLOUD_SAFE_FILE_DECRYPTION = 77,
  AppErrorCodes_LICENCE_MAX_USERS_REACHED = 78,
  AppErrorCodes_LICENCE_MAX_GLOBAL_USERS_REACHED = 79,
  AppErrorCodes_INVALID_FILE_SAFE_OWNER = 80,
  AppErrorCodes_CLOUDDATA_OUT_OF_DATE = 81
};

enum CommClientType {
  CommClientType_APP = 1,
  CommClientType_DCEM_AS_CLIENT = 2,
  CommClientType_AUTH_APP = 3
};

enum MsgPriority {
  MsgPriority_IMMEDIATE = 1,
  MsgPriority_URGENT = 2,
  MsgPriority_HIGH = 3,
  MsgPriority_NORAML = 4,
  MsgPriority_LOW = 5,
  MsgPriority_NEGLIGIBLE = 6,
  MsgPriority_NONE = 7
};

enum ThriftAuthMethod {
  ThriftAuthMethod_AUTO = -1,
  ThriftAuthMethod_PASSWORD = 0,
  ThriftAuthMethod_SMS = 1,
  ThriftAuthMethod_VOICE_MESSAGE = 2,
  ThriftAuthMethod_HARDWARE_TOKEN = 3,
  ThriftAuthMethod_DOUBLECLUE_PASSCODE = 4,
  ThriftAuthMethod_PUSH_APPROVAL = 5,
  ThriftAuthMethod_QRCODE_APPROVAL = 6,
  ThriftAuthMethod_SESSION_RECONNECT = 7,
  ThriftAuthMethod_FIDO_U2F = 8
};

enum ClientType {
  ClientType_ANDROID = 0,
  ClientType_I_OS = 1,
  ClientType_WINDOWS = 2,
  ClientType_MAC = 3,
  ClientType_Linux = 4
};

enum CpuArch {
  CpuArch_unknown = 0,
  CpuArch_x86 = 1,
  CpuArch_asm = 2
};

enum CloudSafeOwner {
  CloudSafeOwner_GLOBAL = 0,
  CloudSafeOwner_USER = 1,
  CloudSafeOwner_DEVICE = 2
};

@interface AppException : NSException <TBase, NSCoding> {
  NSString * __error;
  NSString * __info;

  BOOL __error_isset;
  BOOL __info_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) NSString * error;
@property (nonatomic, retain, getter=info, setter=setInfo:) NSString * info;
#endif

- (id) init;
- (id) initWithError: (NSString *) error info: (NSString *) info;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) error;
- (void) setError: (NSString *) error;
#endif
- (BOOL) errorIsSet;

#if !__has_feature(objc_arc)
- (NSString *) info;
- (void) setInfo: (NSString *) info;
#endif
- (BOOL) infoIsSet;

@end

@interface SdkConfig : NSObject <TBase, NSCoding> {
  NSData * __connectionKey;
  NSString * __serverUrl;
  NSString * __transportProtocol;
  NSData * __serverPublicKey;
  NSString * __portalUrl;

  BOOL __connectionKey_isset;
  BOOL __serverUrl_isset;
  BOOL __transportProtocol_isset;
  BOOL __serverPublicKey_isset;
  BOOL __portalUrl_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=connectionKey, setter=setConnectionKey:) NSData * connectionKey;
@property (nonatomic, retain, getter=serverUrl, setter=setServerUrl:) NSString * serverUrl;
@property (nonatomic, retain, getter=transportProtocol, setter=setTransportProtocol:) NSString * transportProtocol;
@property (nonatomic, retain, getter=serverPublicKey, setter=setServerPublicKey:) NSData * serverPublicKey;
@property (nonatomic, retain, getter=portalUrl, setter=setPortalUrl:) NSString * portalUrl;
#endif

- (id) init;
- (id) initWithConnectionKey: (NSData *) connectionKey serverUrl: (NSString *) serverUrl transportProtocol: (NSString *) transportProtocol serverPublicKey: (NSData *) serverPublicKey portalUrl: (NSString *) portalUrl;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) connectionKey;
- (void) setConnectionKey: (NSData *) connectionKey;
#endif
- (BOOL) connectionKeyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) serverUrl;
- (void) setServerUrl: (NSString *) serverUrl;
#endif
- (BOOL) serverUrlIsSet;

#if !__has_feature(objc_arc)
- (NSString *) transportProtocol;
- (void) setTransportProtocol: (NSString *) transportProtocol;
#endif
- (BOOL) transportProtocolIsSet;

#if !__has_feature(objc_arc)
- (NSData *) serverPublicKey;
- (void) setServerPublicKey: (NSData *) serverPublicKey;
#endif
- (BOOL) serverPublicKeyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) portalUrl;
- (void) setPortalUrl: (NSString *) portalUrl;
#endif
- (BOOL) portalUrlIsSet;

@end

@interface AuthGatewayConfig : NSObject <TBase, NSCoding> {
  NSString * __name;
  NSData * __sharedSecret;
  NSString * __tenantName;

  BOOL __name_isset;
  BOOL __sharedSecret_isset;
  BOOL __tenantName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=sharedSecret, setter=setSharedSecret:) NSData * sharedSecret;
@property (nonatomic, retain, getter=tenantName, setter=setTenantName:) NSString * tenantName;
#endif

- (id) init;
- (id) initWithName: (NSString *) name sharedSecret: (NSData *) sharedSecret tenantName: (NSString *) tenantName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSData *) sharedSecret;
- (void) setSharedSecret: (NSData *) sharedSecret;
#endif
- (BOOL) sharedSecretIsSet;

#if !__has_feature(objc_arc)
- (NSString *) tenantName;
- (void) setTenantName: (NSString *) tenantName;
#endif
- (BOOL) tenantNameIsSet;

@end

@interface SdkSettings : NSObject <TBase, NSCoding> {
  int32_t __deviceId;
  NSString * __userId;
  NSString * __deviceName;
  NSData * __privateKey;
  NSData * __publicKey;
  NSData * __offlineKey;
  int32_t __passcodeValidFor;
  NSMutableDictionary * __safe;

  BOOL __deviceId_isset;
  BOOL __userId_isset;
  BOOL __deviceName_isset;
  BOOL __privateKey_isset;
  BOOL __publicKey_isset;
  BOOL __offlineKey_isset;
  BOOL __passcodeValidFor_isset;
  BOOL __safe_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=deviceId, setter=setDeviceId:) int32_t deviceId;
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=deviceName, setter=setDeviceName:) NSString * deviceName;
@property (nonatomic, retain, getter=privateKey, setter=setPrivateKey:) NSData * privateKey;
@property (nonatomic, retain, getter=publicKey, setter=setPublicKey:) NSData * publicKey;
@property (nonatomic, retain, getter=offlineKey, setter=setOfflineKey:) NSData * offlineKey;
@property (nonatomic, getter=passcodeValidFor, setter=setPasscodeValidFor:) int32_t passcodeValidFor;
@property (nonatomic, retain, getter=safe, setter=setSafe:) NSMutableDictionary * safe;
#endif

- (id) init;
- (id) initWithDeviceId: (int32_t) deviceId userId: (NSString *) userId deviceName: (NSString *) deviceName privateKey: (NSData *) privateKey publicKey: (NSData *) publicKey offlineKey: (NSData *) offlineKey passcodeValidFor: (int32_t) passcodeValidFor safe: (NSMutableDictionary *) safe;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) deviceId;
- (void) setDeviceId: (int32_t) deviceId;
#endif
- (BOOL) deviceIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceName;
- (void) setDeviceName: (NSString *) deviceName;
#endif
- (BOOL) deviceNameIsSet;

#if !__has_feature(objc_arc)
- (NSData *) privateKey;
- (void) setPrivateKey: (NSData *) privateKey;
#endif
- (BOOL) privateKeyIsSet;

#if !__has_feature(objc_arc)
- (NSData *) publicKey;
- (void) setPublicKey: (NSData *) publicKey;
#endif
- (BOOL) publicKeyIsSet;

#if !__has_feature(objc_arc)
- (NSData *) offlineKey;
- (void) setOfflineKey: (NSData *) offlineKey;
#endif
- (BOOL) offlineKeyIsSet;

#if !__has_feature(objc_arc)
- (int32_t) passcodeValidFor;
- (void) setPasscodeValidFor: (int32_t) passcodeValidFor;
#endif
- (BOOL) passcodeValidForIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) safe;
- (void) setSafe: (NSMutableDictionary *) safe;
#endif
- (BOOL) safeIsSet;

@end

@interface MsgAttachment : NSObject <TBase, NSCoding> {
  int64_t __id;
  NSString * __name;
  NSString * __mimeType;
  int32_t __size;

  BOOL __id_isset;
  BOOL __name_isset;
  BOOL __mimeType_isset;
  BOOL __size_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int64_t id;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=mimeType, setter=setMimeType:) NSString * mimeType;
@property (nonatomic, getter=size, setter=setSize:) int32_t size;
#endif

- (id) init;
- (id) initWithId: (int64_t) id name: (NSString *) name mimeType: (NSString *) mimeType size: (int32_t) size;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) id;
- (void) setId: (int64_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mimeType;
- (void) setMimeType: (NSString *) mimeType;
#endif
- (BOOL) mimeTypeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) size;
- (void) setSize: (int32_t) size;
#endif
- (BOOL) sizeIsSet;

@end

@interface AppMessage : NSObject <TBase, NSCoding> {
  int64_t __id;
  int __priority;
  int32_t __templateId;
  BOOL __signitureRequired;
  BOOL __responseRequired;
  int32_t __responseTime;
  int64_t __responseTo;
  NSMutableDictionary * __data;

  BOOL __id_isset;
  BOOL __priority_isset;
  BOOL __templateId_isset;
  BOOL __signitureRequired_isset;
  BOOL __responseRequired_isset;
  BOOL __responseTime_isset;
  BOOL __responseTo_isset;
  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int64_t id;
@property (nonatomic, getter=priority, setter=setPriority:) int priority;
@property (nonatomic, getter=templateId, setter=setTemplateId:) int32_t templateId;
@property (nonatomic, getter=signitureRequired, setter=setSignitureRequired:) BOOL signitureRequired;
@property (nonatomic, getter=responseRequired, setter=setResponseRequired:) BOOL responseRequired;
@property (nonatomic, getter=responseTime, setter=setResponseTime:) int32_t responseTime;
@property (nonatomic, getter=responseTo, setter=setResponseTo:) int64_t responseTo;
@property (nonatomic, retain, getter=data, setter=setData:) NSMutableDictionary * data;
#endif

- (id) init;
- (id) initWithId: (int64_t) id priority: (int) priority templateId: (int32_t) templateId signitureRequired: (BOOL) signitureRequired responseRequired: (BOOL) responseRequired responseTime: (int32_t) responseTime responseTo: (int64_t) responseTo data: (NSMutableDictionary *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) id;
- (void) setId: (int64_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (int) priority;
- (void) setPriority: (int) priority;
#endif
- (BOOL) priorityIsSet;

#if !__has_feature(objc_arc)
- (int32_t) templateId;
- (void) setTemplateId: (int32_t) templateId;
#endif
- (BOOL) templateIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) signitureRequired;
- (void) setSignitureRequired: (BOOL) signitureRequired;
#endif
- (BOOL) signitureRequiredIsSet;

#if !__has_feature(objc_arc)
- (BOOL) responseRequired;
- (void) setResponseRequired: (BOOL) responseRequired;
#endif
- (BOOL) responseRequiredIsSet;

#if !__has_feature(objc_arc)
- (int32_t) responseTime;
- (void) setResponseTime: (int32_t) responseTime;
#endif
- (BOOL) responseTimeIsSet;

#if !__has_feature(objc_arc)
- (int64_t) responseTo;
- (void) setResponseTo: (int64_t) responseTo;
#endif
- (BOOL) responseToIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) data;
- (void) setData: (NSMutableDictionary *) data;
#endif
- (BOOL) dataIsSet;

@end

@interface AppMessageResponse : NSObject <TBase, NSCoding> {
  int64_t __id;
  NSString * __actionId;
  int __errorCode;
  NSString * __errorMessage;
  BOOL __read;
  NSMutableDictionary * __responseData;
  NSData * __signature;

  BOOL __id_isset;
  BOOL __actionId_isset;
  BOOL __errorCode_isset;
  BOOL __errorMessage_isset;
  BOOL __read_isset;
  BOOL __responseData_isset;
  BOOL __signature_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int64_t id;
@property (nonatomic, retain, getter=actionId, setter=setActionId:) NSString * actionId;
@property (nonatomic, getter=errorCode, setter=setErrorCode:) int errorCode;
@property (nonatomic, retain, getter=errorMessage, setter=setErrorMessage:) NSString * errorMessage;
@property (nonatomic, getter=read, setter=setRead:) BOOL read;
@property (nonatomic, retain, getter=responseData, setter=setResponseData:) NSMutableDictionary * responseData;
@property (nonatomic, retain, getter=signature, setter=setSignature:) NSData * signature;
#endif

- (id) init;
- (id) initWithId: (int64_t) id actionId: (NSString *) actionId errorCode: (int) errorCode errorMessage: (NSString *) errorMessage read: (BOOL) read responseData: (NSMutableDictionary *) responseData signature: (NSData *) signature;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) id;
- (void) setId: (int64_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) actionId;
- (void) setActionId: (NSString *) actionId;
#endif
- (BOOL) actionIdIsSet;

#if !__has_feature(objc_arc)
- (int) errorCode;
- (void) setErrorCode: (int) errorCode;
#endif
- (BOOL) errorCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) errorMessage;
- (void) setErrorMessage: (NSString *) errorMessage;
#endif
- (BOOL) errorMessageIsSet;

#if !__has_feature(objc_arc)
- (BOOL) read;
- (void) setRead: (BOOL) read;
#endif
- (BOOL) readIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) responseData;
- (void) setResponseData: (NSMutableDictionary *) responseData;
#endif
- (BOOL) responseDataIsSet;

#if !__has_feature(objc_arc)
- (NSData *) signature;
- (void) setSignature: (NSData *) signature;
#endif
- (BOOL) signatureIsSet;

@end

@interface AuthAppMessageResponse : NSObject <TBase, NSCoding> {
  BOOL __succesful;
  NSString * __errorCode;
  NSString * __errorMessage;
  NSData * __userKey;
  int32_t __sessionCookieExpiresOn;
  NSString * __sessionCookie;
  int64_t __msgId;

  BOOL __succesful_isset;
  BOOL __errorCode_isset;
  BOOL __errorMessage_isset;
  BOOL __userKey_isset;
  BOOL __sessionCookieExpiresOn_isset;
  BOOL __sessionCookie_isset;
  BOOL __msgId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=succesful, setter=setSuccesful:) BOOL succesful;
@property (nonatomic, retain, getter=errorCode, setter=setErrorCode:) NSString * errorCode;
@property (nonatomic, retain, getter=errorMessage, setter=setErrorMessage:) NSString * errorMessage;
@property (nonatomic, retain, getter=userKey, setter=setUserKey:) NSData * userKey;
@property (nonatomic, getter=sessionCookieExpiresOn, setter=setSessionCookieExpiresOn:) int32_t sessionCookieExpiresOn;
@property (nonatomic, retain, getter=sessionCookie, setter=setSessionCookie:) NSString * sessionCookie;
@property (nonatomic, getter=msgId, setter=setMsgId:) int64_t msgId;
#endif

- (id) init;
- (id) initWithSuccesful: (BOOL) succesful errorCode: (NSString *) errorCode errorMessage: (NSString *) errorMessage userKey: (NSData *) userKey sessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn sessionCookie: (NSString *) sessionCookie msgId: (int64_t) msgId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) succesful;
- (void) setSuccesful: (BOOL) succesful;
#endif
- (BOOL) succesfulIsSet;

#if !__has_feature(objc_arc)
- (NSString *) errorCode;
- (void) setErrorCode: (NSString *) errorCode;
#endif
- (BOOL) errorCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) errorMessage;
- (void) setErrorMessage: (NSString *) errorMessage;
#endif
- (BOOL) errorMessageIsSet;

#if !__has_feature(objc_arc)
- (NSData *) userKey;
- (void) setUserKey: (NSData *) userKey;
#endif
- (BOOL) userKeyIsSet;

#if !__has_feature(objc_arc)
- (int32_t) sessionCookieExpiresOn;
- (void) setSessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn;
#endif
- (BOOL) sessionCookieExpiresOnIsSet;

#if !__has_feature(objc_arc)
- (NSString *) sessionCookie;
- (void) setSessionCookie: (NSString *) sessionCookie;
#endif
- (BOOL) sessionCookieIsSet;

#if !__has_feature(objc_arc)
- (int64_t) msgId;
- (void) setMsgId: (int64_t) msgId;
#endif
- (BOOL) msgIdIsSet;

@end

@interface AppVersion : NSObject <TBase, NSCoding> {
  int32_t __version;
  NSString * __name;
  NSString * __state;

  BOOL __version_isset;
  BOOL __name_isset;
  BOOL __state_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=version, setter=setVersion:) int32_t version;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=state, setter=setState:) NSString * state;
#endif

- (id) init;
- (id) initWithVersion: (int32_t) version name: (NSString *) name state: (NSString *) state;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) version;
- (void) setVersion: (int32_t) version;
#endif
- (BOOL) versionIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) state;
- (void) setState: (NSString *) state;
#endif
- (BOOL) stateIsSet;

@end

@interface Template : NSObject <TBase, NSCoding> {
  int32_t __id;
  NSString * __name;
  NSString * __locale;
  NSString * __content;

  BOOL __id_isset;
  BOOL __name_isset;
  BOOL __locale_isset;
  BOOL __content_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=locale, setter=setLocale:) NSString * locale;
@property (nonatomic, retain, getter=content, setter=setContent:) NSString * content;
#endif

- (id) init;
- (id) initWithId: (int32_t) id name: (NSString *) name locale: (NSString *) locale content: (NSString *) content;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) locale;
- (void) setLocale: (NSString *) locale;
#endif
- (BOOL) localeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) content;
- (void) setContent: (NSString *) content;
#endif
- (BOOL) contentIsSet;

@end

@interface SdkCloudSafeKey : NSObject <TBase, NSCoding> {
  int __owner;
  NSString * __name;

  BOOL __owner_isset;
  BOOL __name_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=owner, setter=setOwner:) int owner;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
#endif

- (id) init;
- (id) initWithOwner: (int) owner name: (NSString *) name;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) owner;
- (void) setOwner: (int) owner;
#endif
- (BOOL) ownerIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

@end

@interface SdkCloudSafe : NSObject <TBase, NSCoding> {
  SdkCloudSafeKey * __uniqueKey;
  NSData * __content;
  NSString * __options;
  int64_t __discardAfter;
  int64_t __lastModified;
  NSData * __signature;
  int64_t __length;
  NSString * __sharedUser;
  BOOL __writeAccess;

  BOOL __uniqueKey_isset;
  BOOL __content_isset;
  BOOL __options_isset;
  BOOL __discardAfter_isset;
  BOOL __lastModified_isset;
  BOOL __signature_isset;
  BOOL __length_isset;
  BOOL __sharedUser_isset;
  BOOL __writeAccess_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uniqueKey, setter=setUniqueKey:) SdkCloudSafeKey * uniqueKey;
@property (nonatomic, retain, getter=content, setter=setContent:) NSData * content;
@property (nonatomic, retain, getter=options, setter=setOptions:) NSString * options;
@property (nonatomic, getter=discardAfter, setter=setDiscardAfter:) int64_t discardAfter;
@property (nonatomic, getter=lastModified, setter=setLastModified:) int64_t lastModified;
@property (nonatomic, retain, getter=signature, setter=setSignature:) NSData * signature;
@property (nonatomic, getter=length, setter=setLength:) int64_t length;
@property (nonatomic, retain, getter=sharedUser, setter=setSharedUser:) NSString * sharedUser;
@property (nonatomic, getter=writeAccess, setter=setWriteAccess:) BOOL writeAccess;
#endif

- (id) init;
- (id) initWithUniqueKey: (SdkCloudSafeKey *) uniqueKey content: (NSData *) content options: (NSString *) options discardAfter: (int64_t) discardAfter lastModified: (int64_t) lastModified signature: (NSData *) signature length: (int64_t) length sharedUser: (NSString *) sharedUser writeAccess: (BOOL) writeAccess;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SdkCloudSafeKey *) uniqueKey;
- (void) setUniqueKey: (SdkCloudSafeKey *) uniqueKey;
#endif
- (BOOL) uniqueKeyIsSet;

#if !__has_feature(objc_arc)
- (NSData *) content;
- (void) setContent: (NSData *) content;
#endif
- (BOOL) contentIsSet;

#if !__has_feature(objc_arc)
- (NSString *) options;
- (void) setOptions: (NSString *) options;
#endif
- (BOOL) optionsIsSet;

#if !__has_feature(objc_arc)
- (int64_t) discardAfter;
- (void) setDiscardAfter: (int64_t) discardAfter;
#endif
- (BOOL) discardAfterIsSet;

#if !__has_feature(objc_arc)
- (int64_t) lastModified;
- (void) setLastModified: (int64_t) lastModified;
#endif
- (BOOL) lastModifiedIsSet;

#if !__has_feature(objc_arc)
- (NSData *) signature;
- (void) setSignature: (NSData *) signature;
#endif
- (BOOL) signatureIsSet;

#if !__has_feature(objc_arc)
- (int64_t) length;
- (void) setLength: (int64_t) length;
#endif
- (BOOL) lengthIsSet;

#if !__has_feature(objc_arc)
- (NSString *) sharedUser;
- (void) setSharedUser: (NSString *) sharedUser;
#endif
- (BOOL) sharedUserIsSet;

#if !__has_feature(objc_arc)
- (BOOL) writeAccess;
- (void) setWriteAccess: (BOOL) writeAccess;
#endif
- (BOOL) writeAccessIsSet;

@end

@interface User : NSObject <TBase, NSCoding> {
  NSString * __loginId;
  BOOL __updatePushNotification;
  BOOL __usingReverseProxy;

  BOOL __loginId_isset;
  BOOL __updatePushNotification_isset;
  BOOL __usingReverseProxy_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=loginId, setter=setLoginId:) NSString * loginId;
@property (nonatomic, getter=updatePushNotification, setter=setUpdatePushNotification:) BOOL updatePushNotification;
@property (nonatomic, getter=usingReverseProxy, setter=setUsingReverseProxy:) BOOL usingReverseProxy;
#endif

- (id) init;
- (id) initWithLoginId: (NSString *) loginId updatePushNotification: (BOOL) updatePushNotification usingReverseProxy: (BOOL) usingReverseProxy;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) loginId;
- (void) setLoginId: (NSString *) loginId;
#endif
- (BOOL) loginIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) updatePushNotification;
- (void) setUpdatePushNotification: (BOOL) updatePushNotification;
#endif
- (BOOL) updatePushNotificationIsSet;

#if !__has_feature(objc_arc)
- (BOOL) usingReverseProxy;
- (void) setUsingReverseProxy: (BOOL) usingReverseProxy;
#endif
- (BOOL) usingReverseProxyIsSet;

@end

@interface ActivatedUsers : NSObject <TBase, NSCoding> {
  NSMutableArray * __users;

  BOOL __users_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=users, setter=setUsers:) NSMutableArray * users;
#endif

- (id) init;
- (id) initWithUsers: (NSMutableArray *) users;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) users;
- (void) setUsers: (NSMutableArray *) users;
#endif
- (BOOL) usersIsSet;

@end

@interface RpOpen : NSObject <TBase, NSCoding> {
  NSString * __remoteAddress;
  AppVersion * __appVersion;
  AppVersion * __libVersion;
  NSString * __tenantName;

  BOOL __remoteAddress_isset;
  BOOL __appVersion_isset;
  BOOL __libVersion_isset;
  BOOL __tenantName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=remoteAddress, setter=setRemoteAddress:) NSString * remoteAddress;
@property (nonatomic, retain, getter=appVersion, setter=setAppVersion:) AppVersion * appVersion;
@property (nonatomic, retain, getter=libVersion, setter=setLibVersion:) AppVersion * libVersion;
@property (nonatomic, retain, getter=tenantName, setter=setTenantName:) NSString * tenantName;
#endif

- (id) init;
- (id) initWithRemoteAddress: (NSString *) remoteAddress appVersion: (AppVersion *) appVersion libVersion: (AppVersion *) libVersion tenantName: (NSString *) tenantName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) remoteAddress;
- (void) setRemoteAddress: (NSString *) remoteAddress;
#endif
- (BOOL) remoteAddressIsSet;

#if !__has_feature(objc_arc)
- (AppVersion *) appVersion;
- (void) setAppVersion: (AppVersion *) appVersion;
#endif
- (BOOL) appVersionIsSet;

#if !__has_feature(objc_arc)
- (AppVersion *) libVersion;
- (void) setLibVersion: (AppVersion *) libVersion;
#endif
- (BOOL) libVersionIsSet;

#if !__has_feature(objc_arc)
- (NSString *) tenantName;
- (void) setTenantName: (NSString *) tenantName;
#endif
- (BOOL) tenantNameIsSet;

@end

@interface AppAccount : NSObject <TBase, NSCoding> {
  NSString * __name;
  NSString * __userName;
  NSString * __tenantName;
  NSString * __realmName;
  NSString * __fullQualifiedName;
  BOOL __updatePushNotification;
  BOOL __usingReverseProxy;
  NSString * __settingsFileName;

  BOOL __name_isset;
  BOOL __userName_isset;
  BOOL __tenantName_isset;
  BOOL __realmName_isset;
  BOOL __fullQualifiedName_isset;
  BOOL __updatePushNotification_isset;
  BOOL __usingReverseProxy_isset;
  BOOL __settingsFileName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=userName, setter=setUserName:) NSString * userName;
@property (nonatomic, retain, getter=tenantName, setter=setTenantName:) NSString * tenantName;
@property (nonatomic, retain, getter=realmName, setter=setRealmName:) NSString * realmName;
@property (nonatomic, retain, getter=fullQualifiedName, setter=setFullQualifiedName:) NSString * fullQualifiedName;
@property (nonatomic, getter=updatePushNotification, setter=setUpdatePushNotification:) BOOL updatePushNotification;
@property (nonatomic, getter=usingReverseProxy, setter=setUsingReverseProxy:) BOOL usingReverseProxy;
@property (nonatomic, retain, getter=settingsFileName, setter=setSettingsFileName:) NSString * settingsFileName;
#endif

- (id) init;
- (id) initWithName: (NSString *) name userName: (NSString *) userName tenantName: (NSString *) tenantName realmName: (NSString *) realmName fullQualifiedName: (NSString *) fullQualifiedName updatePushNotification: (BOOL) updatePushNotification usingReverseProxy: (BOOL) usingReverseProxy settingsFileName: (NSString *) settingsFileName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userName;
- (void) setUserName: (NSString *) userName;
#endif
- (BOOL) userNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) tenantName;
- (void) setTenantName: (NSString *) tenantName;
#endif
- (BOOL) tenantNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) realmName;
- (void) setRealmName: (NSString *) realmName;
#endif
- (BOOL) realmNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fullQualifiedName;
- (void) setFullQualifiedName: (NSString *) fullQualifiedName;
#endif
- (BOOL) fullQualifiedNameIsSet;

#if !__has_feature(objc_arc)
- (BOOL) updatePushNotification;
- (void) setUpdatePushNotification: (BOOL) updatePushNotification;
#endif
- (BOOL) updatePushNotificationIsSet;

#if !__has_feature(objc_arc)
- (BOOL) usingReverseProxy;
- (void) setUsingReverseProxy: (BOOL) usingReverseProxy;
#endif
- (BOOL) usingReverseProxyIsSet;

#if !__has_feature(objc_arc)
- (NSString *) settingsFileName;
- (void) setSettingsFileName: (NSString *) settingsFileName;
#endif
- (BOOL) settingsFileNameIsSet;

@end

@interface AppAccounts : NSObject <TBase, NSCoding> {
  NSMutableArray * __accounts;

  BOOL __accounts_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=accounts, setter=setAccounts:) NSMutableArray * accounts;
#endif

- (id) init;
- (id) initWithAccounts: (NSMutableArray *) accounts;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) accounts;
- (void) setAccounts: (NSMutableArray *) accounts;
#endif
- (BOOL) accountsIsSet;

@end

@protocol AppSystem <NSObject>
@end

@interface AppSystemClient : TBaseClient <AppSystem> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface AppSystemProcessor : NSObject <TProcessor> {
  id <AppSystem> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithAppSystem: (id <AppSystem>) service;
- (id<AppSystem>) service;
@end

@interface AppSystemConstants : NSObject {
}
+ (uint8_t) PROTOCOL_VERSION;
+ (uint8_t) PROTOCOL_APP_TO_SERVER;
+ (uint8_t) PROTOCOL_SERVER_TO_APP;
+ (uint8_t) PROTOCOL_REVERSE_PROXY;
+ (uint8_t) REVERSE_PROXY_OPEN;
+ (uint8_t) REVERSE_PROXY_CLOSE;
+ (uint8_t) REVERSE_PROXY_DATA;
+ (NSString *) SIGNATURE_STRING;
+ (NSString *) DcemFileName;
+ (NSString *) SdkConfigFileName;
+ (NSString *) SignatureFileName;
+ (NSString *) TrustStoreFileName;
+ (NSString *) AuthConnectorFileName;
+ (NSString *) UserFullQualifiedId;
+ (NSString *) PasswordLessLogin;
+ (NSString *) PushNotificationTitle;
+ (NSString *) PushNotificationBody;
+ (NSString *) PushNotificationAction;
+ (NSString *) TENANT_SEPERATOR;
+ (NSString *) REALM_SEPERATOR;
+ (NSString *) PUSH_NOTIFICATION_TOKEN;
+ (NSString *) UNLOCK_USER_AUTH;
+ (NSString *) TRUE_VALUE;
@end
