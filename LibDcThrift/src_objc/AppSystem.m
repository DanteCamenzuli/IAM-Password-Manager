/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "AppSystem.h"

@implementation AppException

- (id) init
{
  return [super initWithName: @"AppException" reason: @"unknown" userInfo: nil];
}

- (id) initWithError: (NSString *) error info: (NSString *) info
{
  self = [self init];
  __error = [error retain_stub];
  __error_isset = YES;
  __info = [info retain_stub];
  __info_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"info"])
  {
    __info = [[decoder decodeObjectForKey: @"info"] retain_stub];
    __info_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__info_isset)
  {
    [encoder encodeObject: __info forKey: @"info"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __info_isset ? 2654435761 : 0;
  if (__info_isset)
  {
    hash = (hash * 31) ^ [__info hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppException class]]) {
    return NO;
  }
  AppException *other = (AppException *)anObject;
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__info_isset != other->__info_isset) ||
      (__info_isset && ((__info || other->__info) && ![__info isEqual:other->__info]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__error release_stub];
  [__info release_stub];
  [super dealloc_stub];
}

- (NSString *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (NSString *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (NSString *) info {
  return [[__info retain_stub] autorelease_stub];
}

- (void) setInfo: (NSString *) info {
  [info retain_stub];
  [__info release_stub];
  __info = info;
  __info_isset = YES;
}

- (BOOL) infoIsSet {
  return __info_isset;
}

- (void) unsetInfo {
  [__info release_stub];
  __info = nil;
  __info_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setError: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInfo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppException"];
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __error];
      [outProtocol writeFieldEnd];
    }
  }
  if (__info_isset) {
    if (__info != nil) {
      [outProtocol writeFieldBeginWithName: @"info" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __info];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppException("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"\"%@\"", __error];
  [ms appendString: @",info:"];
  [ms appendFormat: @"\"%@\"", __info];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SdkConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithConnectionKey: (NSData *) connectionKey serverUrl: (NSString *) serverUrl transportProtocol: (NSString *) transportProtocol serverPublicKey: (NSData *) serverPublicKey portalUrl: (NSString *) portalUrl
{
  self = [super init];
  __connectionKey = [connectionKey retain_stub];
  __connectionKey_isset = YES;
  __serverUrl = [serverUrl retain_stub];
  __serverUrl_isset = YES;
  __transportProtocol = [transportProtocol retain_stub];
  __transportProtocol_isset = YES;
  __serverPublicKey = [serverPublicKey retain_stub];
  __serverPublicKey_isset = YES;
  __portalUrl = [portalUrl retain_stub];
  __portalUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"connectionKey"])
  {
    __connectionKey = [[decoder decodeObjectForKey: @"connectionKey"] retain_stub];
    __connectionKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"serverUrl"])
  {
    __serverUrl = [[decoder decodeObjectForKey: @"serverUrl"] retain_stub];
    __serverUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"transportProtocol"])
  {
    __transportProtocol = [[decoder decodeObjectForKey: @"transportProtocol"] retain_stub];
    __transportProtocol_isset = YES;
  }
  if ([decoder containsValueForKey: @"serverPublicKey"])
  {
    __serverPublicKey = [[decoder decodeObjectForKey: @"serverPublicKey"] retain_stub];
    __serverPublicKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"portalUrl"])
  {
    __portalUrl = [[decoder decodeObjectForKey: @"portalUrl"] retain_stub];
    __portalUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__connectionKey_isset)
  {
    [encoder encodeObject: __connectionKey forKey: @"connectionKey"];
  }
  if (__serverUrl_isset)
  {
    [encoder encodeObject: __serverUrl forKey: @"serverUrl"];
  }
  if (__transportProtocol_isset)
  {
    [encoder encodeObject: __transportProtocol forKey: @"transportProtocol"];
  }
  if (__serverPublicKey_isset)
  {
    [encoder encodeObject: __serverPublicKey forKey: @"serverPublicKey"];
  }
  if (__portalUrl_isset)
  {
    [encoder encodeObject: __portalUrl forKey: @"portalUrl"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __connectionKey_isset ? 2654435761 : 0;
  if (__connectionKey_isset)
  {
    hash = (hash * 31) ^ [__connectionKey hash];
  }
  hash = (hash * 31) ^ __serverUrl_isset ? 2654435761 : 0;
  if (__serverUrl_isset)
  {
    hash = (hash * 31) ^ [__serverUrl hash];
  }
  hash = (hash * 31) ^ __transportProtocol_isset ? 2654435761 : 0;
  if (__transportProtocol_isset)
  {
    hash = (hash * 31) ^ [__transportProtocol hash];
  }
  hash = (hash * 31) ^ __serverPublicKey_isset ? 2654435761 : 0;
  if (__serverPublicKey_isset)
  {
    hash = (hash * 31) ^ [__serverPublicKey hash];
  }
  hash = (hash * 31) ^ __portalUrl_isset ? 2654435761 : 0;
  if (__portalUrl_isset)
  {
    hash = (hash * 31) ^ [__portalUrl hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SdkConfig class]]) {
    return NO;
  }
  SdkConfig *other = (SdkConfig *)anObject;
  if ((__connectionKey_isset != other->__connectionKey_isset) ||
      (__connectionKey_isset && ((__connectionKey || other->__connectionKey) && ![__connectionKey isEqual:other->__connectionKey]))) {
    return NO;
  }
  if ((__serverUrl_isset != other->__serverUrl_isset) ||
      (__serverUrl_isset && ((__serverUrl || other->__serverUrl) && ![__serverUrl isEqual:other->__serverUrl]))) {
    return NO;
  }
  if ((__transportProtocol_isset != other->__transportProtocol_isset) ||
      (__transportProtocol_isset && ((__transportProtocol || other->__transportProtocol) && ![__transportProtocol isEqual:other->__transportProtocol]))) {
    return NO;
  }
  if ((__serverPublicKey_isset != other->__serverPublicKey_isset) ||
      (__serverPublicKey_isset && ((__serverPublicKey || other->__serverPublicKey) && ![__serverPublicKey isEqual:other->__serverPublicKey]))) {
    return NO;
  }
  if ((__portalUrl_isset != other->__portalUrl_isset) ||
      (__portalUrl_isset && ((__portalUrl || other->__portalUrl) && ![__portalUrl isEqual:other->__portalUrl]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__connectionKey release_stub];
  [__serverUrl release_stub];
  [__transportProtocol release_stub];
  [__serverPublicKey release_stub];
  [__portalUrl release_stub];
  [super dealloc_stub];
}

- (NSData *) connectionKey {
  return [[__connectionKey retain_stub] autorelease_stub];
}

- (void) setConnectionKey: (NSData *) connectionKey {
  [connectionKey retain_stub];
  [__connectionKey release_stub];
  __connectionKey = connectionKey;
  __connectionKey_isset = YES;
}

- (BOOL) connectionKeyIsSet {
  return __connectionKey_isset;
}

- (void) unsetConnectionKey {
  [__connectionKey release_stub];
  __connectionKey = nil;
  __connectionKey_isset = NO;
}

- (NSString *) serverUrl {
  return [[__serverUrl retain_stub] autorelease_stub];
}

- (void) setServerUrl: (NSString *) serverUrl {
  [serverUrl retain_stub];
  [__serverUrl release_stub];
  __serverUrl = serverUrl;
  __serverUrl_isset = YES;
}

- (BOOL) serverUrlIsSet {
  return __serverUrl_isset;
}

- (void) unsetServerUrl {
  [__serverUrl release_stub];
  __serverUrl = nil;
  __serverUrl_isset = NO;
}

- (NSString *) transportProtocol {
  return [[__transportProtocol retain_stub] autorelease_stub];
}

- (void) setTransportProtocol: (NSString *) transportProtocol {
  [transportProtocol retain_stub];
  [__transportProtocol release_stub];
  __transportProtocol = transportProtocol;
  __transportProtocol_isset = YES;
}

- (BOOL) transportProtocolIsSet {
  return __transportProtocol_isset;
}

- (void) unsetTransportProtocol {
  [__transportProtocol release_stub];
  __transportProtocol = nil;
  __transportProtocol_isset = NO;
}

- (NSData *) serverPublicKey {
  return [[__serverPublicKey retain_stub] autorelease_stub];
}

- (void) setServerPublicKey: (NSData *) serverPublicKey {
  [serverPublicKey retain_stub];
  [__serverPublicKey release_stub];
  __serverPublicKey = serverPublicKey;
  __serverPublicKey_isset = YES;
}

- (BOOL) serverPublicKeyIsSet {
  return __serverPublicKey_isset;
}

- (void) unsetServerPublicKey {
  [__serverPublicKey release_stub];
  __serverPublicKey = nil;
  __serverPublicKey_isset = NO;
}

- (NSString *) portalUrl {
  return [[__portalUrl retain_stub] autorelease_stub];
}

- (void) setPortalUrl: (NSString *) portalUrl {
  [portalUrl retain_stub];
  [__portalUrl release_stub];
  __portalUrl = portalUrl;
  __portalUrl_isset = YES;
}

- (BOOL) portalUrlIsSet {
  return __portalUrl_isset;
}

- (void) unsetPortalUrl {
  [__portalUrl release_stub];
  __portalUrl = nil;
  __portalUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setConnectionKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServerUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTransportProtocol: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setServerPublicKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPortalUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SdkConfig"];
  if (__connectionKey_isset) {
    if (__connectionKey != nil) {
      [outProtocol writeFieldBeginWithName: @"connectionKey" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __connectionKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serverUrl_isset) {
    if (__serverUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"serverUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serverUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__transportProtocol_isset) {
    if (__transportProtocol != nil) {
      [outProtocol writeFieldBeginWithName: @"transportProtocol" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __transportProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serverPublicKey_isset) {
    if (__serverPublicKey != nil) {
      [outProtocol writeFieldBeginWithName: @"serverPublicKey" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __serverPublicKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__portalUrl_isset) {
    if (__portalUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"portalUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __portalUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SdkConfig("];
  [ms appendString: @"connectionKey:"];
  [ms appendFormat: @"\"%@\"", __connectionKey];
  [ms appendString: @",serverUrl:"];
  [ms appendFormat: @"\"%@\"", __serverUrl];
  [ms appendString: @",transportProtocol:"];
  [ms appendFormat: @"\"%@\"", __transportProtocol];
  [ms appendString: @",serverPublicKey:"];
  [ms appendFormat: @"\"%@\"", __serverPublicKey];
  [ms appendString: @",portalUrl:"];
  [ms appendFormat: @"\"%@\"", __portalUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthGatewayConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name sharedSecret: (NSData *) sharedSecret tenantName: (NSString *) tenantName
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __sharedSecret = [sharedSecret retain_stub];
  __sharedSecret_isset = YES;
  __tenantName = [tenantName retain_stub];
  __tenantName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedSecret"])
  {
    __sharedSecret = [[decoder decodeObjectForKey: @"sharedSecret"] retain_stub];
    __sharedSecret_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantName"])
  {
    __tenantName = [[decoder decodeObjectForKey: @"tenantName"] retain_stub];
    __tenantName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__sharedSecret_isset)
  {
    [encoder encodeObject: __sharedSecret forKey: @"sharedSecret"];
  }
  if (__tenantName_isset)
  {
    [encoder encodeObject: __tenantName forKey: @"tenantName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __sharedSecret_isset ? 2654435761 : 0;
  if (__sharedSecret_isset)
  {
    hash = (hash * 31) ^ [__sharedSecret hash];
  }
  hash = (hash * 31) ^ __tenantName_isset ? 2654435761 : 0;
  if (__tenantName_isset)
  {
    hash = (hash * 31) ^ [__tenantName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthGatewayConfig class]]) {
    return NO;
  }
  AuthGatewayConfig *other = (AuthGatewayConfig *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__sharedSecret_isset != other->__sharedSecret_isset) ||
      (__sharedSecret_isset && ((__sharedSecret || other->__sharedSecret) && ![__sharedSecret isEqual:other->__sharedSecret]))) {
    return NO;
  }
  if ((__tenantName_isset != other->__tenantName_isset) ||
      (__tenantName_isset && ((__tenantName || other->__tenantName) && ![__tenantName isEqual:other->__tenantName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__sharedSecret release_stub];
  [__tenantName release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSData *) sharedSecret {
  return [[__sharedSecret retain_stub] autorelease_stub];
}

- (void) setSharedSecret: (NSData *) sharedSecret {
  [sharedSecret retain_stub];
  [__sharedSecret release_stub];
  __sharedSecret = sharedSecret;
  __sharedSecret_isset = YES;
}

- (BOOL) sharedSecretIsSet {
  return __sharedSecret_isset;
}

- (void) unsetSharedSecret {
  [__sharedSecret release_stub];
  __sharedSecret = nil;
  __sharedSecret_isset = NO;
}

- (NSString *) tenantName {
  return [[__tenantName retain_stub] autorelease_stub];
}

- (void) setTenantName: (NSString *) tenantName {
  [tenantName retain_stub];
  [__tenantName release_stub];
  __tenantName = tenantName;
  __tenantName_isset = YES;
}

- (BOOL) tenantNameIsSet {
  return __tenantName_isset;
}

- (void) unsetTenantName {
  [__tenantName release_stub];
  __tenantName = nil;
  __tenantName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSharedSecret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTenantName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthGatewayConfig"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedSecret_isset) {
    if (__sharedSecret != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedSecret" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __sharedSecret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tenantName_isset) {
    if (__tenantName != nil) {
      [outProtocol writeFieldBeginWithName: @"tenantName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __tenantName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthGatewayConfig("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",sharedSecret:"];
  [ms appendFormat: @"\"%@\"", __sharedSecret];
  [ms appendString: @",tenantName:"];
  [ms appendFormat: @"\"%@\"", __tenantName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SdkSettings

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceId: (int32_t) deviceId userId: (NSString *) userId deviceName: (NSString *) deviceName privateKey: (NSData *) privateKey publicKey: (NSData *) publicKey offlineKey: (NSData *) offlineKey passcodeValidFor: (int32_t) passcodeValidFor safe: (NSMutableDictionary *) safe
{
  self = [super init];
  __deviceId = deviceId;
  __deviceId_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __deviceName = [deviceName retain_stub];
  __deviceName_isset = YES;
  __privateKey = [privateKey retain_stub];
  __privateKey_isset = YES;
  __publicKey = [publicKey retain_stub];
  __publicKey_isset = YES;
  __offlineKey = [offlineKey retain_stub];
  __offlineKey_isset = YES;
  __passcodeValidFor = passcodeValidFor;
  __passcodeValidFor_isset = YES;
  __safe = [safe retain_stub];
  __safe_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [decoder decodeInt32ForKey: @"deviceId"];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceName"])
  {
    __deviceName = [[decoder decodeObjectForKey: @"deviceName"] retain_stub];
    __deviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"privateKey"])
  {
    __privateKey = [[decoder decodeObjectForKey: @"privateKey"] retain_stub];
    __privateKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"publicKey"])
  {
    __publicKey = [[decoder decodeObjectForKey: @"publicKey"] retain_stub];
    __publicKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"offlineKey"])
  {
    __offlineKey = [[decoder decodeObjectForKey: @"offlineKey"] retain_stub];
    __offlineKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"passcodeValidFor"])
  {
    __passcodeValidFor = [decoder decodeInt32ForKey: @"passcodeValidFor"];
    __passcodeValidFor_isset = YES;
  }
  if ([decoder containsValueForKey: @"safe"])
  {
    __safe = [[decoder decodeObjectForKey: @"safe"] retain_stub];
    __safe_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeInt32: __deviceId forKey: @"deviceId"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__deviceName_isset)
  {
    [encoder encodeObject: __deviceName forKey: @"deviceName"];
  }
  if (__privateKey_isset)
  {
    [encoder encodeObject: __privateKey forKey: @"privateKey"];
  }
  if (__publicKey_isset)
  {
    [encoder encodeObject: __publicKey forKey: @"publicKey"];
  }
  if (__offlineKey_isset)
  {
    [encoder encodeObject: __offlineKey forKey: @"offlineKey"];
  }
  if (__passcodeValidFor_isset)
  {
    [encoder encodeInt32: __passcodeValidFor forKey: @"passcodeValidFor"];
  }
  if (__safe_isset)
  {
    [encoder encodeObject: __safe forKey: @"safe"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __deviceId_isset ? 2654435761 : 0;
  if (__deviceId_isset)
  {
    hash = (hash * 31) ^ [@(__deviceId) hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __deviceName_isset ? 2654435761 : 0;
  if (__deviceName_isset)
  {
    hash = (hash * 31) ^ [__deviceName hash];
  }
  hash = (hash * 31) ^ __privateKey_isset ? 2654435761 : 0;
  if (__privateKey_isset)
  {
    hash = (hash * 31) ^ [__privateKey hash];
  }
  hash = (hash * 31) ^ __publicKey_isset ? 2654435761 : 0;
  if (__publicKey_isset)
  {
    hash = (hash * 31) ^ [__publicKey hash];
  }
  hash = (hash * 31) ^ __offlineKey_isset ? 2654435761 : 0;
  if (__offlineKey_isset)
  {
    hash = (hash * 31) ^ [__offlineKey hash];
  }
  hash = (hash * 31) ^ __passcodeValidFor_isset ? 2654435761 : 0;
  if (__passcodeValidFor_isset)
  {
    hash = (hash * 31) ^ [@(__passcodeValidFor) hash];
  }
  hash = (hash * 31) ^ __safe_isset ? 2654435761 : 0;
  if (__safe_isset)
  {
    hash = (hash * 31) ^ [__safe hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SdkSettings class]]) {
    return NO;
  }
  SdkSettings *other = (SdkSettings *)anObject;
  if ((__deviceId_isset != other->__deviceId_isset) ||
      (__deviceId_isset && (__deviceId != other->__deviceId))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__deviceName_isset != other->__deviceName_isset) ||
      (__deviceName_isset && ((__deviceName || other->__deviceName) && ![__deviceName isEqual:other->__deviceName]))) {
    return NO;
  }
  if ((__privateKey_isset != other->__privateKey_isset) ||
      (__privateKey_isset && ((__privateKey || other->__privateKey) && ![__privateKey isEqual:other->__privateKey]))) {
    return NO;
  }
  if ((__publicKey_isset != other->__publicKey_isset) ||
      (__publicKey_isset && ((__publicKey || other->__publicKey) && ![__publicKey isEqual:other->__publicKey]))) {
    return NO;
  }
  if ((__offlineKey_isset != other->__offlineKey_isset) ||
      (__offlineKey_isset && ((__offlineKey || other->__offlineKey) && ![__offlineKey isEqual:other->__offlineKey]))) {
    return NO;
  }
  if ((__passcodeValidFor_isset != other->__passcodeValidFor_isset) ||
      (__passcodeValidFor_isset && (__passcodeValidFor != other->__passcodeValidFor))) {
    return NO;
  }
  if ((__safe_isset != other->__safe_isset) ||
      (__safe_isset && ((__safe || other->__safe) && ![__safe isEqual:other->__safe]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userId release_stub];
  [__deviceName release_stub];
  [__privateKey release_stub];
  [__publicKey release_stub];
  [__offlineKey release_stub];
  [__safe release_stub];
  [super dealloc_stub];
}

- (int32_t) deviceId {
  return __deviceId;
}

- (void) setDeviceId: (int32_t) deviceId {
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  __deviceId_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) deviceName {
  return [[__deviceName retain_stub] autorelease_stub];
}

- (void) setDeviceName: (NSString *) deviceName {
  [deviceName retain_stub];
  [__deviceName release_stub];
  __deviceName = deviceName;
  __deviceName_isset = YES;
}

- (BOOL) deviceNameIsSet {
  return __deviceName_isset;
}

- (void) unsetDeviceName {
  [__deviceName release_stub];
  __deviceName = nil;
  __deviceName_isset = NO;
}

- (NSData *) privateKey {
  return [[__privateKey retain_stub] autorelease_stub];
}

- (void) setPrivateKey: (NSData *) privateKey {
  [privateKey retain_stub];
  [__privateKey release_stub];
  __privateKey = privateKey;
  __privateKey_isset = YES;
}

- (BOOL) privateKeyIsSet {
  return __privateKey_isset;
}

- (void) unsetPrivateKey {
  [__privateKey release_stub];
  __privateKey = nil;
  __privateKey_isset = NO;
}

- (NSData *) publicKey {
  return [[__publicKey retain_stub] autorelease_stub];
}

- (void) setPublicKey: (NSData *) publicKey {
  [publicKey retain_stub];
  [__publicKey release_stub];
  __publicKey = publicKey;
  __publicKey_isset = YES;
}

- (BOOL) publicKeyIsSet {
  return __publicKey_isset;
}

- (void) unsetPublicKey {
  [__publicKey release_stub];
  __publicKey = nil;
  __publicKey_isset = NO;
}

- (NSData *) offlineKey {
  return [[__offlineKey retain_stub] autorelease_stub];
}

- (void) setOfflineKey: (NSData *) offlineKey {
  [offlineKey retain_stub];
  [__offlineKey release_stub];
  __offlineKey = offlineKey;
  __offlineKey_isset = YES;
}

- (BOOL) offlineKeyIsSet {
  return __offlineKey_isset;
}

- (void) unsetOfflineKey {
  [__offlineKey release_stub];
  __offlineKey = nil;
  __offlineKey_isset = NO;
}

- (int32_t) passcodeValidFor {
  return __passcodeValidFor;
}

- (void) setPasscodeValidFor: (int32_t) passcodeValidFor {
  __passcodeValidFor = passcodeValidFor;
  __passcodeValidFor_isset = YES;
}

- (BOOL) passcodeValidForIsSet {
  return __passcodeValidFor_isset;
}

- (void) unsetPasscodeValidFor {
  __passcodeValidFor_isset = NO;
}

- (NSMutableDictionary *) safe {
  return [[__safe retain_stub] autorelease_stub];
}

- (void) setSafe: (NSMutableDictionary *) safe {
  [safe retain_stub];
  [__safe release_stub];
  __safe = safe;
  __safe_isset = YES;
}

- (BOOL) safeIsSet {
  return __safe_isset;
}

- (void) unsetSafe {
  [__safe release_stub];
  __safe = nil;
  __safe_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPrivateKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPublicKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setOfflineKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPasscodeValidFor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            NSString * _val3 = [inProtocol readString];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setSafe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SdkSettings"];
  if (__deviceId_isset) {
    [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __deviceId];
    [outProtocol writeFieldEnd];
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceName_isset) {
    if (__deviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__privateKey_isset) {
    if (__privateKey != nil) {
      [outProtocol writeFieldBeginWithName: @"privateKey" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __privateKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__publicKey_isset) {
    if (__publicKey != nil) {
      [outProtocol writeFieldBeginWithName: @"publicKey" type: TType_STRING fieldID: 5];
      [outProtocol writeBinary: __publicKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offlineKey_isset) {
    if (__offlineKey != nil) {
      [outProtocol writeFieldBeginWithName: @"offlineKey" type: TType_STRING fieldID: 6];
      [outProtocol writeBinary: __offlineKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__passcodeValidFor_isset) {
    [outProtocol writeFieldBeginWithName: @"passcodeValidFor" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __passcodeValidFor];
    [outProtocol writeFieldEnd];
  }
  if (__safe_isset) {
    if (__safe != nil) {
      [outProtocol writeFieldBeginWithName: @"safe" type: TType_MAP fieldID: 8];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__safe count]];
        NSEnumerator * _iter4 = [__safe keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeString: key5];
          [outProtocol writeString: [__safe objectForKey: key5]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SdkSettings("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"%i", __deviceId];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", __deviceName];
  [ms appendString: @",privateKey:"];
  [ms appendFormat: @"\"%@\"", __privateKey];
  [ms appendString: @",publicKey:"];
  [ms appendFormat: @"\"%@\"", __publicKey];
  [ms appendString: @",offlineKey:"];
  [ms appendFormat: @"\"%@\"", __offlineKey];
  [ms appendString: @",passcodeValidFor:"];
  [ms appendFormat: @"%i", __passcodeValidFor];
  [ms appendString: @",safe:"];
  [ms appendFormat: @"%@", __safe];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MsgAttachment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id name: (NSString *) name mimeType: (NSString *) mimeType size: (int32_t) size
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __mimeType = [mimeType retain_stub];
  __mimeType_isset = YES;
  __size = size;
  __size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"mimeType"])
  {
    __mimeType = [[decoder decodeObjectForKey: @"mimeType"] retain_stub];
    __mimeType_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeInt32ForKey: @"size"];
    __size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__mimeType_isset)
  {
    [encoder encodeObject: __mimeType forKey: @"mimeType"];
  }
  if (__size_isset)
  {
    [encoder encodeInt32: __size forKey: @"size"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __mimeType_isset ? 2654435761 : 0;
  if (__mimeType_isset)
  {
    hash = (hash * 31) ^ [__mimeType hash];
  }
  hash = (hash * 31) ^ __size_isset ? 2654435761 : 0;
  if (__size_isset)
  {
    hash = (hash * 31) ^ [@(__size) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MsgAttachment class]]) {
    return NO;
  }
  MsgAttachment *other = (MsgAttachment *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__mimeType_isset != other->__mimeType_isset) ||
      (__mimeType_isset && ((__mimeType || other->__mimeType) && ![__mimeType isEqual:other->__mimeType]))) {
    return NO;
  }
  if ((__size_isset != other->__size_isset) ||
      (__size_isset && (__size != other->__size))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__mimeType release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) mimeType {
  return [[__mimeType retain_stub] autorelease_stub];
}

- (void) setMimeType: (NSString *) mimeType {
  [mimeType retain_stub];
  [__mimeType release_stub];
  __mimeType = mimeType;
  __mimeType_isset = YES;
}

- (BOOL) mimeTypeIsSet {
  return __mimeType_isset;
}

- (void) unsetMimeType {
  [__mimeType release_stub];
  __mimeType = nil;
  __mimeType_isset = NO;
}

- (int32_t) size {
  return __size;
}

- (void) setSize: (int32_t) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMimeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MsgAttachment"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mimeType_isset) {
    if (__mimeType != nil) {
      [outProtocol writeFieldBeginWithName: @"mimeType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mimeType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MsgAttachment("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",mimeType:"];
  [ms appendFormat: @"\"%@\"", __mimeType];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%i", __size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id priority: (int) priority templateId: (int32_t) templateId signitureRequired: (BOOL) signitureRequired responseRequired: (BOOL) responseRequired responseTime: (int32_t) responseTime responseTo: (int64_t) responseTo data: (NSMutableDictionary *) data
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __priority = priority;
  __priority_isset = YES;
  __templateId = templateId;
  __templateId_isset = YES;
  __signitureRequired = signitureRequired;
  __signitureRequired_isset = YES;
  __responseRequired = responseRequired;
  __responseRequired_isset = YES;
  __responseTime = responseTime;
  __responseTime_isset = YES;
  __responseTo = responseTo;
  __responseTo_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"priority"])
  {
    __priority = [decoder decodeIntForKey: @"priority"];
    __priority_isset = YES;
  }
  if ([decoder containsValueForKey: @"templateId"])
  {
    __templateId = [decoder decodeInt32ForKey: @"templateId"];
    __templateId_isset = YES;
  }
  if ([decoder containsValueForKey: @"signitureRequired"])
  {
    __signitureRequired = [decoder decodeBoolForKey: @"signitureRequired"];
    __signitureRequired_isset = YES;
  }
  if ([decoder containsValueForKey: @"responseRequired"])
  {
    __responseRequired = [decoder decodeBoolForKey: @"responseRequired"];
    __responseRequired_isset = YES;
  }
  if ([decoder containsValueForKey: @"responseTime"])
  {
    __responseTime = [decoder decodeInt32ForKey: @"responseTime"];
    __responseTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"responseTo"])
  {
    __responseTo = [decoder decodeInt64ForKey: @"responseTo"];
    __responseTo_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__priority_isset)
  {
    [encoder encodeInt: __priority forKey: @"priority"];
  }
  if (__templateId_isset)
  {
    [encoder encodeInt32: __templateId forKey: @"templateId"];
  }
  if (__signitureRequired_isset)
  {
    [encoder encodeBool: __signitureRequired forKey: @"signitureRequired"];
  }
  if (__responseRequired_isset)
  {
    [encoder encodeBool: __responseRequired forKey: @"responseRequired"];
  }
  if (__responseTime_isset)
  {
    [encoder encodeInt32: __responseTime forKey: @"responseTime"];
  }
  if (__responseTo_isset)
  {
    [encoder encodeInt64: __responseTo forKey: @"responseTo"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __priority_isset ? 2654435761 : 0;
  if (__priority_isset)
  {
    hash = (hash * 31) ^ [@(__priority) hash];
  }
  hash = (hash * 31) ^ __templateId_isset ? 2654435761 : 0;
  if (__templateId_isset)
  {
    hash = (hash * 31) ^ [@(__templateId) hash];
  }
  hash = (hash * 31) ^ __signitureRequired_isset ? 2654435761 : 0;
  if (__signitureRequired_isset)
  {
    hash = (hash * 31) ^ [@(__signitureRequired) hash];
  }
  hash = (hash * 31) ^ __responseRequired_isset ? 2654435761 : 0;
  if (__responseRequired_isset)
  {
    hash = (hash * 31) ^ [@(__responseRequired) hash];
  }
  hash = (hash * 31) ^ __responseTime_isset ? 2654435761 : 0;
  if (__responseTime_isset)
  {
    hash = (hash * 31) ^ [@(__responseTime) hash];
  }
  hash = (hash * 31) ^ __responseTo_isset ? 2654435761 : 0;
  if (__responseTo_isset)
  {
    hash = (hash * 31) ^ [@(__responseTo) hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppMessage class]]) {
    return NO;
  }
  AppMessage *other = (AppMessage *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__priority_isset != other->__priority_isset) ||
      (__priority_isset && (__priority != other->__priority))) {
    return NO;
  }
  if ((__templateId_isset != other->__templateId_isset) ||
      (__templateId_isset && (__templateId != other->__templateId))) {
    return NO;
  }
  if ((__signitureRequired_isset != other->__signitureRequired_isset) ||
      (__signitureRequired_isset && (__signitureRequired != other->__signitureRequired))) {
    return NO;
  }
  if ((__responseRequired_isset != other->__responseRequired_isset) ||
      (__responseRequired_isset && (__responseRequired != other->__responseRequired))) {
    return NO;
  }
  if ((__responseTime_isset != other->__responseTime_isset) ||
      (__responseTime_isset && (__responseTime != other->__responseTime))) {
    return NO;
  }
  if ((__responseTo_isset != other->__responseTo_isset) ||
      (__responseTo_isset && (__responseTo != other->__responseTo))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int) priority {
  return __priority;
}

- (void) setPriority: (int) priority {
  __priority = priority;
  __priority_isset = YES;
}

- (BOOL) priorityIsSet {
  return __priority_isset;
}

- (void) unsetPriority {
  __priority_isset = NO;
}

- (int32_t) templateId {
  return __templateId;
}

- (void) setTemplateId: (int32_t) templateId {
  __templateId = templateId;
  __templateId_isset = YES;
}

- (BOOL) templateIdIsSet {
  return __templateId_isset;
}

- (void) unsetTemplateId {
  __templateId_isset = NO;
}

- (BOOL) signitureRequired {
  return __signitureRequired;
}

- (void) setSignitureRequired: (BOOL) signitureRequired {
  __signitureRequired = signitureRequired;
  __signitureRequired_isset = YES;
}

- (BOOL) signitureRequiredIsSet {
  return __signitureRequired_isset;
}

- (void) unsetSignitureRequired {
  __signitureRequired_isset = NO;
}

- (BOOL) responseRequired {
  return __responseRequired;
}

- (void) setResponseRequired: (BOOL) responseRequired {
  __responseRequired = responseRequired;
  __responseRequired_isset = YES;
}

- (BOOL) responseRequiredIsSet {
  return __responseRequired_isset;
}

- (void) unsetResponseRequired {
  __responseRequired_isset = NO;
}

- (int32_t) responseTime {
  return __responseTime;
}

- (void) setResponseTime: (int32_t) responseTime {
  __responseTime = responseTime;
  __responseTime_isset = YES;
}

- (BOOL) responseTimeIsSet {
  return __responseTime_isset;
}

- (void) unsetResponseTime {
  __responseTime_isset = NO;
}

- (int64_t) responseTo {
  return __responseTo;
}

- (void) setResponseTo: (int64_t) responseTo {
  __responseTo = responseTo;
  __responseTo_isset = YES;
}

- (BOOL) responseToIsSet {
  return __responseTo_isset;
}

- (void) unsetResponseTo {
  __responseTo_isset = NO;
}

- (NSMutableDictionary *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSMutableDictionary *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPriority: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTemplateId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSignitureRequired: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setResponseRequired: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResponseTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setResponseTo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_MAP) {
          int _size6;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size6];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            NSString * _key8 = [inProtocol readString];
            NSString * _val9 = [inProtocol readString];
            [fieldValue setObject: _val9 forKey: _key8];
          }
          [inProtocol readMapEnd];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppMessage"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__priority_isset) {
    [outProtocol writeFieldBeginWithName: @"priority" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __priority];
    [outProtocol writeFieldEnd];
  }
  if (__templateId_isset) {
    [outProtocol writeFieldBeginWithName: @"templateId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __templateId];
    [outProtocol writeFieldEnd];
  }
  if (__signitureRequired_isset) {
    [outProtocol writeFieldBeginWithName: @"signitureRequired" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __signitureRequired];
    [outProtocol writeFieldEnd];
  }
  if (__responseRequired_isset) {
    [outProtocol writeFieldBeginWithName: @"responseRequired" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __responseRequired];
    [outProtocol writeFieldEnd];
  }
  if (__responseTime_isset) {
    [outProtocol writeFieldBeginWithName: @"responseTime" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __responseTime];
    [outProtocol writeFieldEnd];
  }
  if (__responseTo_isset) {
    [outProtocol writeFieldBeginWithName: @"responseTo" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __responseTo];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_MAP fieldID: 8];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__data count]];
        NSEnumerator * _iter10 = [__data keyEnumerator];
        id key11;
        while ((key11 = [_iter10 nextObject]))
        {
          [outProtocol writeString: key11];
          [outProtocol writeString: [__data objectForKey: key11]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppMessage("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",priority:"];
  [ms appendFormat: @"%i", __priority];
  [ms appendString: @",templateId:"];
  [ms appendFormat: @"%i", __templateId];
  [ms appendString: @",signitureRequired:"];
  [ms appendFormat: @"%i", __signitureRequired];
  [ms appendString: @",responseRequired:"];
  [ms appendFormat: @"%i", __responseRequired];
  [ms appendString: @",responseTime:"];
  [ms appendFormat: @"%i", __responseTime];
  [ms appendString: @",responseTo:"];
  [ms appendFormat: @"%qi", __responseTo];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id actionId: (NSString *) actionId errorCode: (int) errorCode errorMessage: (NSString *) errorMessage read: (BOOL) read responseData: (NSMutableDictionary *) responseData signature: (NSData *) signature
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __actionId = [actionId retain_stub];
  __actionId_isset = YES;
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __errorMessage = [errorMessage retain_stub];
  __errorMessage_isset = YES;
  __read = read;
  __read_isset = YES;
  __responseData = [responseData retain_stub];
  __responseData_isset = YES;
  __signature = [signature retain_stub];
  __signature_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"actionId"])
  {
    __actionId = [[decoder decodeObjectForKey: @"actionId"] retain_stub];
    __actionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeIntForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorMessage"])
  {
    __errorMessage = [[decoder decodeObjectForKey: @"errorMessage"] retain_stub];
    __errorMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"read"])
  {
    __read = [decoder decodeBoolForKey: @"read"];
    __read_isset = YES;
  }
  if ([decoder containsValueForKey: @"responseData"])
  {
    __responseData = [[decoder decodeObjectForKey: @"responseData"] retain_stub];
    __responseData_isset = YES;
  }
  if ([decoder containsValueForKey: @"signature"])
  {
    __signature = [[decoder decodeObjectForKey: @"signature"] retain_stub];
    __signature_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__actionId_isset)
  {
    [encoder encodeObject: __actionId forKey: @"actionId"];
  }
  if (__errorCode_isset)
  {
    [encoder encodeInt: __errorCode forKey: @"errorCode"];
  }
  if (__errorMessage_isset)
  {
    [encoder encodeObject: __errorMessage forKey: @"errorMessage"];
  }
  if (__read_isset)
  {
    [encoder encodeBool: __read forKey: @"read"];
  }
  if (__responseData_isset)
  {
    [encoder encodeObject: __responseData forKey: @"responseData"];
  }
  if (__signature_isset)
  {
    [encoder encodeObject: __signature forKey: @"signature"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __actionId_isset ? 2654435761 : 0;
  if (__actionId_isset)
  {
    hash = (hash * 31) ^ [__actionId hash];
  }
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __errorMessage_isset ? 2654435761 : 0;
  if (__errorMessage_isset)
  {
    hash = (hash * 31) ^ [__errorMessage hash];
  }
  hash = (hash * 31) ^ __read_isset ? 2654435761 : 0;
  if (__read_isset)
  {
    hash = (hash * 31) ^ [@(__read) hash];
  }
  hash = (hash * 31) ^ __responseData_isset ? 2654435761 : 0;
  if (__responseData_isset)
  {
    hash = (hash * 31) ^ [__responseData hash];
  }
  hash = (hash * 31) ^ __signature_isset ? 2654435761 : 0;
  if (__signature_isset)
  {
    hash = (hash * 31) ^ [__signature hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppMessageResponse class]]) {
    return NO;
  }
  AppMessageResponse *other = (AppMessageResponse *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__actionId_isset != other->__actionId_isset) ||
      (__actionId_isset && ((__actionId || other->__actionId) && ![__actionId isEqual:other->__actionId]))) {
    return NO;
  }
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__errorMessage_isset != other->__errorMessage_isset) ||
      (__errorMessage_isset && ((__errorMessage || other->__errorMessage) && ![__errorMessage isEqual:other->__errorMessage]))) {
    return NO;
  }
  if ((__read_isset != other->__read_isset) ||
      (__read_isset && (__read != other->__read))) {
    return NO;
  }
  if ((__responseData_isset != other->__responseData_isset) ||
      (__responseData_isset && ((__responseData || other->__responseData) && ![__responseData isEqual:other->__responseData]))) {
    return NO;
  }
  if ((__signature_isset != other->__signature_isset) ||
      (__signature_isset && ((__signature || other->__signature) && ![__signature isEqual:other->__signature]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__actionId release_stub];
  [__errorMessage release_stub];
  [__responseData release_stub];
  [__signature release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) actionId {
  return [[__actionId retain_stub] autorelease_stub];
}

- (void) setActionId: (NSString *) actionId {
  [actionId retain_stub];
  [__actionId release_stub];
  __actionId = actionId;
  __actionId_isset = YES;
}

- (BOOL) actionIdIsSet {
  return __actionId_isset;
}

- (void) unsetActionId {
  [__actionId release_stub];
  __actionId = nil;
  __actionId_isset = NO;
}

- (int) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) errorMessage {
  return [[__errorMessage retain_stub] autorelease_stub];
}

- (void) setErrorMessage: (NSString *) errorMessage {
  [errorMessage retain_stub];
  [__errorMessage release_stub];
  __errorMessage = errorMessage;
  __errorMessage_isset = YES;
}

- (BOOL) errorMessageIsSet {
  return __errorMessage_isset;
}

- (void) unsetErrorMessage {
  [__errorMessage release_stub];
  __errorMessage = nil;
  __errorMessage_isset = NO;
}

- (BOOL) read {
  return __read;
}

- (void) setRead: (BOOL) read {
  __read = read;
  __read_isset = YES;
}

- (BOOL) readIsSet {
  return __read_isset;
}

- (void) unsetRead {
  __read_isset = NO;
}

- (NSMutableDictionary *) responseData {
  return [[__responseData retain_stub] autorelease_stub];
}

- (void) setResponseData: (NSMutableDictionary *) responseData {
  [responseData retain_stub];
  [__responseData release_stub];
  __responseData = responseData;
  __responseData_isset = YES;
}

- (BOOL) responseDataIsSet {
  return __responseData_isset;
}

- (void) unsetResponseData {
  [__responseData release_stub];
  __responseData = nil;
  __responseData_isset = NO;
}

- (NSData *) signature {
  return [[__signature retain_stub] autorelease_stub];
}

- (void) setSignature: (NSData *) signature {
  [signature retain_stub];
  [__signature release_stub];
  __signature = signature;
  __signature_isset = YES;
}

- (BOOL) signatureIsSet {
  return __signature_isset;
}

- (void) unsetSignature {
  [__signature release_stub];
  __signature = nil;
  __signature_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrorMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_MAP) {
          int _size12;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size12];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size12];
          int _i13;
          for (_i13 = 0; _i13 < _size12; ++_i13)
          {
            NSString * _key14 = [inProtocol readString];
            NSString * _val15 = [inProtocol readString];
            [fieldValue setObject: _val15 forKey: _key14];
          }
          [inProtocol readMapEnd];
          [self setResponseData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppMessageResponse"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__actionId_isset) {
    if (__actionId != nil) {
      [outProtocol writeFieldBeginWithName: @"actionId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __actionId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__errorMessage_isset) {
    if (__errorMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"errorMessage" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __errorMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__read_isset) {
    [outProtocol writeFieldBeginWithName: @"read" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __read];
    [outProtocol writeFieldEnd];
  }
  if (__responseData_isset) {
    if (__responseData != nil) {
      [outProtocol writeFieldBeginWithName: @"responseData" type: TType_MAP fieldID: 6];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__responseData count]];
        NSEnumerator * _iter16 = [__responseData keyEnumerator];
        id key17;
        while ((key17 = [_iter16 nextObject]))
        {
          [outProtocol writeString: key17];
          [outProtocol writeString: [__responseData objectForKey: key17]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__signature_isset) {
    if (__signature != nil) {
      [outProtocol writeFieldBeginWithName: @"signature" type: TType_STRING fieldID: 7];
      [outProtocol writeBinary: __signature];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppMessageResponse("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",actionId:"];
  [ms appendFormat: @"\"%@\"", __actionId];
  [ms appendString: @",errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",errorMessage:"];
  [ms appendFormat: @"\"%@\"", __errorMessage];
  [ms appendString: @",read:"];
  [ms appendFormat: @"%i", __read];
  [ms appendString: @",responseData:"];
  [ms appendFormat: @"%@", __responseData];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", __signature];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthAppMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccesful: (BOOL) succesful errorCode: (NSString *) errorCode errorMessage: (NSString *) errorMessage userKey: (NSData *) userKey sessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn sessionCookie: (NSString *) sessionCookie msgId: (int64_t) msgId
{
  self = [super init];
  __succesful = succesful;
  __succesful_isset = YES;
  __errorCode = [errorCode retain_stub];
  __errorCode_isset = YES;
  __errorMessage = [errorMessage retain_stub];
  __errorMessage_isset = YES;
  __userKey = [userKey retain_stub];
  __userKey_isset = YES;
  __sessionCookieExpiresOn = sessionCookieExpiresOn;
  __sessionCookieExpiresOn_isset = YES;
  __sessionCookie = [sessionCookie retain_stub];
  __sessionCookie_isset = YES;
  __msgId = msgId;
  __msgId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"succesful"])
  {
    __succesful = [decoder decodeBoolForKey: @"succesful"];
    __succesful_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [[decoder decodeObjectForKey: @"errorCode"] retain_stub];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorMessage"])
  {
    __errorMessage = [[decoder decodeObjectForKey: @"errorMessage"] retain_stub];
    __errorMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"userKey"])
  {
    __userKey = [[decoder decodeObjectForKey: @"userKey"] retain_stub];
    __userKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionCookieExpiresOn"])
  {
    __sessionCookieExpiresOn = [decoder decodeInt32ForKey: @"sessionCookieExpiresOn"];
    __sessionCookieExpiresOn_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionCookie"])
  {
    __sessionCookie = [[decoder decodeObjectForKey: @"sessionCookie"] retain_stub];
    __sessionCookie_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgId"])
  {
    __msgId = [decoder decodeInt64ForKey: @"msgId"];
    __msgId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__succesful_isset)
  {
    [encoder encodeBool: __succesful forKey: @"succesful"];
  }
  if (__errorCode_isset)
  {
    [encoder encodeObject: __errorCode forKey: @"errorCode"];
  }
  if (__errorMessage_isset)
  {
    [encoder encodeObject: __errorMessage forKey: @"errorMessage"];
  }
  if (__userKey_isset)
  {
    [encoder encodeObject: __userKey forKey: @"userKey"];
  }
  if (__sessionCookieExpiresOn_isset)
  {
    [encoder encodeInt32: __sessionCookieExpiresOn forKey: @"sessionCookieExpiresOn"];
  }
  if (__sessionCookie_isset)
  {
    [encoder encodeObject: __sessionCookie forKey: @"sessionCookie"];
  }
  if (__msgId_isset)
  {
    [encoder encodeInt64: __msgId forKey: @"msgId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __succesful_isset ? 2654435761 : 0;
  if (__succesful_isset)
  {
    hash = (hash * 31) ^ [@(__succesful) hash];
  }
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [__errorCode hash];
  }
  hash = (hash * 31) ^ __errorMessage_isset ? 2654435761 : 0;
  if (__errorMessage_isset)
  {
    hash = (hash * 31) ^ [__errorMessage hash];
  }
  hash = (hash * 31) ^ __userKey_isset ? 2654435761 : 0;
  if (__userKey_isset)
  {
    hash = (hash * 31) ^ [__userKey hash];
  }
  hash = (hash * 31) ^ __sessionCookieExpiresOn_isset ? 2654435761 : 0;
  if (__sessionCookieExpiresOn_isset)
  {
    hash = (hash * 31) ^ [@(__sessionCookieExpiresOn) hash];
  }
  hash = (hash * 31) ^ __sessionCookie_isset ? 2654435761 : 0;
  if (__sessionCookie_isset)
  {
    hash = (hash * 31) ^ [__sessionCookie hash];
  }
  hash = (hash * 31) ^ __msgId_isset ? 2654435761 : 0;
  if (__msgId_isset)
  {
    hash = (hash * 31) ^ [@(__msgId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AuthAppMessageResponse class]]) {
    return NO;
  }
  AuthAppMessageResponse *other = (AuthAppMessageResponse *)anObject;
  if ((__succesful_isset != other->__succesful_isset) ||
      (__succesful_isset && (__succesful != other->__succesful))) {
    return NO;
  }
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && ((__errorCode || other->__errorCode) && ![__errorCode isEqual:other->__errorCode]))) {
    return NO;
  }
  if ((__errorMessage_isset != other->__errorMessage_isset) ||
      (__errorMessage_isset && ((__errorMessage || other->__errorMessage) && ![__errorMessage isEqual:other->__errorMessage]))) {
    return NO;
  }
  if ((__userKey_isset != other->__userKey_isset) ||
      (__userKey_isset && ((__userKey || other->__userKey) && ![__userKey isEqual:other->__userKey]))) {
    return NO;
  }
  if ((__sessionCookieExpiresOn_isset != other->__sessionCookieExpiresOn_isset) ||
      (__sessionCookieExpiresOn_isset && (__sessionCookieExpiresOn != other->__sessionCookieExpiresOn))) {
    return NO;
  }
  if ((__sessionCookie_isset != other->__sessionCookie_isset) ||
      (__sessionCookie_isset && ((__sessionCookie || other->__sessionCookie) && ![__sessionCookie isEqual:other->__sessionCookie]))) {
    return NO;
  }
  if ((__msgId_isset != other->__msgId_isset) ||
      (__msgId_isset && (__msgId != other->__msgId))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__errorCode release_stub];
  [__errorMessage release_stub];
  [__userKey release_stub];
  [__sessionCookie release_stub];
  [super dealloc_stub];
}

- (BOOL) succesful {
  return __succesful;
}

- (void) setSuccesful: (BOOL) succesful {
  __succesful = succesful;
  __succesful_isset = YES;
}

- (BOOL) succesfulIsSet {
  return __succesful_isset;
}

- (void) unsetSuccesful {
  __succesful_isset = NO;
}

- (NSString *) errorCode {
  return [[__errorCode retain_stub] autorelease_stub];
}

- (void) setErrorCode: (NSString *) errorCode {
  [errorCode retain_stub];
  [__errorCode release_stub];
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  [__errorCode release_stub];
  __errorCode = nil;
  __errorCode_isset = NO;
}

- (NSString *) errorMessage {
  return [[__errorMessage retain_stub] autorelease_stub];
}

- (void) setErrorMessage: (NSString *) errorMessage {
  [errorMessage retain_stub];
  [__errorMessage release_stub];
  __errorMessage = errorMessage;
  __errorMessage_isset = YES;
}

- (BOOL) errorMessageIsSet {
  return __errorMessage_isset;
}

- (void) unsetErrorMessage {
  [__errorMessage release_stub];
  __errorMessage = nil;
  __errorMessage_isset = NO;
}

- (NSData *) userKey {
  return [[__userKey retain_stub] autorelease_stub];
}

- (void) setUserKey: (NSData *) userKey {
  [userKey retain_stub];
  [__userKey release_stub];
  __userKey = userKey;
  __userKey_isset = YES;
}

- (BOOL) userKeyIsSet {
  return __userKey_isset;
}

- (void) unsetUserKey {
  [__userKey release_stub];
  __userKey = nil;
  __userKey_isset = NO;
}

- (int32_t) sessionCookieExpiresOn {
  return __sessionCookieExpiresOn;
}

- (void) setSessionCookieExpiresOn: (int32_t) sessionCookieExpiresOn {
  __sessionCookieExpiresOn = sessionCookieExpiresOn;
  __sessionCookieExpiresOn_isset = YES;
}

- (BOOL) sessionCookieExpiresOnIsSet {
  return __sessionCookieExpiresOn_isset;
}

- (void) unsetSessionCookieExpiresOn {
  __sessionCookieExpiresOn_isset = NO;
}

- (NSString *) sessionCookie {
  return [[__sessionCookie retain_stub] autorelease_stub];
}

- (void) setSessionCookie: (NSString *) sessionCookie {
  [sessionCookie retain_stub];
  [__sessionCookie release_stub];
  __sessionCookie = sessionCookie;
  __sessionCookie_isset = YES;
}

- (BOOL) sessionCookieIsSet {
  return __sessionCookie_isset;
}

- (void) unsetSessionCookie {
  [__sessionCookie release_stub];
  __sessionCookie = nil;
  __sessionCookie_isset = NO;
}

- (int64_t) msgId {
  return __msgId;
}

- (void) setMsgId: (int64_t) msgId {
  __msgId = msgId;
  __msgId_isset = YES;
}

- (BOOL) msgIdIsSet {
  return __msgId_isset;
}

- (void) unsetMsgId {
  __msgId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccesful: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrorMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setUserKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSessionCookieExpiresOn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionCookie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMsgId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthAppMessageResponse"];
  if (__succesful_isset) {
    [outProtocol writeFieldBeginWithName: @"succesful" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __succesful];
    [outProtocol writeFieldEnd];
  }
  if (__errorCode_isset) {
    if (__errorCode != nil) {
      [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __errorCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__errorMessage_isset) {
    if (__errorMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"errorMessage" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __errorMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userKey_isset) {
    if (__userKey != nil) {
      [outProtocol writeFieldBeginWithName: @"userKey" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __userKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionCookieExpiresOn_isset) {
    [outProtocol writeFieldBeginWithName: @"sessionCookieExpiresOn" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __sessionCookieExpiresOn];
    [outProtocol writeFieldEnd];
  }
  if (__sessionCookie_isset) {
    if (__sessionCookie != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionCookie" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __sessionCookie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgId_isset) {
    [outProtocol writeFieldBeginWithName: @"msgId" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __msgId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthAppMessageResponse("];
  [ms appendString: @"succesful:"];
  [ms appendFormat: @"%i", __succesful];
  [ms appendString: @",errorCode:"];
  [ms appendFormat: @"\"%@\"", __errorCode];
  [ms appendString: @",errorMessage:"];
  [ms appendFormat: @"\"%@\"", __errorMessage];
  [ms appendString: @",userKey:"];
  [ms appendFormat: @"\"%@\"", __userKey];
  [ms appendString: @",sessionCookieExpiresOn:"];
  [ms appendFormat: @"%i", __sessionCookieExpiresOn];
  [ms appendString: @",sessionCookie:"];
  [ms appendFormat: @"\"%@\"", __sessionCookie];
  [ms appendString: @",msgId:"];
  [ms appendFormat: @"%qi", __msgId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppVersion

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithVersion: (int32_t) version name: (NSString *) name state: (NSString *) state
{
  self = [super init];
  __version = version;
  __version_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeInt32ForKey: @"version"];
    __version_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__version_isset)
  {
    [encoder encodeInt32: __version forKey: @"version"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [__state hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppVersion class]]) {
    return NO;
  }
  AppVersion *other = (AppVersion *)anObject;
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && ((__state || other->__state) && ![__state isEqual:other->__state]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__state release_stub];
  [super dealloc_stub];
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppVersion"];
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppVersion("];
  [ms appendString: @"version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Template

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id name: (NSString *) name locale: (NSString *) locale content: (NSString *) content
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __locale = [locale retain_stub];
  __locale_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"locale"])
  {
    __locale = [[decoder decodeObjectForKey: @"locale"] retain_stub];
    __locale_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__locale_isset)
  {
    [encoder encodeObject: __locale forKey: @"locale"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [@(__id) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __locale_isset ? 2654435761 : 0;
  if (__locale_isset)
  {
    hash = (hash * 31) ^ [__locale hash];
  }
  hash = (hash * 31) ^ __content_isset ? 2654435761 : 0;
  if (__content_isset)
  {
    hash = (hash * 31) ^ [__content hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Template class]]) {
    return NO;
  }
  Template *other = (Template *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && (__id != other->__id))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__locale_isset != other->__locale_isset) ||
      (__locale_isset && ((__locale || other->__locale) && ![__locale isEqual:other->__locale]))) {
    return NO;
  }
  if ((__content_isset != other->__content_isset) ||
      (__content_isset && ((__content || other->__content) && ![__content isEqual:other->__content]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__locale release_stub];
  [__content release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) locale {
  return [[__locale retain_stub] autorelease_stub];
}

- (void) setLocale: (NSString *) locale {
  [locale retain_stub];
  [__locale release_stub];
  __locale = locale;
  __locale_isset = YES;
}

- (BOOL) localeIsSet {
  return __locale_isset;
}

- (void) unsetLocale {
  [__locale release_stub];
  __locale = nil;
  __locale_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Template"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locale_isset) {
    if (__locale != nil) {
      [outProtocol writeFieldBeginWithName: @"locale" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __locale];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Template("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",locale:"];
  [ms appendFormat: @"\"%@\"", __locale];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SdkCloudSafeKey

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOwner: (int) owner name: (NSString *) name
{
  self = [super init];
  __owner = owner;
  __owner_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [decoder decodeIntForKey: @"owner"];
    __owner_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__owner_isset)
  {
    [encoder encodeInt: __owner forKey: @"owner"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __owner_isset ? 2654435761 : 0;
  if (__owner_isset)
  {
    hash = (hash * 31) ^ [@(__owner) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SdkCloudSafeKey class]]) {
    return NO;
  }
  SdkCloudSafeKey *other = (SdkCloudSafeKey *)anObject;
  if ((__owner_isset != other->__owner_isset) ||
      (__owner_isset && (__owner != other->__owner))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int) owner {
  return __owner;
}

- (void) setOwner: (int) owner {
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  __owner_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SdkCloudSafeKey"];
  if (__owner_isset) {
    [outProtocol writeFieldBeginWithName: @"owner" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __owner];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SdkCloudSafeKey("];
  [ms appendString: @"owner:"];
  [ms appendFormat: @"%i", __owner];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SdkCloudSafe

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUniqueKey: (SdkCloudSafeKey *) uniqueKey content: (NSData *) content options: (NSString *) options discardAfter: (int64_t) discardAfter lastModified: (int64_t) lastModified signature: (NSData *) signature length: (int64_t) length sharedUser: (NSString *) sharedUser writeAccess: (BOOL) writeAccess
{
  self = [super init];
  __uniqueKey = [uniqueKey retain_stub];
  __uniqueKey_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __options = [options retain_stub];
  __options_isset = YES;
  __discardAfter = discardAfter;
  __discardAfter_isset = YES;
  __lastModified = lastModified;
  __lastModified_isset = YES;
  __signature = [signature retain_stub];
  __signature_isset = YES;
  __length = length;
  __length_isset = YES;
  __sharedUser = [sharedUser retain_stub];
  __sharedUser_isset = YES;
  __writeAccess = writeAccess;
  __writeAccess_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uniqueKey"])
  {
    __uniqueKey = [[decoder decodeObjectForKey: @"uniqueKey"] retain_stub];
    __uniqueKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"options"])
  {
    __options = [[decoder decodeObjectForKey: @"options"] retain_stub];
    __options_isset = YES;
  }
  if ([decoder containsValueForKey: @"discardAfter"])
  {
    __discardAfter = [decoder decodeInt64ForKey: @"discardAfter"];
    __discardAfter_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastModified"])
  {
    __lastModified = [decoder decodeInt64ForKey: @"lastModified"];
    __lastModified_isset = YES;
  }
  if ([decoder containsValueForKey: @"signature"])
  {
    __signature = [[decoder decodeObjectForKey: @"signature"] retain_stub];
    __signature_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt64ForKey: @"length"];
    __length_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedUser"])
  {
    __sharedUser = [[decoder decodeObjectForKey: @"sharedUser"] retain_stub];
    __sharedUser_isset = YES;
  }
  if ([decoder containsValueForKey: @"writeAccess"])
  {
    __writeAccess = [decoder decodeBoolForKey: @"writeAccess"];
    __writeAccess_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uniqueKey_isset)
  {
    [encoder encodeObject: __uniqueKey forKey: @"uniqueKey"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__options_isset)
  {
    [encoder encodeObject: __options forKey: @"options"];
  }
  if (__discardAfter_isset)
  {
    [encoder encodeInt64: __discardAfter forKey: @"discardAfter"];
  }
  if (__lastModified_isset)
  {
    [encoder encodeInt64: __lastModified forKey: @"lastModified"];
  }
  if (__signature_isset)
  {
    [encoder encodeObject: __signature forKey: @"signature"];
  }
  if (__length_isset)
  {
    [encoder encodeInt64: __length forKey: @"length"];
  }
  if (__sharedUser_isset)
  {
    [encoder encodeObject: __sharedUser forKey: @"sharedUser"];
  }
  if (__writeAccess_isset)
  {
    [encoder encodeBool: __writeAccess forKey: @"writeAccess"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uniqueKey_isset ? 2654435761 : 0;
  if (__uniqueKey_isset)
  {
    hash = (hash * 31) ^ [__uniqueKey hash];
  }
  hash = (hash * 31) ^ __content_isset ? 2654435761 : 0;
  if (__content_isset)
  {
    hash = (hash * 31) ^ [__content hash];
  }
  hash = (hash * 31) ^ __options_isset ? 2654435761 : 0;
  if (__options_isset)
  {
    hash = (hash * 31) ^ [__options hash];
  }
  hash = (hash * 31) ^ __discardAfter_isset ? 2654435761 : 0;
  if (__discardAfter_isset)
  {
    hash = (hash * 31) ^ [@(__discardAfter) hash];
  }
  hash = (hash * 31) ^ __lastModified_isset ? 2654435761 : 0;
  if (__lastModified_isset)
  {
    hash = (hash * 31) ^ [@(__lastModified) hash];
  }
  hash = (hash * 31) ^ __signature_isset ? 2654435761 : 0;
  if (__signature_isset)
  {
    hash = (hash * 31) ^ [__signature hash];
  }
  hash = (hash * 31) ^ __length_isset ? 2654435761 : 0;
  if (__length_isset)
  {
    hash = (hash * 31) ^ [@(__length) hash];
  }
  hash = (hash * 31) ^ __sharedUser_isset ? 2654435761 : 0;
  if (__sharedUser_isset)
  {
    hash = (hash * 31) ^ [__sharedUser hash];
  }
  hash = (hash * 31) ^ __writeAccess_isset ? 2654435761 : 0;
  if (__writeAccess_isset)
  {
    hash = (hash * 31) ^ [@(__writeAccess) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SdkCloudSafe class]]) {
    return NO;
  }
  SdkCloudSafe *other = (SdkCloudSafe *)anObject;
  if ((__uniqueKey_isset != other->__uniqueKey_isset) ||
      (__uniqueKey_isset && ((__uniqueKey || other->__uniqueKey) && ![__uniqueKey isEqual:other->__uniqueKey]))) {
    return NO;
  }
  if ((__content_isset != other->__content_isset) ||
      (__content_isset && ((__content || other->__content) && ![__content isEqual:other->__content]))) {
    return NO;
  }
  if ((__options_isset != other->__options_isset) ||
      (__options_isset && ((__options || other->__options) && ![__options isEqual:other->__options]))) {
    return NO;
  }
  if ((__discardAfter_isset != other->__discardAfter_isset) ||
      (__discardAfter_isset && (__discardAfter != other->__discardAfter))) {
    return NO;
  }
  if ((__lastModified_isset != other->__lastModified_isset) ||
      (__lastModified_isset && (__lastModified != other->__lastModified))) {
    return NO;
  }
  if ((__signature_isset != other->__signature_isset) ||
      (__signature_isset && ((__signature || other->__signature) && ![__signature isEqual:other->__signature]))) {
    return NO;
  }
  if ((__length_isset != other->__length_isset) ||
      (__length_isset && (__length != other->__length))) {
    return NO;
  }
  if ((__sharedUser_isset != other->__sharedUser_isset) ||
      (__sharedUser_isset && ((__sharedUser || other->__sharedUser) && ![__sharedUser isEqual:other->__sharedUser]))) {
    return NO;
  }
  if ((__writeAccess_isset != other->__writeAccess_isset) ||
      (__writeAccess_isset && (__writeAccess != other->__writeAccess))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uniqueKey release_stub];
  [__content release_stub];
  [__options release_stub];
  [__signature release_stub];
  [__sharedUser release_stub];
  [super dealloc_stub];
}

- (SdkCloudSafeKey *) uniqueKey {
  return [[__uniqueKey retain_stub] autorelease_stub];
}

- (void) setUniqueKey: (SdkCloudSafeKey *) uniqueKey {
  [uniqueKey retain_stub];
  [__uniqueKey release_stub];
  __uniqueKey = uniqueKey;
  __uniqueKey_isset = YES;
}

- (BOOL) uniqueKeyIsSet {
  return __uniqueKey_isset;
}

- (void) unsetUniqueKey {
  [__uniqueKey release_stub];
  __uniqueKey = nil;
  __uniqueKey_isset = NO;
}

- (NSData *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSData *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (NSString *) options {
  return [[__options retain_stub] autorelease_stub];
}

- (void) setOptions: (NSString *) options {
  [options retain_stub];
  [__options release_stub];
  __options = options;
  __options_isset = YES;
}

- (BOOL) optionsIsSet {
  return __options_isset;
}

- (void) unsetOptions {
  [__options release_stub];
  __options = nil;
  __options_isset = NO;
}

- (int64_t) discardAfter {
  return __discardAfter;
}

- (void) setDiscardAfter: (int64_t) discardAfter {
  __discardAfter = discardAfter;
  __discardAfter_isset = YES;
}

- (BOOL) discardAfterIsSet {
  return __discardAfter_isset;
}

- (void) unsetDiscardAfter {
  __discardAfter_isset = NO;
}

- (int64_t) lastModified {
  return __lastModified;
}

- (void) setLastModified: (int64_t) lastModified {
  __lastModified = lastModified;
  __lastModified_isset = YES;
}

- (BOOL) lastModifiedIsSet {
  return __lastModified_isset;
}

- (void) unsetLastModified {
  __lastModified_isset = NO;
}

- (NSData *) signature {
  return [[__signature retain_stub] autorelease_stub];
}

- (void) setSignature: (NSData *) signature {
  [signature retain_stub];
  [__signature release_stub];
  __signature = signature;
  __signature_isset = YES;
}

- (BOOL) signatureIsSet {
  return __signature_isset;
}

- (void) unsetSignature {
  [__signature release_stub];
  __signature = nil;
  __signature_isset = NO;
}

- (int64_t) length {
  return __length;
}

- (void) setLength: (int64_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (NSString *) sharedUser {
  return [[__sharedUser retain_stub] autorelease_stub];
}

- (void) setSharedUser: (NSString *) sharedUser {
  [sharedUser retain_stub];
  [__sharedUser release_stub];
  __sharedUser = sharedUser;
  __sharedUser_isset = YES;
}

- (BOOL) sharedUserIsSet {
  return __sharedUser_isset;
}

- (void) unsetSharedUser {
  [__sharedUser release_stub];
  __sharedUser = nil;
  __sharedUser_isset = NO;
}

- (BOOL) writeAccess {
  return __writeAccess;
}

- (void) setWriteAccess: (BOOL) writeAccess {
  __writeAccess = writeAccess;
  __writeAccess_isset = YES;
}

- (BOOL) writeAccessIsSet {
  return __writeAccess_isset;
}

- (void) unsetWriteAccess {
  __writeAccess_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SdkCloudSafeKey *fieldValue = [[SdkCloudSafeKey alloc] init];
          [fieldValue read: inProtocol];
          [self setUniqueKey: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOptions: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDiscardAfter: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastModified: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSharedUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setWriteAccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SdkCloudSafe"];
  if (__uniqueKey_isset) {
    if (__uniqueKey != nil) {
      [outProtocol writeFieldBeginWithName: @"uniqueKey" type: TType_STRUCT fieldID: 1];
      [__uniqueKey write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__options_isset) {
    if (__options != nil) {
      [outProtocol writeFieldBeginWithName: @"options" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __options];
      [outProtocol writeFieldEnd];
    }
  }
  if (__discardAfter_isset) {
    [outProtocol writeFieldBeginWithName: @"discardAfter" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __discardAfter];
    [outProtocol writeFieldEnd];
  }
  if (__lastModified_isset) {
    [outProtocol writeFieldBeginWithName: @"lastModified" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __lastModified];
    [outProtocol writeFieldEnd];
  }
  if (__signature_isset) {
    if (__signature != nil) {
      [outProtocol writeFieldBeginWithName: @"signature" type: TType_STRING fieldID: 6];
      [outProtocol writeBinary: __signature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __length];
    [outProtocol writeFieldEnd];
  }
  if (__sharedUser_isset) {
    if (__sharedUser != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedUser" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __sharedUser];
      [outProtocol writeFieldEnd];
    }
  }
  if (__writeAccess_isset) {
    [outProtocol writeFieldBeginWithName: @"writeAccess" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __writeAccess];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SdkCloudSafe("];
  [ms appendString: @"uniqueKey:"];
  [ms appendFormat: @"%@", __uniqueKey];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",options:"];
  [ms appendFormat: @"\"%@\"", __options];
  [ms appendString: @",discardAfter:"];
  [ms appendFormat: @"%qi", __discardAfter];
  [ms appendString: @",lastModified:"];
  [ms appendFormat: @"%qi", __lastModified];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", __signature];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%qi", __length];
  [ms appendString: @",sharedUser:"];
  [ms appendFormat: @"\"%@\"", __sharedUser];
  [ms appendString: @",writeAccess:"];
  [ms appendFormat: @"%i", __writeAccess];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLoginId: (NSString *) loginId updatePushNotification: (BOOL) updatePushNotification usingReverseProxy: (BOOL) usingReverseProxy
{
  self = [super init];
  __loginId = [loginId retain_stub];
  __loginId_isset = YES;
  __updatePushNotification = updatePushNotification;
  __updatePushNotification_isset = YES;
  __usingReverseProxy = usingReverseProxy;
  __usingReverseProxy_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"loginId"])
  {
    __loginId = [[decoder decodeObjectForKey: @"loginId"] retain_stub];
    __loginId_isset = YES;
  }
  if ([decoder containsValueForKey: @"updatePushNotification"])
  {
    __updatePushNotification = [decoder decodeBoolForKey: @"updatePushNotification"];
    __updatePushNotification_isset = YES;
  }
  if ([decoder containsValueForKey: @"usingReverseProxy"])
  {
    __usingReverseProxy = [decoder decodeBoolForKey: @"usingReverseProxy"];
    __usingReverseProxy_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__loginId_isset)
  {
    [encoder encodeObject: __loginId forKey: @"loginId"];
  }
  if (__updatePushNotification_isset)
  {
    [encoder encodeBool: __updatePushNotification forKey: @"updatePushNotification"];
  }
  if (__usingReverseProxy_isset)
  {
    [encoder encodeBool: __usingReverseProxy forKey: @"usingReverseProxy"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __loginId_isset ? 2654435761 : 0;
  if (__loginId_isset)
  {
    hash = (hash * 31) ^ [__loginId hash];
  }
  hash = (hash * 31) ^ __updatePushNotification_isset ? 2654435761 : 0;
  if (__updatePushNotification_isset)
  {
    hash = (hash * 31) ^ [@(__updatePushNotification) hash];
  }
  hash = (hash * 31) ^ __usingReverseProxy_isset ? 2654435761 : 0;
  if (__usingReverseProxy_isset)
  {
    hash = (hash * 31) ^ [@(__usingReverseProxy) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[User class]]) {
    return NO;
  }
  User *other = (User *)anObject;
  if ((__loginId_isset != other->__loginId_isset) ||
      (__loginId_isset && ((__loginId || other->__loginId) && ![__loginId isEqual:other->__loginId]))) {
    return NO;
  }
  if ((__updatePushNotification_isset != other->__updatePushNotification_isset) ||
      (__updatePushNotification_isset && (__updatePushNotification != other->__updatePushNotification))) {
    return NO;
  }
  if ((__usingReverseProxy_isset != other->__usingReverseProxy_isset) ||
      (__usingReverseProxy_isset && (__usingReverseProxy != other->__usingReverseProxy))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__loginId release_stub];
  [super dealloc_stub];
}

- (NSString *) loginId {
  return [[__loginId retain_stub] autorelease_stub];
}

- (void) setLoginId: (NSString *) loginId {
  [loginId retain_stub];
  [__loginId release_stub];
  __loginId = loginId;
  __loginId_isset = YES;
}

- (BOOL) loginIdIsSet {
  return __loginId_isset;
}

- (void) unsetLoginId {
  [__loginId release_stub];
  __loginId = nil;
  __loginId_isset = NO;
}

- (BOOL) updatePushNotification {
  return __updatePushNotification;
}

- (void) setUpdatePushNotification: (BOOL) updatePushNotification {
  __updatePushNotification = updatePushNotification;
  __updatePushNotification_isset = YES;
}

- (BOOL) updatePushNotificationIsSet {
  return __updatePushNotification_isset;
}

- (void) unsetUpdatePushNotification {
  __updatePushNotification_isset = NO;
}

- (BOOL) usingReverseProxy {
  return __usingReverseProxy;
}

- (void) setUsingReverseProxy: (BOOL) usingReverseProxy {
  __usingReverseProxy = usingReverseProxy;
  __usingReverseProxy_isset = YES;
}

- (BOOL) usingReverseProxyIsSet {
  return __usingReverseProxy_isset;
}

- (void) unsetUsingReverseProxy {
  __usingReverseProxy_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLoginId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUpdatePushNotification: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUsingReverseProxy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__loginId_isset) {
    if (__loginId != nil) {
      [outProtocol writeFieldBeginWithName: @"loginId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __loginId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updatePushNotification_isset) {
    [outProtocol writeFieldBeginWithName: @"updatePushNotification" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __updatePushNotification];
    [outProtocol writeFieldEnd];
  }
  if (__usingReverseProxy_isset) {
    [outProtocol writeFieldBeginWithName: @"usingReverseProxy" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __usingReverseProxy];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"loginId:"];
  [ms appendFormat: @"\"%@\"", __loginId];
  [ms appendString: @",updatePushNotification:"];
  [ms appendFormat: @"%i", __updatePushNotification];
  [ms appendString: @",usingReverseProxy:"];
  [ms appendFormat: @"%i", __usingReverseProxy];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActivatedUsers

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsers: (NSMutableArray *) users
{
  self = [super init];
  __users = [users retain_stub];
  __users_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"users"])
  {
    __users = [[decoder decodeObjectForKey: @"users"] retain_stub];
    __users_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__users_isset)
  {
    [encoder encodeObject: __users forKey: @"users"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __users_isset ? 2654435761 : 0;
  if (__users_isset)
  {
    hash = (hash * 31) ^ [__users hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ActivatedUsers class]]) {
    return NO;
  }
  ActivatedUsers *other = (ActivatedUsers *)anObject;
  if ((__users_isset != other->__users_isset) ||
      (__users_isset && ((__users || other->__users) && ![__users isEqual:other->__users]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__users release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) users {
  return [[__users retain_stub] autorelease_stub];
}

- (void) setUsers: (NSMutableArray *) users {
  [users retain_stub];
  [__users release_stub];
  __users = users;
  __users_isset = YES;
}

- (BOOL) usersIsSet {
  return __users_isset;
}

- (void) unsetUsers {
  [__users release_stub];
  __users = nil;
  __users_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            User *_elem20 = [[User alloc] init];
            [_elem20 read: inProtocol];
            [fieldValue addObject: _elem20];
            [_elem20 release_stub];
          }
          [inProtocol readListEnd];
          [self setUsers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivatedUsers"];
  if (__users_isset) {
    if (__users != nil) {
      [outProtocol writeFieldBeginWithName: @"users" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__users count]];
        int idx22;
        for (idx22 = 0; idx22 < [__users count]; idx22++)
        {
          [[__users objectAtIndex: idx22] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivatedUsers("];
  [ms appendString: @"users:"];
  [ms appendFormat: @"%@", __users];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RpOpen

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRemoteAddress: (NSString *) remoteAddress appVersion: (AppVersion *) appVersion libVersion: (AppVersion *) libVersion tenantName: (NSString *) tenantName
{
  self = [super init];
  __remoteAddress = [remoteAddress retain_stub];
  __remoteAddress_isset = YES;
  __appVersion = [appVersion retain_stub];
  __appVersion_isset = YES;
  __libVersion = [libVersion retain_stub];
  __libVersion_isset = YES;
  __tenantName = [tenantName retain_stub];
  __tenantName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"remoteAddress"])
  {
    __remoteAddress = [[decoder decodeObjectForKey: @"remoteAddress"] retain_stub];
    __remoteAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"appVersion"])
  {
    __appVersion = [[decoder decodeObjectForKey: @"appVersion"] retain_stub];
    __appVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"libVersion"])
  {
    __libVersion = [[decoder decodeObjectForKey: @"libVersion"] retain_stub];
    __libVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantName"])
  {
    __tenantName = [[decoder decodeObjectForKey: @"tenantName"] retain_stub];
    __tenantName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__remoteAddress_isset)
  {
    [encoder encodeObject: __remoteAddress forKey: @"remoteAddress"];
  }
  if (__appVersion_isset)
  {
    [encoder encodeObject: __appVersion forKey: @"appVersion"];
  }
  if (__libVersion_isset)
  {
    [encoder encodeObject: __libVersion forKey: @"libVersion"];
  }
  if (__tenantName_isset)
  {
    [encoder encodeObject: __tenantName forKey: @"tenantName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __remoteAddress_isset ? 2654435761 : 0;
  if (__remoteAddress_isset)
  {
    hash = (hash * 31) ^ [__remoteAddress hash];
  }
  hash = (hash * 31) ^ __appVersion_isset ? 2654435761 : 0;
  if (__appVersion_isset)
  {
    hash = (hash * 31) ^ [__appVersion hash];
  }
  hash = (hash * 31) ^ __libVersion_isset ? 2654435761 : 0;
  if (__libVersion_isset)
  {
    hash = (hash * 31) ^ [__libVersion hash];
  }
  hash = (hash * 31) ^ __tenantName_isset ? 2654435761 : 0;
  if (__tenantName_isset)
  {
    hash = (hash * 31) ^ [__tenantName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RpOpen class]]) {
    return NO;
  }
  RpOpen *other = (RpOpen *)anObject;
  if ((__remoteAddress_isset != other->__remoteAddress_isset) ||
      (__remoteAddress_isset && ((__remoteAddress || other->__remoteAddress) && ![__remoteAddress isEqual:other->__remoteAddress]))) {
    return NO;
  }
  if ((__appVersion_isset != other->__appVersion_isset) ||
      (__appVersion_isset && ((__appVersion || other->__appVersion) && ![__appVersion isEqual:other->__appVersion]))) {
    return NO;
  }
  if ((__libVersion_isset != other->__libVersion_isset) ||
      (__libVersion_isset && ((__libVersion || other->__libVersion) && ![__libVersion isEqual:other->__libVersion]))) {
    return NO;
  }
  if ((__tenantName_isset != other->__tenantName_isset) ||
      (__tenantName_isset && ((__tenantName || other->__tenantName) && ![__tenantName isEqual:other->__tenantName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__remoteAddress release_stub];
  [__appVersion release_stub];
  [__libVersion release_stub];
  [__tenantName release_stub];
  [super dealloc_stub];
}

- (NSString *) remoteAddress {
  return [[__remoteAddress retain_stub] autorelease_stub];
}

- (void) setRemoteAddress: (NSString *) remoteAddress {
  [remoteAddress retain_stub];
  [__remoteAddress release_stub];
  __remoteAddress = remoteAddress;
  __remoteAddress_isset = YES;
}

- (BOOL) remoteAddressIsSet {
  return __remoteAddress_isset;
}

- (void) unsetRemoteAddress {
  [__remoteAddress release_stub];
  __remoteAddress = nil;
  __remoteAddress_isset = NO;
}

- (AppVersion *) appVersion {
  return [[__appVersion retain_stub] autorelease_stub];
}

- (void) setAppVersion: (AppVersion *) appVersion {
  [appVersion retain_stub];
  [__appVersion release_stub];
  __appVersion = appVersion;
  __appVersion_isset = YES;
}

- (BOOL) appVersionIsSet {
  return __appVersion_isset;
}

- (void) unsetAppVersion {
  [__appVersion release_stub];
  __appVersion = nil;
  __appVersion_isset = NO;
}

- (AppVersion *) libVersion {
  return [[__libVersion retain_stub] autorelease_stub];
}

- (void) setLibVersion: (AppVersion *) libVersion {
  [libVersion retain_stub];
  [__libVersion release_stub];
  __libVersion = libVersion;
  __libVersion_isset = YES;
}

- (BOOL) libVersionIsSet {
  return __libVersion_isset;
}

- (void) unsetLibVersion {
  [__libVersion release_stub];
  __libVersion = nil;
  __libVersion_isset = NO;
}

- (NSString *) tenantName {
  return [[__tenantName retain_stub] autorelease_stub];
}

- (void) setTenantName: (NSString *) tenantName {
  [tenantName retain_stub];
  [__tenantName release_stub];
  __tenantName = tenantName;
  __tenantName_isset = YES;
}

- (BOOL) tenantNameIsSet {
  return __tenantName_isset;
}

- (void) unsetTenantName {
  [__tenantName release_stub];
  __tenantName = nil;
  __tenantName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemoteAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AppVersion *fieldValue = [[AppVersion alloc] init];
          [fieldValue read: inProtocol];
          [self setAppVersion: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AppVersion *fieldValue = [[AppVersion alloc] init];
          [fieldValue read: inProtocol];
          [self setLibVersion: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTenantName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RpOpen"];
  if (__remoteAddress_isset) {
    if (__remoteAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"remoteAddress" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __remoteAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appVersion_isset) {
    if (__appVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"appVersion" type: TType_STRUCT fieldID: 2];
      [__appVersion write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__libVersion_isset) {
    if (__libVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"libVersion" type: TType_STRUCT fieldID: 3];
      [__libVersion write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tenantName_isset) {
    if (__tenantName != nil) {
      [outProtocol writeFieldBeginWithName: @"tenantName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __tenantName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RpOpen("];
  [ms appendString: @"remoteAddress:"];
  [ms appendFormat: @"\"%@\"", __remoteAddress];
  [ms appendString: @",appVersion:"];
  [ms appendFormat: @"%@", __appVersion];
  [ms appendString: @",libVersion:"];
  [ms appendFormat: @"%@", __libVersion];
  [ms appendString: @",tenantName:"];
  [ms appendFormat: @"\"%@\"", __tenantName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppAccount

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name userName: (NSString *) userName tenantName: (NSString *) tenantName realmName: (NSString *) realmName fullQualifiedName: (NSString *) fullQualifiedName updatePushNotification: (BOOL) updatePushNotification usingReverseProxy: (BOOL) usingReverseProxy settingsFileName: (NSString *) settingsFileName
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __tenantName = [tenantName retain_stub];
  __tenantName_isset = YES;
  __realmName = [realmName retain_stub];
  __realmName_isset = YES;
  __fullQualifiedName = [fullQualifiedName retain_stub];
  __fullQualifiedName_isset = YES;
  __updatePushNotification = updatePushNotification;
  __updatePushNotification_isset = YES;
  __usingReverseProxy = usingReverseProxy;
  __usingReverseProxy_isset = YES;
  __settingsFileName = [settingsFileName retain_stub];
  __settingsFileName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantName"])
  {
    __tenantName = [[decoder decodeObjectForKey: @"tenantName"] retain_stub];
    __tenantName_isset = YES;
  }
  if ([decoder containsValueForKey: @"realmName"])
  {
    __realmName = [[decoder decodeObjectForKey: @"realmName"] retain_stub];
    __realmName_isset = YES;
  }
  if ([decoder containsValueForKey: @"fullQualifiedName"])
  {
    __fullQualifiedName = [[decoder decodeObjectForKey: @"fullQualifiedName"] retain_stub];
    __fullQualifiedName_isset = YES;
  }
  if ([decoder containsValueForKey: @"updatePushNotification"])
  {
    __updatePushNotification = [decoder decodeBoolForKey: @"updatePushNotification"];
    __updatePushNotification_isset = YES;
  }
  if ([decoder containsValueForKey: @"usingReverseProxy"])
  {
    __usingReverseProxy = [decoder decodeBoolForKey: @"usingReverseProxy"];
    __usingReverseProxy_isset = YES;
  }
  if ([decoder containsValueForKey: @"settingsFileName"])
  {
    __settingsFileName = [[decoder decodeObjectForKey: @"settingsFileName"] retain_stub];
    __settingsFileName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__tenantName_isset)
  {
    [encoder encodeObject: __tenantName forKey: @"tenantName"];
  }
  if (__realmName_isset)
  {
    [encoder encodeObject: __realmName forKey: @"realmName"];
  }
  if (__fullQualifiedName_isset)
  {
    [encoder encodeObject: __fullQualifiedName forKey: @"fullQualifiedName"];
  }
  if (__updatePushNotification_isset)
  {
    [encoder encodeBool: __updatePushNotification forKey: @"updatePushNotification"];
  }
  if (__usingReverseProxy_isset)
  {
    [encoder encodeBool: __usingReverseProxy forKey: @"usingReverseProxy"];
  }
  if (__settingsFileName_isset)
  {
    [encoder encodeObject: __settingsFileName forKey: @"settingsFileName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __userName_isset ? 2654435761 : 0;
  if (__userName_isset)
  {
    hash = (hash * 31) ^ [__userName hash];
  }
  hash = (hash * 31) ^ __tenantName_isset ? 2654435761 : 0;
  if (__tenantName_isset)
  {
    hash = (hash * 31) ^ [__tenantName hash];
  }
  hash = (hash * 31) ^ __realmName_isset ? 2654435761 : 0;
  if (__realmName_isset)
  {
    hash = (hash * 31) ^ [__realmName hash];
  }
  hash = (hash * 31) ^ __fullQualifiedName_isset ? 2654435761 : 0;
  if (__fullQualifiedName_isset)
  {
    hash = (hash * 31) ^ [__fullQualifiedName hash];
  }
  hash = (hash * 31) ^ __updatePushNotification_isset ? 2654435761 : 0;
  if (__updatePushNotification_isset)
  {
    hash = (hash * 31) ^ [@(__updatePushNotification) hash];
  }
  hash = (hash * 31) ^ __usingReverseProxy_isset ? 2654435761 : 0;
  if (__usingReverseProxy_isset)
  {
    hash = (hash * 31) ^ [@(__usingReverseProxy) hash];
  }
  hash = (hash * 31) ^ __settingsFileName_isset ? 2654435761 : 0;
  if (__settingsFileName_isset)
  {
    hash = (hash * 31) ^ [__settingsFileName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppAccount class]]) {
    return NO;
  }
  AppAccount *other = (AppAccount *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__userName_isset != other->__userName_isset) ||
      (__userName_isset && ((__userName || other->__userName) && ![__userName isEqual:other->__userName]))) {
    return NO;
  }
  if ((__tenantName_isset != other->__tenantName_isset) ||
      (__tenantName_isset && ((__tenantName || other->__tenantName) && ![__tenantName isEqual:other->__tenantName]))) {
    return NO;
  }
  if ((__realmName_isset != other->__realmName_isset) ||
      (__realmName_isset && ((__realmName || other->__realmName) && ![__realmName isEqual:other->__realmName]))) {
    return NO;
  }
  if ((__fullQualifiedName_isset != other->__fullQualifiedName_isset) ||
      (__fullQualifiedName_isset && ((__fullQualifiedName || other->__fullQualifiedName) && ![__fullQualifiedName isEqual:other->__fullQualifiedName]))) {
    return NO;
  }
  if ((__updatePushNotification_isset != other->__updatePushNotification_isset) ||
      (__updatePushNotification_isset && (__updatePushNotification != other->__updatePushNotification))) {
    return NO;
  }
  if ((__usingReverseProxy_isset != other->__usingReverseProxy_isset) ||
      (__usingReverseProxy_isset && (__usingReverseProxy != other->__usingReverseProxy))) {
    return NO;
  }
  if ((__settingsFileName_isset != other->__settingsFileName_isset) ||
      (__settingsFileName_isset && ((__settingsFileName || other->__settingsFileName) && ![__settingsFileName isEqual:other->__settingsFileName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__userName release_stub];
  [__tenantName release_stub];
  [__realmName release_stub];
  [__fullQualifiedName release_stub];
  [__settingsFileName release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) tenantName {
  return [[__tenantName retain_stub] autorelease_stub];
}

- (void) setTenantName: (NSString *) tenantName {
  [tenantName retain_stub];
  [__tenantName release_stub];
  __tenantName = tenantName;
  __tenantName_isset = YES;
}

- (BOOL) tenantNameIsSet {
  return __tenantName_isset;
}

- (void) unsetTenantName {
  [__tenantName release_stub];
  __tenantName = nil;
  __tenantName_isset = NO;
}

- (NSString *) realmName {
  return [[__realmName retain_stub] autorelease_stub];
}

- (void) setRealmName: (NSString *) realmName {
  [realmName retain_stub];
  [__realmName release_stub];
  __realmName = realmName;
  __realmName_isset = YES;
}

- (BOOL) realmNameIsSet {
  return __realmName_isset;
}

- (void) unsetRealmName {
  [__realmName release_stub];
  __realmName = nil;
  __realmName_isset = NO;
}

- (NSString *) fullQualifiedName {
  return [[__fullQualifiedName retain_stub] autorelease_stub];
}

- (void) setFullQualifiedName: (NSString *) fullQualifiedName {
  [fullQualifiedName retain_stub];
  [__fullQualifiedName release_stub];
  __fullQualifiedName = fullQualifiedName;
  __fullQualifiedName_isset = YES;
}

- (BOOL) fullQualifiedNameIsSet {
  return __fullQualifiedName_isset;
}

- (void) unsetFullQualifiedName {
  [__fullQualifiedName release_stub];
  __fullQualifiedName = nil;
  __fullQualifiedName_isset = NO;
}

- (BOOL) updatePushNotification {
  return __updatePushNotification;
}

- (void) setUpdatePushNotification: (BOOL) updatePushNotification {
  __updatePushNotification = updatePushNotification;
  __updatePushNotification_isset = YES;
}

- (BOOL) updatePushNotificationIsSet {
  return __updatePushNotification_isset;
}

- (void) unsetUpdatePushNotification {
  __updatePushNotification_isset = NO;
}

- (BOOL) usingReverseProxy {
  return __usingReverseProxy;
}

- (void) setUsingReverseProxy: (BOOL) usingReverseProxy {
  __usingReverseProxy = usingReverseProxy;
  __usingReverseProxy_isset = YES;
}

- (BOOL) usingReverseProxyIsSet {
  return __usingReverseProxy_isset;
}

- (void) unsetUsingReverseProxy {
  __usingReverseProxy_isset = NO;
}

- (NSString *) settingsFileName {
  return [[__settingsFileName retain_stub] autorelease_stub];
}

- (void) setSettingsFileName: (NSString *) settingsFileName {
  [settingsFileName retain_stub];
  [__settingsFileName release_stub];
  __settingsFileName = settingsFileName;
  __settingsFileName_isset = YES;
}

- (BOOL) settingsFileNameIsSet {
  return __settingsFileName_isset;
}

- (void) unsetSettingsFileName {
  [__settingsFileName release_stub];
  __settingsFileName = nil;
  __settingsFileName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTenantName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRealmName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFullQualifiedName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUpdatePushNotification: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUsingReverseProxy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSettingsFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppAccount"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tenantName_isset) {
    if (__tenantName != nil) {
      [outProtocol writeFieldBeginWithName: @"tenantName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __tenantName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__realmName_isset) {
    if (__realmName != nil) {
      [outProtocol writeFieldBeginWithName: @"realmName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __realmName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fullQualifiedName_isset) {
    if (__fullQualifiedName != nil) {
      [outProtocol writeFieldBeginWithName: @"fullQualifiedName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fullQualifiedName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updatePushNotification_isset) {
    [outProtocol writeFieldBeginWithName: @"updatePushNotification" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __updatePushNotification];
    [outProtocol writeFieldEnd];
  }
  if (__usingReverseProxy_isset) {
    [outProtocol writeFieldBeginWithName: @"usingReverseProxy" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __usingReverseProxy];
    [outProtocol writeFieldEnd];
  }
  if (__settingsFileName_isset) {
    if (__settingsFileName != nil) {
      [outProtocol writeFieldBeginWithName: @"settingsFileName" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __settingsFileName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppAccount("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",tenantName:"];
  [ms appendFormat: @"\"%@\"", __tenantName];
  [ms appendString: @",realmName:"];
  [ms appendFormat: @"\"%@\"", __realmName];
  [ms appendString: @",fullQualifiedName:"];
  [ms appendFormat: @"\"%@\"", __fullQualifiedName];
  [ms appendString: @",updatePushNotification:"];
  [ms appendFormat: @"%i", __updatePushNotification];
  [ms appendString: @",usingReverseProxy:"];
  [ms appendFormat: @"%i", __usingReverseProxy];
  [ms appendString: @",settingsFileName:"];
  [ms appendFormat: @"\"%@\"", __settingsFileName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppAccounts

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccounts: (NSMutableArray *) accounts
{
  self = [super init];
  __accounts = [accounts retain_stub];
  __accounts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accounts"])
  {
    __accounts = [[decoder decodeObjectForKey: @"accounts"] retain_stub];
    __accounts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accounts_isset)
  {
    [encoder encodeObject: __accounts forKey: @"accounts"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __accounts_isset ? 2654435761 : 0;
  if (__accounts_isset)
  {
    hash = (hash * 31) ^ [__accounts hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppAccounts class]]) {
    return NO;
  }
  AppAccounts *other = (AppAccounts *)anObject;
  if ((__accounts_isset != other->__accounts_isset) ||
      (__accounts_isset && ((__accounts || other->__accounts) && ![__accounts isEqual:other->__accounts]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__accounts release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) accounts {
  return [[__accounts retain_stub] autorelease_stub];
}

- (void) setAccounts: (NSMutableArray *) accounts {
  [accounts retain_stub];
  [__accounts release_stub];
  __accounts = accounts;
  __accounts_isset = YES;
}

- (BOOL) accountsIsSet {
  return __accounts_isset;
}

- (void) unsetAccounts {
  [__accounts release_stub];
  __accounts = nil;
  __accounts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size23;
          [inProtocol readListBeginReturningElementType: NULL size: &_size23];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size23];
          int _i24;
          for (_i24 = 0; _i24 < _size23; ++_i24)
          {
            AppAccount *_elem25 = [[AppAccount alloc] init];
            [_elem25 read: inProtocol];
            [fieldValue addObject: _elem25];
            [_elem25 release_stub];
          }
          [inProtocol readListEnd];
          [self setAccounts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppAccounts"];
  if (__accounts_isset) {
    if (__accounts != nil) {
      [outProtocol writeFieldBeginWithName: @"accounts" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__accounts count]];
        int idx27;
        for (idx27 = 0; idx27 < [__accounts count]; idx27++)
        {
          [[__accounts objectAtIndex: idx27] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppAccounts("];
  [ms appendString: @"accounts:"];
  [ms appendFormat: @"%@", __accounts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static uint8_t PROTOCOL_VERSION = 49;
static uint8_t PROTOCOL_APP_TO_SERVER = 65;
static uint8_t PROTOCOL_SERVER_TO_APP = 83;
static uint8_t PROTOCOL_REVERSE_PROXY = 66;
static uint8_t REVERSE_PROXY_OPEN = 1;
static uint8_t REVERSE_PROXY_CLOSE = 2;
static uint8_t REVERSE_PROXY_DATA = 3;
static NSString * SIGNATURE_STRING = @"This is the SEM-DoubleCheck signature. This is user to verify the signatures";
static NSString * DcemFileName = @"SdkConfig.dcem";
static NSString * SdkConfigFileName = @"SdkConfig.as";
static NSString * SignatureFileName = @"SdkConfig.sig";
static NSString * TrustStoreFileName = @"TrustStore.pem";
static NSString * AuthConnectorFileName = @"AuthConnector.dcem";
static NSString * UserFullQualifiedId = @"userFqID";
static NSString * PasswordLessLogin = @"passwordLessLogin";
static NSString * PushNotificationTitle = @"pntitle";
static NSString * PushNotificationBody = @"pnBody";
static NSString * PushNotificationAction = @"pnAction";
static NSString * TENANT_SEPERATOR = @"!";
static NSString * REALM_SEPERATOR = @"$";
static NSString * PUSH_NOTIFICATION_TOKEN = @"hws.pushnotification.token";
static NSString * UNLOCK_USER_AUTH = @"unlock";
static NSString * TRUE_VALUE = @"true";

@implementation AppSystemConstants
+ (void) initialize {
}
+ (uint8_t) PROTOCOL_VERSION{
  return PROTOCOL_VERSION;
}
+ (uint8_t) PROTOCOL_APP_TO_SERVER{
  return PROTOCOL_APP_TO_SERVER;
}
+ (uint8_t) PROTOCOL_SERVER_TO_APP{
  return PROTOCOL_SERVER_TO_APP;
}
+ (uint8_t) PROTOCOL_REVERSE_PROXY{
  return PROTOCOL_REVERSE_PROXY;
}
+ (uint8_t) REVERSE_PROXY_OPEN{
  return REVERSE_PROXY_OPEN;
}
+ (uint8_t) REVERSE_PROXY_CLOSE{
  return REVERSE_PROXY_CLOSE;
}
+ (uint8_t) REVERSE_PROXY_DATA{
  return REVERSE_PROXY_DATA;
}
+ (NSString *) SIGNATURE_STRING{
  return SIGNATURE_STRING;
}
+ (NSString *) DcemFileName{
  return DcemFileName;
}
+ (NSString *) SdkConfigFileName{
  return SdkConfigFileName;
}
+ (NSString *) SignatureFileName{
  return SignatureFileName;
}
+ (NSString *) TrustStoreFileName{
  return TrustStoreFileName;
}
+ (NSString *) AuthConnectorFileName{
  return AuthConnectorFileName;
}
+ (NSString *) UserFullQualifiedId{
  return UserFullQualifiedId;
}
+ (NSString *) PasswordLessLogin{
  return PasswordLessLogin;
}
+ (NSString *) PushNotificationTitle{
  return PushNotificationTitle;
}
+ (NSString *) PushNotificationBody{
  return PushNotificationBody;
}
+ (NSString *) PushNotificationAction{
  return PushNotificationAction;
}
+ (NSString *) TENANT_SEPERATOR{
  return TENANT_SEPERATOR;
}
+ (NSString *) REALM_SEPERATOR{
  return REALM_SEPERATOR;
}
+ (NSString *) PUSH_NOTIFICATION_TOKEN{
  return PUSH_NOTIFICATION_TOKEN;
}
+ (NSString *) UNLOCK_USER_AUTH{
  return UNLOCK_USER_AUTH;
}
+ (NSString *) TRUE_VALUE{
  return TRUE_VALUE;
}
@end

@implementation AppSystemClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

@end

@implementation AppSystemProcessor

- (id) initWithAppSystem: (id <AppSystem>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
return self;
}

- (id<AppSystem>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

