/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class ActivationResponse implements org.apache.thrift.TBase<ActivationResponse, ActivationResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ActivationResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivationResponse");

  private static final org.apache.thrift.protocol.TField UPDATE_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAvailable", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNED_CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedCertificate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OFFLINE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineKey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ActivationResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ActivationResponseTupleSchemeFactory();

  public boolean updateAvailable; // required
  public int deviceId; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signedCertificate; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer deviceKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer offlineKey; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String deviceName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPDATE_AVAILABLE((short)1, "updateAvailable"),
    DEVICE_ID((short)2, "deviceId"),
    SIGNED_CERTIFICATE((short)3, "signedCertificate"),
    DEVICE_KEY((short)4, "deviceKey"),
    OFFLINE_KEY((short)5, "offlineKey"),
    DEVICE_NAME((short)6, "deviceName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATE_AVAILABLE
          return UPDATE_AVAILABLE;
        case 2: // DEVICE_ID
          return DEVICE_ID;
        case 3: // SIGNED_CERTIFICATE
          return SIGNED_CERTIFICATE;
        case 4: // DEVICE_KEY
          return DEVICE_KEY;
        case 5: // OFFLINE_KEY
          return OFFLINE_KEY;
        case 6: // DEVICE_NAME
          return DEVICE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATEAVAILABLE_ISSET_ID = 0;
  private static final int __DEVICEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATE_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("updateAvailable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNED_CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("signedCertificate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DEVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("deviceKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OFFLINE_KEY, new org.apache.thrift.meta_data.FieldMetaData("offlineKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivationResponse.class, metaDataMap);
  }

  public ActivationResponse() {
  }

  public ActivationResponse(
    boolean updateAvailable,
    int deviceId,
    java.nio.ByteBuffer signedCertificate,
    java.nio.ByteBuffer deviceKey,
    java.nio.ByteBuffer offlineKey,
    java.lang.String deviceName)
  {
    this();
    this.updateAvailable = updateAvailable;
    setUpdateAvailableIsSet(true);
    this.deviceId = deviceId;
    setDeviceIdIsSet(true);
    this.signedCertificate = org.apache.thrift.TBaseHelper.copyBinary(signedCertificate);
    this.deviceKey = org.apache.thrift.TBaseHelper.copyBinary(deviceKey);
    this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
    this.deviceName = deviceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivationResponse(ActivationResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.updateAvailable = other.updateAvailable;
    this.deviceId = other.deviceId;
    if (other.isSetSignedCertificate()) {
      this.signedCertificate = org.apache.thrift.TBaseHelper.copyBinary(other.signedCertificate);
    }
    if (other.isSetDeviceKey()) {
      this.deviceKey = org.apache.thrift.TBaseHelper.copyBinary(other.deviceKey);
    }
    if (other.isSetOfflineKey()) {
      this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(other.offlineKey);
    }
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
  }

  public ActivationResponse deepCopy() {
    return new ActivationResponse(this);
  }

  @Override
  public void clear() {
    setUpdateAvailableIsSet(false);
    this.updateAvailable = false;
    setDeviceIdIsSet(false);
    this.deviceId = 0;
    this.signedCertificate = null;
    this.deviceKey = null;
    this.offlineKey = null;
    this.deviceName = null;
  }

  public boolean isUpdateAvailable() {
    return this.updateAvailable;
  }

  public ActivationResponse setUpdateAvailable(boolean updateAvailable) {
    this.updateAvailable = updateAvailable;
    setUpdateAvailableIsSet(true);
    return this;
  }

  public void unsetUpdateAvailable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEAVAILABLE_ISSET_ID);
  }

  /** Returns true if field updateAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAvailable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEAVAILABLE_ISSET_ID);
  }

  public void setUpdateAvailableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEAVAILABLE_ISSET_ID, value);
  }

  public int getDeviceId() {
    return this.deviceId;
  }

  public ActivationResponse setDeviceId(int deviceId) {
    this.deviceId = deviceId;
    setDeviceIdIsSet(true);
    return this;
  }

  public void unsetDeviceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEVICEID_ISSET_ID);
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEVICEID_ISSET_ID);
  }

  public void setDeviceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEVICEID_ISSET_ID, value);
  }

  public byte[] getSignedCertificate() {
    setSignedCertificate(org.apache.thrift.TBaseHelper.rightSize(signedCertificate));
    return signedCertificate == null ? null : signedCertificate.array();
  }

  public java.nio.ByteBuffer bufferForSignedCertificate() {
    return org.apache.thrift.TBaseHelper.copyBinary(signedCertificate);
  }

  public ActivationResponse setSignedCertificate(byte[] signedCertificate) {
    this.signedCertificate = signedCertificate == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(signedCertificate.clone());
    return this;
  }

  public ActivationResponse setSignedCertificate(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signedCertificate) {
    this.signedCertificate = org.apache.thrift.TBaseHelper.copyBinary(signedCertificate);
    return this;
  }

  public void unsetSignedCertificate() {
    this.signedCertificate = null;
  }

  /** Returns true if field signedCertificate is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedCertificate() {
    return this.signedCertificate != null;
  }

  public void setSignedCertificateIsSet(boolean value) {
    if (!value) {
      this.signedCertificate = null;
    }
  }

  public byte[] getDeviceKey() {
    setDeviceKey(org.apache.thrift.TBaseHelper.rightSize(deviceKey));
    return deviceKey == null ? null : deviceKey.array();
  }

  public java.nio.ByteBuffer bufferForDeviceKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(deviceKey);
  }

  public ActivationResponse setDeviceKey(byte[] deviceKey) {
    this.deviceKey = deviceKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(deviceKey.clone());
    return this;
  }

  public ActivationResponse setDeviceKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer deviceKey) {
    this.deviceKey = org.apache.thrift.TBaseHelper.copyBinary(deviceKey);
    return this;
  }

  public void unsetDeviceKey() {
    this.deviceKey = null;
  }

  /** Returns true if field deviceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceKey() {
    return this.deviceKey != null;
  }

  public void setDeviceKeyIsSet(boolean value) {
    if (!value) {
      this.deviceKey = null;
    }
  }

  public byte[] getOfflineKey() {
    setOfflineKey(org.apache.thrift.TBaseHelper.rightSize(offlineKey));
    return offlineKey == null ? null : offlineKey.array();
  }

  public java.nio.ByteBuffer bufferForOfflineKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
  }

  public ActivationResponse setOfflineKey(byte[] offlineKey) {
    this.offlineKey = offlineKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(offlineKey.clone());
    return this;
  }

  public ActivationResponse setOfflineKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer offlineKey) {
    this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
    return this;
  }

  public void unsetOfflineKey() {
    this.offlineKey = null;
  }

  /** Returns true if field offlineKey is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineKey() {
    return this.offlineKey != null;
  }

  public void setOfflineKeyIsSet(boolean value) {
    if (!value) {
      this.offlineKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeviceName() {
    return this.deviceName;
  }

  public ActivationResponse setDeviceName(@org.apache.thrift.annotation.Nullable java.lang.String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UPDATE_AVAILABLE:
      if (value == null) {
        unsetUpdateAvailable();
      } else {
        setUpdateAvailable((java.lang.Boolean)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((java.lang.Integer)value);
      }
      break;

    case SIGNED_CERTIFICATE:
      if (value == null) {
        unsetSignedCertificate();
      } else {
        if (value instanceof byte[]) {
          setSignedCertificate((byte[])value);
        } else {
          setSignedCertificate((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DEVICE_KEY:
      if (value == null) {
        unsetDeviceKey();
      } else {
        if (value instanceof byte[]) {
          setDeviceKey((byte[])value);
        } else {
          setDeviceKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OFFLINE_KEY:
      if (value == null) {
        unsetOfflineKey();
      } else {
        if (value instanceof byte[]) {
          setOfflineKey((byte[])value);
        } else {
          setOfflineKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATE_AVAILABLE:
      return isUpdateAvailable();

    case DEVICE_ID:
      return getDeviceId();

    case SIGNED_CERTIFICATE:
      return getSignedCertificate();

    case DEVICE_KEY:
      return getDeviceKey();

    case OFFLINE_KEY:
      return getOfflineKey();

    case DEVICE_NAME:
      return getDeviceName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UPDATE_AVAILABLE:
      return isSetUpdateAvailable();
    case DEVICE_ID:
      return isSetDeviceId();
    case SIGNED_CERTIFICATE:
      return isSetSignedCertificate();
    case DEVICE_KEY:
      return isSetDeviceKey();
    case OFFLINE_KEY:
      return isSetOfflineKey();
    case DEVICE_NAME:
      return isSetDeviceName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivationResponse)
      return this.equals((ActivationResponse)that);
    return false;
  }

  public boolean equals(ActivationResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_updateAvailable = true;
    boolean that_present_updateAvailable = true;
    if (this_present_updateAvailable || that_present_updateAvailable) {
      if (!(this_present_updateAvailable && that_present_updateAvailable))
        return false;
      if (this.updateAvailable != that.updateAvailable)
        return false;
    }

    boolean this_present_deviceId = true;
    boolean that_present_deviceId = true;
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (this.deviceId != that.deviceId)
        return false;
    }

    boolean this_present_signedCertificate = true && this.isSetSignedCertificate();
    boolean that_present_signedCertificate = true && that.isSetSignedCertificate();
    if (this_present_signedCertificate || that_present_signedCertificate) {
      if (!(this_present_signedCertificate && that_present_signedCertificate))
        return false;
      if (!this.signedCertificate.equals(that.signedCertificate))
        return false;
    }

    boolean this_present_deviceKey = true && this.isSetDeviceKey();
    boolean that_present_deviceKey = true && that.isSetDeviceKey();
    if (this_present_deviceKey || that_present_deviceKey) {
      if (!(this_present_deviceKey && that_present_deviceKey))
        return false;
      if (!this.deviceKey.equals(that.deviceKey))
        return false;
    }

    boolean this_present_offlineKey = true && this.isSetOfflineKey();
    boolean that_present_offlineKey = true && that.isSetOfflineKey();
    if (this_present_offlineKey || that_present_offlineKey) {
      if (!(this_present_offlineKey && that_present_offlineKey))
        return false;
      if (!this.offlineKey.equals(that.offlineKey))
        return false;
    }

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((updateAvailable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + deviceId;

    hashCode = hashCode * 8191 + ((isSetSignedCertificate()) ? 131071 : 524287);
    if (isSetSignedCertificate())
      hashCode = hashCode * 8191 + signedCertificate.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceKey()) ? 131071 : 524287);
    if (isSetDeviceKey())
      hashCode = hashCode * 8191 + deviceKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetOfflineKey()) ? 131071 : 524287);
    if (isSetOfflineKey())
      hashCode = hashCode * 8191 + offlineKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceName()) ? 131071 : 524287);
    if (isSetDeviceName())
      hashCode = hashCode * 8191 + deviceName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ActivationResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUpdateAvailable()).compareTo(other.isSetUpdateAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAvailable, other.updateAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignedCertificate()).compareTo(other.isSetSignedCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedCertificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedCertificate, other.signedCertificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceKey()).compareTo(other.isSetDeviceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceKey, other.deviceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfflineKey()).compareTo(other.isSetOfflineKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineKey, other.offlineKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ActivationResponse(");
    boolean first = true;

    sb.append("updateAvailable:");
    sb.append(this.updateAvailable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    sb.append(this.deviceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedCertificate:");
    if (this.signedCertificate == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.signedCertificate, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceKey:");
    if (this.deviceKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.deviceKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offlineKey:");
    if (this.offlineKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.offlineKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivationResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActivationResponseStandardScheme getScheme() {
      return new ActivationResponseStandardScheme();
    }
  }

  private static class ActivationResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ActivationResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivationResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPDATE_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.updateAvailable = iprot.readBool();
              struct.setUpdateAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceId = iprot.readI32();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNED_CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signedCertificate = iprot.readBinary();
              struct.setSignedCertificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceKey = iprot.readBinary();
              struct.setDeviceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFLINE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offlineKey = iprot.readBinary();
              struct.setOfflineKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivationResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UPDATE_AVAILABLE_FIELD_DESC);
      oprot.writeBool(struct.updateAvailable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
      oprot.writeI32(struct.deviceId);
      oprot.writeFieldEnd();
      if (struct.signedCertificate != null) {
        oprot.writeFieldBegin(SIGNED_CERTIFICATE_FIELD_DESC);
        oprot.writeBinary(struct.signedCertificate);
        oprot.writeFieldEnd();
      }
      if (struct.deviceKey != null) {
        oprot.writeFieldBegin(DEVICE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.deviceKey);
        oprot.writeFieldEnd();
      }
      if (struct.offlineKey != null) {
        oprot.writeFieldBegin(OFFLINE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.offlineKey);
        oprot.writeFieldEnd();
      }
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivationResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActivationResponseTupleScheme getScheme() {
      return new ActivationResponseTupleScheme();
    }
  }

  private static class ActivationResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ActivationResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivationResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUpdateAvailable()) {
        optionals.set(0);
      }
      if (struct.isSetDeviceId()) {
        optionals.set(1);
      }
      if (struct.isSetSignedCertificate()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceKey()) {
        optionals.set(3);
      }
      if (struct.isSetOfflineKey()) {
        optionals.set(4);
      }
      if (struct.isSetDeviceName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUpdateAvailable()) {
        oprot.writeBool(struct.updateAvailable);
      }
      if (struct.isSetDeviceId()) {
        oprot.writeI32(struct.deviceId);
      }
      if (struct.isSetSignedCertificate()) {
        oprot.writeBinary(struct.signedCertificate);
      }
      if (struct.isSetDeviceKey()) {
        oprot.writeBinary(struct.deviceKey);
      }
      if (struct.isSetOfflineKey()) {
        oprot.writeBinary(struct.offlineKey);
      }
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivationResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.updateAvailable = iprot.readBool();
        struct.setUpdateAvailableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deviceId = iprot.readI32();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.signedCertificate = iprot.readBinary();
        struct.setSignedCertificateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceKey = iprot.readBinary();
        struct.setDeviceKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.offlineKey = iprot.readBinary();
        struct.setOfflineKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

