/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class LoginResponse implements org.apache.thrift.TBase<LoginResponse, LoginResponse._Fields>, java.io.Serializable, Cloneable, Comparable<LoginResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginResponse");

  private static final org.apache.thrift.protocol.TField DEVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ONE_TIME_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("oneTimePassword", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_AVAILABLE_TILL_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAvailableTill", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PASSCODE_VALID_FOR_FIELD_DESC = new org.apache.thrift.protocol.TField("passcodeValidFor", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("updateInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LICENCE_EXPIRES_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("licenceExpiresOn", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TEST_LICENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("testLicence", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField LDAP_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("ldapUser", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField KEEP_ALIVE_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keepAliveSeconds", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookie", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_EXPIRES_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookieExpiresOn", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoginResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoginResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer deviceKey; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String oneTimePassword; // required
  public long updateAvailableTill; // required
  public int passcodeValidFor; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String updateInfo; // optional
  public long licenceExpiresOn; // required
  public boolean testLicence; // required
  public boolean ldapUser; // required
  public int keepAliveSeconds; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sessionCookie; // optional
  public int sessionCookieExpiresOn; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_KEY((short)1, "deviceKey"),
    ONE_TIME_PASSWORD((short)2, "oneTimePassword"),
    UPDATE_AVAILABLE_TILL((short)3, "updateAvailableTill"),
    PASSCODE_VALID_FOR((short)4, "passcodeValidFor"),
    UPDATE_INFO((short)5, "updateInfo"),
    LICENCE_EXPIRES_ON((short)6, "licenceExpiresOn"),
    TEST_LICENCE((short)7, "testLicence"),
    LDAP_USER((short)8, "ldapUser"),
    KEEP_ALIVE_SECONDS((short)9, "keepAliveSeconds"),
    SESSION_COOKIE((short)10, "sessionCookie"),
    SESSION_COOKIE_EXPIRES_ON((short)11, "sessionCookieExpiresOn");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_KEY
          return DEVICE_KEY;
        case 2: // ONE_TIME_PASSWORD
          return ONE_TIME_PASSWORD;
        case 3: // UPDATE_AVAILABLE_TILL
          return UPDATE_AVAILABLE_TILL;
        case 4: // PASSCODE_VALID_FOR
          return PASSCODE_VALID_FOR;
        case 5: // UPDATE_INFO
          return UPDATE_INFO;
        case 6: // LICENCE_EXPIRES_ON
          return LICENCE_EXPIRES_ON;
        case 7: // TEST_LICENCE
          return TEST_LICENCE;
        case 8: // LDAP_USER
          return LDAP_USER;
        case 9: // KEEP_ALIVE_SECONDS
          return KEEP_ALIVE_SECONDS;
        case 10: // SESSION_COOKIE
          return SESSION_COOKIE;
        case 11: // SESSION_COOKIE_EXPIRES_ON
          return SESSION_COOKIE_EXPIRES_ON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATEAVAILABLETILL_ISSET_ID = 0;
  private static final int __PASSCODEVALIDFOR_ISSET_ID = 1;
  private static final int __LICENCEEXPIRESON_ISSET_ID = 2;
  private static final int __TESTLICENCE_ISSET_ID = 3;
  private static final int __LDAPUSER_ISSET_ID = 4;
  private static final int __KEEPALIVESECONDS_ISSET_ID = 5;
  private static final int __SESSIONCOOKIEEXPIRESON_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UPDATE_INFO,_Fields.SESSION_COOKIE,_Fields.SESSION_COOKIE_EXPIRES_ON};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("deviceKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ONE_TIME_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("oneTimePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AVAILABLE_TILL, new org.apache.thrift.meta_data.FieldMetaData("updateAvailableTill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PASSCODE_VALID_FOR, new org.apache.thrift.meta_data.FieldMetaData("passcodeValidFor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("updateInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LICENCE_EXPIRES_ON, new org.apache.thrift.meta_data.FieldMetaData("licenceExpiresOn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEST_LICENCE, new org.apache.thrift.meta_data.FieldMetaData("testLicence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LDAP_USER, new org.apache.thrift.meta_data.FieldMetaData("ldapUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEEP_ALIVE_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("keepAliveSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SESSION_COOKIE, new org.apache.thrift.meta_data.FieldMetaData("sessionCookie", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_COOKIE_EXPIRES_ON, new org.apache.thrift.meta_data.FieldMetaData("sessionCookieExpiresOn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginResponse.class, metaDataMap);
  }

  public LoginResponse() {
  }

  public LoginResponse(
    java.nio.ByteBuffer deviceKey,
    java.lang.String oneTimePassword,
    long updateAvailableTill,
    int passcodeValidFor,
    long licenceExpiresOn,
    boolean testLicence,
    boolean ldapUser,
    int keepAliveSeconds)
  {
    this();
    this.deviceKey = org.apache.thrift.TBaseHelper.copyBinary(deviceKey);
    this.oneTimePassword = oneTimePassword;
    this.updateAvailableTill = updateAvailableTill;
    setUpdateAvailableTillIsSet(true);
    this.passcodeValidFor = passcodeValidFor;
    setPasscodeValidForIsSet(true);
    this.licenceExpiresOn = licenceExpiresOn;
    setLicenceExpiresOnIsSet(true);
    this.testLicence = testLicence;
    setTestLicenceIsSet(true);
    this.ldapUser = ldapUser;
    setLdapUserIsSet(true);
    this.keepAliveSeconds = keepAliveSeconds;
    setKeepAliveSecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginResponse(LoginResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceKey()) {
      this.deviceKey = org.apache.thrift.TBaseHelper.copyBinary(other.deviceKey);
    }
    if (other.isSetOneTimePassword()) {
      this.oneTimePassword = other.oneTimePassword;
    }
    this.updateAvailableTill = other.updateAvailableTill;
    this.passcodeValidFor = other.passcodeValidFor;
    if (other.isSetUpdateInfo()) {
      this.updateInfo = other.updateInfo;
    }
    this.licenceExpiresOn = other.licenceExpiresOn;
    this.testLicence = other.testLicence;
    this.ldapUser = other.ldapUser;
    this.keepAliveSeconds = other.keepAliveSeconds;
    if (other.isSetSessionCookie()) {
      this.sessionCookie = other.sessionCookie;
    }
    this.sessionCookieExpiresOn = other.sessionCookieExpiresOn;
  }

  public LoginResponse deepCopy() {
    return new LoginResponse(this);
  }

  @Override
  public void clear() {
    this.deviceKey = null;
    this.oneTimePassword = null;
    setUpdateAvailableTillIsSet(false);
    this.updateAvailableTill = 0;
    setPasscodeValidForIsSet(false);
    this.passcodeValidFor = 0;
    this.updateInfo = null;
    setLicenceExpiresOnIsSet(false);
    this.licenceExpiresOn = 0;
    setTestLicenceIsSet(false);
    this.testLicence = false;
    setLdapUserIsSet(false);
    this.ldapUser = false;
    setKeepAliveSecondsIsSet(false);
    this.keepAliveSeconds = 0;
    this.sessionCookie = null;
    setSessionCookieExpiresOnIsSet(false);
    this.sessionCookieExpiresOn = 0;
  }

  public byte[] getDeviceKey() {
    setDeviceKey(org.apache.thrift.TBaseHelper.rightSize(deviceKey));
    return deviceKey == null ? null : deviceKey.array();
  }

  public java.nio.ByteBuffer bufferForDeviceKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(deviceKey);
  }

  public LoginResponse setDeviceKey(byte[] deviceKey) {
    this.deviceKey = deviceKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(deviceKey.clone());
    return this;
  }

  public LoginResponse setDeviceKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer deviceKey) {
    this.deviceKey = org.apache.thrift.TBaseHelper.copyBinary(deviceKey);
    return this;
  }

  public void unsetDeviceKey() {
    this.deviceKey = null;
  }

  /** Returns true if field deviceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceKey() {
    return this.deviceKey != null;
  }

  public void setDeviceKeyIsSet(boolean value) {
    if (!value) {
      this.deviceKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOneTimePassword() {
    return this.oneTimePassword;
  }

  public LoginResponse setOneTimePassword(@org.apache.thrift.annotation.Nullable java.lang.String oneTimePassword) {
    this.oneTimePassword = oneTimePassword;
    return this;
  }

  public void unsetOneTimePassword() {
    this.oneTimePassword = null;
  }

  /** Returns true if field oneTimePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetOneTimePassword() {
    return this.oneTimePassword != null;
  }

  public void setOneTimePasswordIsSet(boolean value) {
    if (!value) {
      this.oneTimePassword = null;
    }
  }

  public long getUpdateAvailableTill() {
    return this.updateAvailableTill;
  }

  public LoginResponse setUpdateAvailableTill(long updateAvailableTill) {
    this.updateAvailableTill = updateAvailableTill;
    setUpdateAvailableTillIsSet(true);
    return this;
  }

  public void unsetUpdateAvailableTill() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEAVAILABLETILL_ISSET_ID);
  }

  /** Returns true if field updateAvailableTill is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAvailableTill() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEAVAILABLETILL_ISSET_ID);
  }

  public void setUpdateAvailableTillIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEAVAILABLETILL_ISSET_ID, value);
  }

  public int getPasscodeValidFor() {
    return this.passcodeValidFor;
  }

  public LoginResponse setPasscodeValidFor(int passcodeValidFor) {
    this.passcodeValidFor = passcodeValidFor;
    setPasscodeValidForIsSet(true);
    return this;
  }

  public void unsetPasscodeValidFor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PASSCODEVALIDFOR_ISSET_ID);
  }

  /** Returns true if field passcodeValidFor is set (has been assigned a value) and false otherwise */
  public boolean isSetPasscodeValidFor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PASSCODEVALIDFOR_ISSET_ID);
  }

  public void setPasscodeValidForIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PASSCODEVALIDFOR_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdateInfo() {
    return this.updateInfo;
  }

  public LoginResponse setUpdateInfo(@org.apache.thrift.annotation.Nullable java.lang.String updateInfo) {
    this.updateInfo = updateInfo;
    return this;
  }

  public void unsetUpdateInfo() {
    this.updateInfo = null;
  }

  /** Returns true if field updateInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateInfo() {
    return this.updateInfo != null;
  }

  public void setUpdateInfoIsSet(boolean value) {
    if (!value) {
      this.updateInfo = null;
    }
  }

  public long getLicenceExpiresOn() {
    return this.licenceExpiresOn;
  }

  public LoginResponse setLicenceExpiresOn(long licenceExpiresOn) {
    this.licenceExpiresOn = licenceExpiresOn;
    setLicenceExpiresOnIsSet(true);
    return this;
  }

  public void unsetLicenceExpiresOn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LICENCEEXPIRESON_ISSET_ID);
  }

  /** Returns true if field licenceExpiresOn is set (has been assigned a value) and false otherwise */
  public boolean isSetLicenceExpiresOn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LICENCEEXPIRESON_ISSET_ID);
  }

  public void setLicenceExpiresOnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LICENCEEXPIRESON_ISSET_ID, value);
  }

  public boolean isTestLicence() {
    return this.testLicence;
  }

  public LoginResponse setTestLicence(boolean testLicence) {
    this.testLicence = testLicence;
    setTestLicenceIsSet(true);
    return this;
  }

  public void unsetTestLicence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TESTLICENCE_ISSET_ID);
  }

  /** Returns true if field testLicence is set (has been assigned a value) and false otherwise */
  public boolean isSetTestLicence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TESTLICENCE_ISSET_ID);
  }

  public void setTestLicenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TESTLICENCE_ISSET_ID, value);
  }

  public boolean isLdapUser() {
    return this.ldapUser;
  }

  public LoginResponse setLdapUser(boolean ldapUser) {
    this.ldapUser = ldapUser;
    setLdapUserIsSet(true);
    return this;
  }

  public void unsetLdapUser() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LDAPUSER_ISSET_ID);
  }

  /** Returns true if field ldapUser is set (has been assigned a value) and false otherwise */
  public boolean isSetLdapUser() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LDAPUSER_ISSET_ID);
  }

  public void setLdapUserIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LDAPUSER_ISSET_ID, value);
  }

  public int getKeepAliveSeconds() {
    return this.keepAliveSeconds;
  }

  public LoginResponse setKeepAliveSeconds(int keepAliveSeconds) {
    this.keepAliveSeconds = keepAliveSeconds;
    setKeepAliveSecondsIsSet(true);
    return this;
  }

  public void unsetKeepAliveSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEEPALIVESECONDS_ISSET_ID);
  }

  /** Returns true if field keepAliveSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetKeepAliveSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEEPALIVESECONDS_ISSET_ID);
  }

  public void setKeepAliveSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEEPALIVESECONDS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSessionCookie() {
    return this.sessionCookie;
  }

  public LoginResponse setSessionCookie(@org.apache.thrift.annotation.Nullable java.lang.String sessionCookie) {
    this.sessionCookie = sessionCookie;
    return this;
  }

  public void unsetSessionCookie() {
    this.sessionCookie = null;
  }

  /** Returns true if field sessionCookie is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookie() {
    return this.sessionCookie != null;
  }

  public void setSessionCookieIsSet(boolean value) {
    if (!value) {
      this.sessionCookie = null;
    }
  }

  public int getSessionCookieExpiresOn() {
    return this.sessionCookieExpiresOn;
  }

  public LoginResponse setSessionCookieExpiresOn(int sessionCookieExpiresOn) {
    this.sessionCookieExpiresOn = sessionCookieExpiresOn;
    setSessionCookieExpiresOnIsSet(true);
    return this;
  }

  public void unsetSessionCookieExpiresOn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  /** Returns true if field sessionCookieExpiresOn is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookieExpiresOn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  public void setSessionCookieExpiresOnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DEVICE_KEY:
      if (value == null) {
        unsetDeviceKey();
      } else {
        if (value instanceof byte[]) {
          setDeviceKey((byte[])value);
        } else {
          setDeviceKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ONE_TIME_PASSWORD:
      if (value == null) {
        unsetOneTimePassword();
      } else {
        setOneTimePassword((java.lang.String)value);
      }
      break;

    case UPDATE_AVAILABLE_TILL:
      if (value == null) {
        unsetUpdateAvailableTill();
      } else {
        setUpdateAvailableTill((java.lang.Long)value);
      }
      break;

    case PASSCODE_VALID_FOR:
      if (value == null) {
        unsetPasscodeValidFor();
      } else {
        setPasscodeValidFor((java.lang.Integer)value);
      }
      break;

    case UPDATE_INFO:
      if (value == null) {
        unsetUpdateInfo();
      } else {
        setUpdateInfo((java.lang.String)value);
      }
      break;

    case LICENCE_EXPIRES_ON:
      if (value == null) {
        unsetLicenceExpiresOn();
      } else {
        setLicenceExpiresOn((java.lang.Long)value);
      }
      break;

    case TEST_LICENCE:
      if (value == null) {
        unsetTestLicence();
      } else {
        setTestLicence((java.lang.Boolean)value);
      }
      break;

    case LDAP_USER:
      if (value == null) {
        unsetLdapUser();
      } else {
        setLdapUser((java.lang.Boolean)value);
      }
      break;

    case KEEP_ALIVE_SECONDS:
      if (value == null) {
        unsetKeepAliveSeconds();
      } else {
        setKeepAliveSeconds((java.lang.Integer)value);
      }
      break;

    case SESSION_COOKIE:
      if (value == null) {
        unsetSessionCookie();
      } else {
        setSessionCookie((java.lang.String)value);
      }
      break;

    case SESSION_COOKIE_EXPIRES_ON:
      if (value == null) {
        unsetSessionCookieExpiresOn();
      } else {
        setSessionCookieExpiresOn((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_KEY:
      return getDeviceKey();

    case ONE_TIME_PASSWORD:
      return getOneTimePassword();

    case UPDATE_AVAILABLE_TILL:
      return getUpdateAvailableTill();

    case PASSCODE_VALID_FOR:
      return getPasscodeValidFor();

    case UPDATE_INFO:
      return getUpdateInfo();

    case LICENCE_EXPIRES_ON:
      return getLicenceExpiresOn();

    case TEST_LICENCE:
      return isTestLicence();

    case LDAP_USER:
      return isLdapUser();

    case KEEP_ALIVE_SECONDS:
      return getKeepAliveSeconds();

    case SESSION_COOKIE:
      return getSessionCookie();

    case SESSION_COOKIE_EXPIRES_ON:
      return getSessionCookieExpiresOn();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_KEY:
      return isSetDeviceKey();
    case ONE_TIME_PASSWORD:
      return isSetOneTimePassword();
    case UPDATE_AVAILABLE_TILL:
      return isSetUpdateAvailableTill();
    case PASSCODE_VALID_FOR:
      return isSetPasscodeValidFor();
    case UPDATE_INFO:
      return isSetUpdateInfo();
    case LICENCE_EXPIRES_ON:
      return isSetLicenceExpiresOn();
    case TEST_LICENCE:
      return isSetTestLicence();
    case LDAP_USER:
      return isSetLdapUser();
    case KEEP_ALIVE_SECONDS:
      return isSetKeepAliveSeconds();
    case SESSION_COOKIE:
      return isSetSessionCookie();
    case SESSION_COOKIE_EXPIRES_ON:
      return isSetSessionCookieExpiresOn();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginResponse)
      return this.equals((LoginResponse)that);
    return false;
  }

  public boolean equals(LoginResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_deviceKey = true && this.isSetDeviceKey();
    boolean that_present_deviceKey = true && that.isSetDeviceKey();
    if (this_present_deviceKey || that_present_deviceKey) {
      if (!(this_present_deviceKey && that_present_deviceKey))
        return false;
      if (!this.deviceKey.equals(that.deviceKey))
        return false;
    }

    boolean this_present_oneTimePassword = true && this.isSetOneTimePassword();
    boolean that_present_oneTimePassword = true && that.isSetOneTimePassword();
    if (this_present_oneTimePassword || that_present_oneTimePassword) {
      if (!(this_present_oneTimePassword && that_present_oneTimePassword))
        return false;
      if (!this.oneTimePassword.equals(that.oneTimePassword))
        return false;
    }

    boolean this_present_updateAvailableTill = true;
    boolean that_present_updateAvailableTill = true;
    if (this_present_updateAvailableTill || that_present_updateAvailableTill) {
      if (!(this_present_updateAvailableTill && that_present_updateAvailableTill))
        return false;
      if (this.updateAvailableTill != that.updateAvailableTill)
        return false;
    }

    boolean this_present_passcodeValidFor = true;
    boolean that_present_passcodeValidFor = true;
    if (this_present_passcodeValidFor || that_present_passcodeValidFor) {
      if (!(this_present_passcodeValidFor && that_present_passcodeValidFor))
        return false;
      if (this.passcodeValidFor != that.passcodeValidFor)
        return false;
    }

    boolean this_present_updateInfo = true && this.isSetUpdateInfo();
    boolean that_present_updateInfo = true && that.isSetUpdateInfo();
    if (this_present_updateInfo || that_present_updateInfo) {
      if (!(this_present_updateInfo && that_present_updateInfo))
        return false;
      if (!this.updateInfo.equals(that.updateInfo))
        return false;
    }

    boolean this_present_licenceExpiresOn = true;
    boolean that_present_licenceExpiresOn = true;
    if (this_present_licenceExpiresOn || that_present_licenceExpiresOn) {
      if (!(this_present_licenceExpiresOn && that_present_licenceExpiresOn))
        return false;
      if (this.licenceExpiresOn != that.licenceExpiresOn)
        return false;
    }

    boolean this_present_testLicence = true;
    boolean that_present_testLicence = true;
    if (this_present_testLicence || that_present_testLicence) {
      if (!(this_present_testLicence && that_present_testLicence))
        return false;
      if (this.testLicence != that.testLicence)
        return false;
    }

    boolean this_present_ldapUser = true;
    boolean that_present_ldapUser = true;
    if (this_present_ldapUser || that_present_ldapUser) {
      if (!(this_present_ldapUser && that_present_ldapUser))
        return false;
      if (this.ldapUser != that.ldapUser)
        return false;
    }

    boolean this_present_keepAliveSeconds = true;
    boolean that_present_keepAliveSeconds = true;
    if (this_present_keepAliveSeconds || that_present_keepAliveSeconds) {
      if (!(this_present_keepAliveSeconds && that_present_keepAliveSeconds))
        return false;
      if (this.keepAliveSeconds != that.keepAliveSeconds)
        return false;
    }

    boolean this_present_sessionCookie = true && this.isSetSessionCookie();
    boolean that_present_sessionCookie = true && that.isSetSessionCookie();
    if (this_present_sessionCookie || that_present_sessionCookie) {
      if (!(this_present_sessionCookie && that_present_sessionCookie))
        return false;
      if (!this.sessionCookie.equals(that.sessionCookie))
        return false;
    }

    boolean this_present_sessionCookieExpiresOn = true && this.isSetSessionCookieExpiresOn();
    boolean that_present_sessionCookieExpiresOn = true && that.isSetSessionCookieExpiresOn();
    if (this_present_sessionCookieExpiresOn || that_present_sessionCookieExpiresOn) {
      if (!(this_present_sessionCookieExpiresOn && that_present_sessionCookieExpiresOn))
        return false;
      if (this.sessionCookieExpiresOn != that.sessionCookieExpiresOn)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDeviceKey()) ? 131071 : 524287);
    if (isSetDeviceKey())
      hashCode = hashCode * 8191 + deviceKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetOneTimePassword()) ? 131071 : 524287);
    if (isSetOneTimePassword())
      hashCode = hashCode * 8191 + oneTimePassword.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateAvailableTill);

    hashCode = hashCode * 8191 + passcodeValidFor;

    hashCode = hashCode * 8191 + ((isSetUpdateInfo()) ? 131071 : 524287);
    if (isSetUpdateInfo())
      hashCode = hashCode * 8191 + updateInfo.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(licenceExpiresOn);

    hashCode = hashCode * 8191 + ((testLicence) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((ldapUser) ? 131071 : 524287);

    hashCode = hashCode * 8191 + keepAliveSeconds;

    hashCode = hashCode * 8191 + ((isSetSessionCookie()) ? 131071 : 524287);
    if (isSetSessionCookie())
      hashCode = hashCode * 8191 + sessionCookie.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionCookieExpiresOn()) ? 131071 : 524287);
    if (isSetSessionCookieExpiresOn())
      hashCode = hashCode * 8191 + sessionCookieExpiresOn;

    return hashCode;
  }

  @Override
  public int compareTo(LoginResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDeviceKey()).compareTo(other.isSetDeviceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceKey, other.deviceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOneTimePassword()).compareTo(other.isSetOneTimePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneTimePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneTimePassword, other.oneTimePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateAvailableTill()).compareTo(other.isSetUpdateAvailableTill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAvailableTill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAvailableTill, other.updateAvailableTill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPasscodeValidFor()).compareTo(other.isSetPasscodeValidFor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasscodeValidFor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passcodeValidFor, other.passcodeValidFor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateInfo()).compareTo(other.isSetUpdateInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateInfo, other.updateInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLicenceExpiresOn()).compareTo(other.isSetLicenceExpiresOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicenceExpiresOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licenceExpiresOn, other.licenceExpiresOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTestLicence()).compareTo(other.isSetTestLicence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestLicence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testLicence, other.testLicence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLdapUser()).compareTo(other.isSetLdapUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLdapUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ldapUser, other.ldapUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeepAliveSeconds()).compareTo(other.isSetKeepAliveSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeepAliveSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepAliveSeconds, other.keepAliveSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookie()).compareTo(other.isSetSessionCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookie, other.sessionCookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookieExpiresOn()).compareTo(other.isSetSessionCookieExpiresOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookieExpiresOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookieExpiresOn, other.sessionCookieExpiresOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LoginResponse(");
    boolean first = true;

    sb.append("deviceKey:");
    if (this.deviceKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.deviceKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneTimePassword:");
    if (this.oneTimePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.oneTimePassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateAvailableTill:");
    sb.append(this.updateAvailableTill);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passcodeValidFor:");
    sb.append(this.passcodeValidFor);
    first = false;
    if (isSetUpdateInfo()) {
      if (!first) sb.append(", ");
      sb.append("updateInfo:");
      if (this.updateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.updateInfo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("licenceExpiresOn:");
    sb.append(this.licenceExpiresOn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testLicence:");
    sb.append(this.testLicence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ldapUser:");
    sb.append(this.ldapUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keepAliveSeconds:");
    sb.append(this.keepAliveSeconds);
    first = false;
    if (isSetSessionCookie()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookie:");
      if (this.sessionCookie == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionCookie);
      }
      first = false;
    }
    if (isSetSessionCookieExpiresOn()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookieExpiresOn:");
      sb.append(this.sessionCookieExpiresOn);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoginResponseStandardScheme getScheme() {
      return new LoginResponseStandardScheme();
    }
  }

  private static class LoginResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoginResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceKey = iprot.readBinary();
              struct.setDeviceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONE_TIME_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oneTimePassword = iprot.readString();
              struct.setOneTimePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATE_AVAILABLE_TILL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateAvailableTill = iprot.readI64();
              struct.setUpdateAvailableTillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSCODE_VALID_FOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.passcodeValidFor = iprot.readI32();
              struct.setPasscodeValidForIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateInfo = iprot.readString();
              struct.setUpdateInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LICENCE_EXPIRES_ON
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.licenceExpiresOn = iprot.readI64();
              struct.setLicenceExpiresOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEST_LICENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.testLicence = iprot.readBool();
              struct.setTestLicenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LDAP_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ldapUser = iprot.readBool();
              struct.setLdapUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEEP_ALIVE_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keepAliveSeconds = iprot.readI32();
              struct.setKeepAliveSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SESSION_COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionCookie = iprot.readString();
              struct.setSessionCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SESSION_COOKIE_EXPIRES_ON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionCookieExpiresOn = iprot.readI32();
              struct.setSessionCookieExpiresOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceKey != null) {
        oprot.writeFieldBegin(DEVICE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.deviceKey);
        oprot.writeFieldEnd();
      }
      if (struct.oneTimePassword != null) {
        oprot.writeFieldBegin(ONE_TIME_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.oneTimePassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_AVAILABLE_TILL_FIELD_DESC);
      oprot.writeI64(struct.updateAvailableTill);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PASSCODE_VALID_FOR_FIELD_DESC);
      oprot.writeI32(struct.passcodeValidFor);
      oprot.writeFieldEnd();
      if (struct.updateInfo != null) {
        if (struct.isSetUpdateInfo()) {
          oprot.writeFieldBegin(UPDATE_INFO_FIELD_DESC);
          oprot.writeString(struct.updateInfo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LICENCE_EXPIRES_ON_FIELD_DESC);
      oprot.writeI64(struct.licenceExpiresOn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_LICENCE_FIELD_DESC);
      oprot.writeBool(struct.testLicence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LDAP_USER_FIELD_DESC);
      oprot.writeBool(struct.ldapUser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KEEP_ALIVE_SECONDS_FIELD_DESC);
      oprot.writeI32(struct.keepAliveSeconds);
      oprot.writeFieldEnd();
      if (struct.sessionCookie != null) {
        if (struct.isSetSessionCookie()) {
          oprot.writeFieldBegin(SESSION_COOKIE_FIELD_DESC);
          oprot.writeString(struct.sessionCookie);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeFieldBegin(SESSION_COOKIE_EXPIRES_ON_FIELD_DESC);
        oprot.writeI32(struct.sessionCookieExpiresOn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoginResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoginResponseTupleScheme getScheme() {
      return new LoginResponseTupleScheme();
    }
  }

  private static class LoginResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoginResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoginResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeviceKey()) {
        optionals.set(0);
      }
      if (struct.isSetOneTimePassword()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateAvailableTill()) {
        optionals.set(2);
      }
      if (struct.isSetPasscodeValidFor()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateInfo()) {
        optionals.set(4);
      }
      if (struct.isSetLicenceExpiresOn()) {
        optionals.set(5);
      }
      if (struct.isSetTestLicence()) {
        optionals.set(6);
      }
      if (struct.isSetLdapUser()) {
        optionals.set(7);
      }
      if (struct.isSetKeepAliveSeconds()) {
        optionals.set(8);
      }
      if (struct.isSetSessionCookie()) {
        optionals.set(9);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetDeviceKey()) {
        oprot.writeBinary(struct.deviceKey);
      }
      if (struct.isSetOneTimePassword()) {
        oprot.writeString(struct.oneTimePassword);
      }
      if (struct.isSetUpdateAvailableTill()) {
        oprot.writeI64(struct.updateAvailableTill);
      }
      if (struct.isSetPasscodeValidFor()) {
        oprot.writeI32(struct.passcodeValidFor);
      }
      if (struct.isSetUpdateInfo()) {
        oprot.writeString(struct.updateInfo);
      }
      if (struct.isSetLicenceExpiresOn()) {
        oprot.writeI64(struct.licenceExpiresOn);
      }
      if (struct.isSetTestLicence()) {
        oprot.writeBool(struct.testLicence);
      }
      if (struct.isSetLdapUser()) {
        oprot.writeBool(struct.ldapUser);
      }
      if (struct.isSetKeepAliveSeconds()) {
        oprot.writeI32(struct.keepAliveSeconds);
      }
      if (struct.isSetSessionCookie()) {
        oprot.writeString(struct.sessionCookie);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeI32(struct.sessionCookieExpiresOn);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoginResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.deviceKey = iprot.readBinary();
        struct.setDeviceKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.oneTimePassword = iprot.readString();
        struct.setOneTimePasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateAvailableTill = iprot.readI64();
        struct.setUpdateAvailableTillIsSet(true);
      }
      if (incoming.get(3)) {
        struct.passcodeValidFor = iprot.readI32();
        struct.setPasscodeValidForIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateInfo = iprot.readString();
        struct.setUpdateInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.licenceExpiresOn = iprot.readI64();
        struct.setLicenceExpiresOnIsSet(true);
      }
      if (incoming.get(6)) {
        struct.testLicence = iprot.readBool();
        struct.setTestLicenceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ldapUser = iprot.readBool();
        struct.setLdapUserIsSet(true);
      }
      if (incoming.get(8)) {
        struct.keepAliveSeconds = iprot.readI32();
        struct.setKeepAliveSecondsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sessionCookie = iprot.readString();
        struct.setSessionCookieIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sessionCookieExpiresOn = iprot.readI32();
        struct.setSessionCookieExpiresOnIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

