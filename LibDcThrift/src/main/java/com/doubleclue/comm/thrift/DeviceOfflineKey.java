/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class DeviceOfflineKey implements org.apache.thrift.TBase<DeviceOfflineKey, DeviceOfflineKey._Fields>, java.io.Serializable, Cloneable, Comparable<DeviceOfflineKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceOfflineKey");

  private static final org.apache.thrift.protocol.TField UDID_FIELD_DESC = new org.apache.thrift.protocol.TField("udid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OFFLINE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VALID_FOR_FIELD_DESC = new org.apache.thrift.protocol.TField("validFor", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithm", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeviceOfflineKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeviceOfflineKeyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer offlineKey; // required
  public int window; // required
  public int validFor; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String algorithm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UDID((short)1, "udid"),
    OFFLINE_KEY((short)2, "offlineKey"),
    WINDOW((short)3, "window"),
    VALID_FOR((short)4, "validFor"),
    ALGORITHM((short)5, "algorithm");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UDID
          return UDID;
        case 2: // OFFLINE_KEY
          return OFFLINE_KEY;
        case 3: // WINDOW
          return WINDOW;
        case 4: // VALID_FOR
          return VALID_FOR;
        case 5: // ALGORITHM
          return ALGORITHM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WINDOW_ISSET_ID = 0;
  private static final int __VALIDFOR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UDID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UDID, new org.apache.thrift.meta_data.FieldMetaData("udid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OFFLINE_KEY, new org.apache.thrift.meta_data.FieldMetaData("offlineKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID_FOR, new org.apache.thrift.meta_data.FieldMetaData("validFor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("algorithm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceOfflineKey.class, metaDataMap);
  }

  public DeviceOfflineKey() {
  }

  public DeviceOfflineKey(
    java.nio.ByteBuffer offlineKey,
    int window,
    int validFor,
    java.lang.String algorithm)
  {
    this();
    this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
    this.window = window;
    setWindowIsSet(true);
    this.validFor = validFor;
    setValidForIsSet(true);
    this.algorithm = algorithm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceOfflineKey(DeviceOfflineKey other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUdid()) {
      this.udid = org.apache.thrift.TBaseHelper.copyBinary(other.udid);
    }
    if (other.isSetOfflineKey()) {
      this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(other.offlineKey);
    }
    this.window = other.window;
    this.validFor = other.validFor;
    if (other.isSetAlgorithm()) {
      this.algorithm = other.algorithm;
    }
  }

  public DeviceOfflineKey deepCopy() {
    return new DeviceOfflineKey(this);
  }

  @Override
  public void clear() {
    this.udid = null;
    this.offlineKey = null;
    setWindowIsSet(false);
    this.window = 0;
    setValidForIsSet(false);
    this.validFor = 0;
    this.algorithm = null;
  }

  public byte[] getUdid() {
    setUdid(org.apache.thrift.TBaseHelper.rightSize(udid));
    return udid == null ? null : udid.array();
  }

  public java.nio.ByteBuffer bufferForUdid() {
    return org.apache.thrift.TBaseHelper.copyBinary(udid);
  }

  public DeviceOfflineKey setUdid(byte[] udid) {
    this.udid = udid == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(udid.clone());
    return this;
  }

  public DeviceOfflineKey setUdid(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid) {
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    return this;
  }

  public void unsetUdid() {
    this.udid = null;
  }

  /** Returns true if field udid is set (has been assigned a value) and false otherwise */
  public boolean isSetUdid() {
    return this.udid != null;
  }

  public void setUdidIsSet(boolean value) {
    if (!value) {
      this.udid = null;
    }
  }

  public byte[] getOfflineKey() {
    setOfflineKey(org.apache.thrift.TBaseHelper.rightSize(offlineKey));
    return offlineKey == null ? null : offlineKey.array();
  }

  public java.nio.ByteBuffer bufferForOfflineKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
  }

  public DeviceOfflineKey setOfflineKey(byte[] offlineKey) {
    this.offlineKey = offlineKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(offlineKey.clone());
    return this;
  }

  public DeviceOfflineKey setOfflineKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer offlineKey) {
    this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
    return this;
  }

  public void unsetOfflineKey() {
    this.offlineKey = null;
  }

  /** Returns true if field offlineKey is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineKey() {
    return this.offlineKey != null;
  }

  public void setOfflineKeyIsSet(boolean value) {
    if (!value) {
      this.offlineKey = null;
    }
  }

  public int getWindow() {
    return this.window;
  }

  public DeviceOfflineKey setWindow(int window) {
    this.window = window;
    setWindowIsSet(true);
    return this;
  }

  public void unsetWindow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
  }

  /** Returns true if field window is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
  }

  public void setWindowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
  }

  public int getValidFor() {
    return this.validFor;
  }

  public DeviceOfflineKey setValidFor(int validFor) {
    this.validFor = validFor;
    setValidForIsSet(true);
    return this;
  }

  public void unsetValidFor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALIDFOR_ISSET_ID);
  }

  /** Returns true if field validFor is set (has been assigned a value) and false otherwise */
  public boolean isSetValidFor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALIDFOR_ISSET_ID);
  }

  public void setValidForIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALIDFOR_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAlgorithm() {
    return this.algorithm;
  }

  public DeviceOfflineKey setAlgorithm(@org.apache.thrift.annotation.Nullable java.lang.String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  public void unsetAlgorithm() {
    this.algorithm = null;
  }

  /** Returns true if field algorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithm() {
    return this.algorithm != null;
  }

  public void setAlgorithmIsSet(boolean value) {
    if (!value) {
      this.algorithm = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UDID:
      if (value == null) {
        unsetUdid();
      } else {
        if (value instanceof byte[]) {
          setUdid((byte[])value);
        } else {
          setUdid((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OFFLINE_KEY:
      if (value == null) {
        unsetOfflineKey();
      } else {
        if (value instanceof byte[]) {
          setOfflineKey((byte[])value);
        } else {
          setOfflineKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case WINDOW:
      if (value == null) {
        unsetWindow();
      } else {
        setWindow((java.lang.Integer)value);
      }
      break;

    case VALID_FOR:
      if (value == null) {
        unsetValidFor();
      } else {
        setValidFor((java.lang.Integer)value);
      }
      break;

    case ALGORITHM:
      if (value == null) {
        unsetAlgorithm();
      } else {
        setAlgorithm((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UDID:
      return getUdid();

    case OFFLINE_KEY:
      return getOfflineKey();

    case WINDOW:
      return getWindow();

    case VALID_FOR:
      return getValidFor();

    case ALGORITHM:
      return getAlgorithm();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UDID:
      return isSetUdid();
    case OFFLINE_KEY:
      return isSetOfflineKey();
    case WINDOW:
      return isSetWindow();
    case VALID_FOR:
      return isSetValidFor();
    case ALGORITHM:
      return isSetAlgorithm();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceOfflineKey)
      return this.equals((DeviceOfflineKey)that);
    return false;
  }

  public boolean equals(DeviceOfflineKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_udid = true && this.isSetUdid();
    boolean that_present_udid = true && that.isSetUdid();
    if (this_present_udid || that_present_udid) {
      if (!(this_present_udid && that_present_udid))
        return false;
      if (!this.udid.equals(that.udid))
        return false;
    }

    boolean this_present_offlineKey = true && this.isSetOfflineKey();
    boolean that_present_offlineKey = true && that.isSetOfflineKey();
    if (this_present_offlineKey || that_present_offlineKey) {
      if (!(this_present_offlineKey && that_present_offlineKey))
        return false;
      if (!this.offlineKey.equals(that.offlineKey))
        return false;
    }

    boolean this_present_window = true;
    boolean that_present_window = true;
    if (this_present_window || that_present_window) {
      if (!(this_present_window && that_present_window))
        return false;
      if (this.window != that.window)
        return false;
    }

    boolean this_present_validFor = true;
    boolean that_present_validFor = true;
    if (this_present_validFor || that_present_validFor) {
      if (!(this_present_validFor && that_present_validFor))
        return false;
      if (this.validFor != that.validFor)
        return false;
    }

    boolean this_present_algorithm = true && this.isSetAlgorithm();
    boolean that_present_algorithm = true && that.isSetAlgorithm();
    if (this_present_algorithm || that_present_algorithm) {
      if (!(this_present_algorithm && that_present_algorithm))
        return false;
      if (!this.algorithm.equals(that.algorithm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUdid()) ? 131071 : 524287);
    if (isSetUdid())
      hashCode = hashCode * 8191 + udid.hashCode();

    hashCode = hashCode * 8191 + ((isSetOfflineKey()) ? 131071 : 524287);
    if (isSetOfflineKey())
      hashCode = hashCode * 8191 + offlineKey.hashCode();

    hashCode = hashCode * 8191 + window;

    hashCode = hashCode * 8191 + validFor;

    hashCode = hashCode * 8191 + ((isSetAlgorithm()) ? 131071 : 524287);
    if (isSetAlgorithm())
      hashCode = hashCode * 8191 + algorithm.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DeviceOfflineKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUdid()).compareTo(other.isSetUdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udid, other.udid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfflineKey()).compareTo(other.isSetOfflineKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineKey, other.offlineKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValidFor()).compareTo(other.isSetValidFor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidFor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validFor, other.validFor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAlgorithm()).compareTo(other.isSetAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithm, other.algorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DeviceOfflineKey(");
    boolean first = true;

    if (isSetUdid()) {
      sb.append("udid:");
      if (this.udid == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.udid, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("offlineKey:");
    if (this.offlineKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.offlineKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("window:");
    sb.append(this.window);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validFor:");
    sb.append(this.validFor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("algorithm:");
    if (this.algorithm == null) {
      sb.append("null");
    } else {
      sb.append(this.algorithm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceOfflineKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeviceOfflineKeyStandardScheme getScheme() {
      return new DeviceOfflineKeyStandardScheme();
    }
  }

  private static class DeviceOfflineKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeviceOfflineKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceOfflineKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udid = iprot.readBinary();
              struct.setUdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFLINE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offlineKey = iprot.readBinary();
              struct.setOfflineKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WINDOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.window = iprot.readI32();
              struct.setWindowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALID_FOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validFor = iprot.readI32();
              struct.setValidForIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithm = iprot.readString();
              struct.setAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceOfflineKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.udid != null) {
        if (struct.isSetUdid()) {
          oprot.writeFieldBegin(UDID_FIELD_DESC);
          oprot.writeBinary(struct.udid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.offlineKey != null) {
        oprot.writeFieldBegin(OFFLINE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.offlineKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINDOW_FIELD_DESC);
      oprot.writeI32(struct.window);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_FOR_FIELD_DESC);
      oprot.writeI32(struct.validFor);
      oprot.writeFieldEnd();
      if (struct.algorithm != null) {
        oprot.writeFieldBegin(ALGORITHM_FIELD_DESC);
        oprot.writeString(struct.algorithm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceOfflineKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeviceOfflineKeyTupleScheme getScheme() {
      return new DeviceOfflineKeyTupleScheme();
    }
  }

  private static class DeviceOfflineKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeviceOfflineKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceOfflineKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUdid()) {
        optionals.set(0);
      }
      if (struct.isSetOfflineKey()) {
        optionals.set(1);
      }
      if (struct.isSetWindow()) {
        optionals.set(2);
      }
      if (struct.isSetValidFor()) {
        optionals.set(3);
      }
      if (struct.isSetAlgorithm()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUdid()) {
        oprot.writeBinary(struct.udid);
      }
      if (struct.isSetOfflineKey()) {
        oprot.writeBinary(struct.offlineKey);
      }
      if (struct.isSetWindow()) {
        oprot.writeI32(struct.window);
      }
      if (struct.isSetValidFor()) {
        oprot.writeI32(struct.validFor);
      }
      if (struct.isSetAlgorithm()) {
        oprot.writeString(struct.algorithm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceOfflineKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.udid = iprot.readBinary();
        struct.setUdidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offlineKey = iprot.readBinary();
        struct.setOfflineKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.window = iprot.readI32();
        struct.setWindowIsSet(true);
      }
      if (incoming.get(3)) {
        struct.validFor = iprot.readI32();
        struct.setValidForIsSet(true);
      }
      if (incoming.get(4)) {
        struct.algorithm = iprot.readString();
        struct.setAlgorithmIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

