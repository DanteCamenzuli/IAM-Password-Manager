/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class LoginParam implements org.apache.thrift.TBase<LoginParam, LoginParam._Fields>, java.io.Serializable, Cloneable, Comparable<LoginParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginParam");

  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UDID_FIELD_DESC = new org.apache.thrift.protocol.TField("udid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENC_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encPassword", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HOTP_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("hotpCounter", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RISK_FIELD_DESC = new org.apache.thrift.protocol.TField("risk", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PASSWORD_LESS_FIELD_DESC = new org.apache.thrift.protocol.TField("passwordLess", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField CPU_ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuArch", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField COMM_CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commClientType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookie", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoginParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoginParamTupleSchemeFactory();

  public int deviceId; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPassword; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String osVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String locale; // required
  public int hotpCounter; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer digest; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer risk; // optional
  public boolean passwordLess; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.CpuArch
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CpuArch cpuArch; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.CommClientType
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CommClientType commClientType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sessionCookie; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_ID((short)1, "deviceId"),
    UDID((short)2, "udid"),
    ENC_PASSWORD((short)3, "encPassword"),
    OS_VERSION((short)4, "osVersion"),
    LOCALE((short)5, "locale"),
    HOTP_COUNTER((short)6, "hotpCounter"),
    DIGEST((short)7, "digest"),
    RISK((short)8, "risk"),
    PASSWORD_LESS((short)9, "passwordLess"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.CpuArch
     */
    CPU_ARCH((short)10, "cpuArch"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.CommClientType
     */
    COMM_CLIENT_TYPE((short)11, "commClientType"),
    SESSION_COOKIE((short)12, "sessionCookie");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_ID
          return DEVICE_ID;
        case 2: // UDID
          return UDID;
        case 3: // ENC_PASSWORD
          return ENC_PASSWORD;
        case 4: // OS_VERSION
          return OS_VERSION;
        case 5: // LOCALE
          return LOCALE;
        case 6: // HOTP_COUNTER
          return HOTP_COUNTER;
        case 7: // DIGEST
          return DIGEST;
        case 8: // RISK
          return RISK;
        case 9: // PASSWORD_LESS
          return PASSWORD_LESS;
        case 10: // CPU_ARCH
          return CPU_ARCH;
        case 11: // COMM_CLIENT_TYPE
          return COMM_CLIENT_TYPE;
        case 12: // SESSION_COOKIE
          return SESSION_COOKIE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEVICEID_ISSET_ID = 0;
  private static final int __HOTPCOUNTER_ISSET_ID = 1;
  private static final int __PASSWORDLESS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DIGEST,_Fields.RISK,_Fields.SESSION_COOKIE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UDID, new org.apache.thrift.meta_data.FieldMetaData("udid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENC_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOTP_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("hotpCounter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RISK, new org.apache.thrift.meta_data.FieldMetaData("risk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PASSWORD_LESS, new org.apache.thrift.meta_data.FieldMetaData("passwordLess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CPU_ARCH, new org.apache.thrift.meta_data.FieldMetaData("cpuArch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.CpuArch.class)));
    tmpMap.put(_Fields.COMM_CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commClientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.CommClientType.class)));
    tmpMap.put(_Fields.SESSION_COOKIE, new org.apache.thrift.meta_data.FieldMetaData("sessionCookie", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginParam.class, metaDataMap);
  }

  public LoginParam() {
  }

  public LoginParam(
    int deviceId,
    java.nio.ByteBuffer udid,
    java.nio.ByteBuffer encPassword,
    java.lang.String osVersion,
    java.lang.String locale,
    int hotpCounter,
    boolean passwordLess,
    com.doubleclue.comm.thrift.CpuArch cpuArch,
    com.doubleclue.comm.thrift.CommClientType commClientType)
  {
    this();
    this.deviceId = deviceId;
    setDeviceIdIsSet(true);
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(encPassword);
    this.osVersion = osVersion;
    this.locale = locale;
    this.hotpCounter = hotpCounter;
    setHotpCounterIsSet(true);
    this.passwordLess = passwordLess;
    setPasswordLessIsSet(true);
    this.cpuArch = cpuArch;
    this.commClientType = commClientType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginParam(LoginParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.deviceId = other.deviceId;
    if (other.isSetUdid()) {
      this.udid = org.apache.thrift.TBaseHelper.copyBinary(other.udid);
    }
    if (other.isSetEncPassword()) {
      this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(other.encPassword);
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetLocale()) {
      this.locale = other.locale;
    }
    this.hotpCounter = other.hotpCounter;
    if (other.isSetDigest()) {
      this.digest = org.apache.thrift.TBaseHelper.copyBinary(other.digest);
    }
    if (other.isSetRisk()) {
      this.risk = org.apache.thrift.TBaseHelper.copyBinary(other.risk);
    }
    this.passwordLess = other.passwordLess;
    if (other.isSetCpuArch()) {
      this.cpuArch = other.cpuArch;
    }
    if (other.isSetCommClientType()) {
      this.commClientType = other.commClientType;
    }
    if (other.isSetSessionCookie()) {
      this.sessionCookie = other.sessionCookie;
    }
  }

  public LoginParam deepCopy() {
    return new LoginParam(this);
  }

  @Override
  public void clear() {
    setDeviceIdIsSet(false);
    this.deviceId = 0;
    this.udid = null;
    this.encPassword = null;
    this.osVersion = null;
    this.locale = null;
    setHotpCounterIsSet(false);
    this.hotpCounter = 0;
    this.digest = null;
    this.risk = null;
    setPasswordLessIsSet(false);
    this.passwordLess = false;
    this.cpuArch = null;
    this.commClientType = null;
    this.sessionCookie = null;
  }

  public int getDeviceId() {
    return this.deviceId;
  }

  public LoginParam setDeviceId(int deviceId) {
    this.deviceId = deviceId;
    setDeviceIdIsSet(true);
    return this;
  }

  public void unsetDeviceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEVICEID_ISSET_ID);
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEVICEID_ISSET_ID);
  }

  public void setDeviceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEVICEID_ISSET_ID, value);
  }

  public byte[] getUdid() {
    setUdid(org.apache.thrift.TBaseHelper.rightSize(udid));
    return udid == null ? null : udid.array();
  }

  public java.nio.ByteBuffer bufferForUdid() {
    return org.apache.thrift.TBaseHelper.copyBinary(udid);
  }

  public LoginParam setUdid(byte[] udid) {
    this.udid = udid == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(udid.clone());
    return this;
  }

  public LoginParam setUdid(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid) {
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    return this;
  }

  public void unsetUdid() {
    this.udid = null;
  }

  /** Returns true if field udid is set (has been assigned a value) and false otherwise */
  public boolean isSetUdid() {
    return this.udid != null;
  }

  public void setUdidIsSet(boolean value) {
    if (!value) {
      this.udid = null;
    }
  }

  public byte[] getEncPassword() {
    setEncPassword(org.apache.thrift.TBaseHelper.rightSize(encPassword));
    return encPassword == null ? null : encPassword.array();
  }

  public java.nio.ByteBuffer bufferForEncPassword() {
    return org.apache.thrift.TBaseHelper.copyBinary(encPassword);
  }

  public LoginParam setEncPassword(byte[] encPassword) {
    this.encPassword = encPassword == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(encPassword.clone());
    return this;
  }

  public LoginParam setEncPassword(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPassword) {
    this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(encPassword);
    return this;
  }

  public void unsetEncPassword() {
    this.encPassword = null;
  }

  /** Returns true if field encPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetEncPassword() {
    return this.encPassword != null;
  }

  public void setEncPasswordIsSet(boolean value) {
    if (!value) {
      this.encPassword = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOsVersion() {
    return this.osVersion;
  }

  public LoginParam setOsVersion(@org.apache.thrift.annotation.Nullable java.lang.String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocale() {
    return this.locale;
  }

  public LoginParam setLocale(@org.apache.thrift.annotation.Nullable java.lang.String locale) {
    this.locale = locale;
    return this;
  }

  public void unsetLocale() {
    this.locale = null;
  }

  /** Returns true if field locale is set (has been assigned a value) and false otherwise */
  public boolean isSetLocale() {
    return this.locale != null;
  }

  public void setLocaleIsSet(boolean value) {
    if (!value) {
      this.locale = null;
    }
  }

  public int getHotpCounter() {
    return this.hotpCounter;
  }

  public LoginParam setHotpCounter(int hotpCounter) {
    this.hotpCounter = hotpCounter;
    setHotpCounterIsSet(true);
    return this;
  }

  public void unsetHotpCounter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HOTPCOUNTER_ISSET_ID);
  }

  /** Returns true if field hotpCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetHotpCounter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HOTPCOUNTER_ISSET_ID);
  }

  public void setHotpCounterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HOTPCOUNTER_ISSET_ID, value);
  }

  public byte[] getDigest() {
    setDigest(org.apache.thrift.TBaseHelper.rightSize(digest));
    return digest == null ? null : digest.array();
  }

  public java.nio.ByteBuffer bufferForDigest() {
    return org.apache.thrift.TBaseHelper.copyBinary(digest);
  }

  public LoginParam setDigest(byte[] digest) {
    this.digest = digest == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(digest.clone());
    return this;
  }

  public LoginParam setDigest(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer digest) {
    this.digest = org.apache.thrift.TBaseHelper.copyBinary(digest);
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public byte[] getRisk() {
    setRisk(org.apache.thrift.TBaseHelper.rightSize(risk));
    return risk == null ? null : risk.array();
  }

  public java.nio.ByteBuffer bufferForRisk() {
    return org.apache.thrift.TBaseHelper.copyBinary(risk);
  }

  public LoginParam setRisk(byte[] risk) {
    this.risk = risk == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(risk.clone());
    return this;
  }

  public LoginParam setRisk(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer risk) {
    this.risk = org.apache.thrift.TBaseHelper.copyBinary(risk);
    return this;
  }

  public void unsetRisk() {
    this.risk = null;
  }

  /** Returns true if field risk is set (has been assigned a value) and false otherwise */
  public boolean isSetRisk() {
    return this.risk != null;
  }

  public void setRiskIsSet(boolean value) {
    if (!value) {
      this.risk = null;
    }
  }

  public boolean isPasswordLess() {
    return this.passwordLess;
  }

  public LoginParam setPasswordLess(boolean passwordLess) {
    this.passwordLess = passwordLess;
    setPasswordLessIsSet(true);
    return this;
  }

  public void unsetPasswordLess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PASSWORDLESS_ISSET_ID);
  }

  /** Returns true if field passwordLess is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswordLess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PASSWORDLESS_ISSET_ID);
  }

  public void setPasswordLessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PASSWORDLESS_ISSET_ID, value);
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CpuArch
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.CpuArch getCpuArch() {
    return this.cpuArch;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CpuArch
   */
  public LoginParam setCpuArch(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CpuArch cpuArch) {
    this.cpuArch = cpuArch;
    return this;
  }

  public void unsetCpuArch() {
    this.cpuArch = null;
  }

  /** Returns true if field cpuArch is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuArch() {
    return this.cpuArch != null;
  }

  public void setCpuArchIsSet(boolean value) {
    if (!value) {
      this.cpuArch = null;
    }
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CommClientType
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.CommClientType getCommClientType() {
    return this.commClientType;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CommClientType
   */
  public LoginParam setCommClientType(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CommClientType commClientType) {
    this.commClientType = commClientType;
    return this;
  }

  public void unsetCommClientType() {
    this.commClientType = null;
  }

  /** Returns true if field commClientType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommClientType() {
    return this.commClientType != null;
  }

  public void setCommClientTypeIsSet(boolean value) {
    if (!value) {
      this.commClientType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSessionCookie() {
    return this.sessionCookie;
  }

  public LoginParam setSessionCookie(@org.apache.thrift.annotation.Nullable java.lang.String sessionCookie) {
    this.sessionCookie = sessionCookie;
    return this;
  }

  public void unsetSessionCookie() {
    this.sessionCookie = null;
  }

  /** Returns true if field sessionCookie is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookie() {
    return this.sessionCookie != null;
  }

  public void setSessionCookieIsSet(boolean value) {
    if (!value) {
      this.sessionCookie = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((java.lang.Integer)value);
      }
      break;

    case UDID:
      if (value == null) {
        unsetUdid();
      } else {
        if (value instanceof byte[]) {
          setUdid((byte[])value);
        } else {
          setUdid((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ENC_PASSWORD:
      if (value == null) {
        unsetEncPassword();
      } else {
        if (value instanceof byte[]) {
          setEncPassword((byte[])value);
        } else {
          setEncPassword((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((java.lang.String)value);
      }
      break;

    case LOCALE:
      if (value == null) {
        unsetLocale();
      } else {
        setLocale((java.lang.String)value);
      }
      break;

    case HOTP_COUNTER:
      if (value == null) {
        unsetHotpCounter();
      } else {
        setHotpCounter((java.lang.Integer)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        if (value instanceof byte[]) {
          setDigest((byte[])value);
        } else {
          setDigest((java.nio.ByteBuffer)value);
        }
      }
      break;

    case RISK:
      if (value == null) {
        unsetRisk();
      } else {
        if (value instanceof byte[]) {
          setRisk((byte[])value);
        } else {
          setRisk((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PASSWORD_LESS:
      if (value == null) {
        unsetPasswordLess();
      } else {
        setPasswordLess((java.lang.Boolean)value);
      }
      break;

    case CPU_ARCH:
      if (value == null) {
        unsetCpuArch();
      } else {
        setCpuArch((com.doubleclue.comm.thrift.CpuArch)value);
      }
      break;

    case COMM_CLIENT_TYPE:
      if (value == null) {
        unsetCommClientType();
      } else {
        setCommClientType((com.doubleclue.comm.thrift.CommClientType)value);
      }
      break;

    case SESSION_COOKIE:
      if (value == null) {
        unsetSessionCookie();
      } else {
        setSessionCookie((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_ID:
      return getDeviceId();

    case UDID:
      return getUdid();

    case ENC_PASSWORD:
      return getEncPassword();

    case OS_VERSION:
      return getOsVersion();

    case LOCALE:
      return getLocale();

    case HOTP_COUNTER:
      return getHotpCounter();

    case DIGEST:
      return getDigest();

    case RISK:
      return getRisk();

    case PASSWORD_LESS:
      return isPasswordLess();

    case CPU_ARCH:
      return getCpuArch();

    case COMM_CLIENT_TYPE:
      return getCommClientType();

    case SESSION_COOKIE:
      return getSessionCookie();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_ID:
      return isSetDeviceId();
    case UDID:
      return isSetUdid();
    case ENC_PASSWORD:
      return isSetEncPassword();
    case OS_VERSION:
      return isSetOsVersion();
    case LOCALE:
      return isSetLocale();
    case HOTP_COUNTER:
      return isSetHotpCounter();
    case DIGEST:
      return isSetDigest();
    case RISK:
      return isSetRisk();
    case PASSWORD_LESS:
      return isSetPasswordLess();
    case CPU_ARCH:
      return isSetCpuArch();
    case COMM_CLIENT_TYPE:
      return isSetCommClientType();
    case SESSION_COOKIE:
      return isSetSessionCookie();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginParam)
      return this.equals((LoginParam)that);
    return false;
  }

  public boolean equals(LoginParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_deviceId = true;
    boolean that_present_deviceId = true;
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (this.deviceId != that.deviceId)
        return false;
    }

    boolean this_present_udid = true && this.isSetUdid();
    boolean that_present_udid = true && that.isSetUdid();
    if (this_present_udid || that_present_udid) {
      if (!(this_present_udid && that_present_udid))
        return false;
      if (!this.udid.equals(that.udid))
        return false;
    }

    boolean this_present_encPassword = true && this.isSetEncPassword();
    boolean that_present_encPassword = true && that.isSetEncPassword();
    if (this_present_encPassword || that_present_encPassword) {
      if (!(this_present_encPassword && that_present_encPassword))
        return false;
      if (!this.encPassword.equals(that.encPassword))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_locale = true && this.isSetLocale();
    boolean that_present_locale = true && that.isSetLocale();
    if (this_present_locale || that_present_locale) {
      if (!(this_present_locale && that_present_locale))
        return false;
      if (!this.locale.equals(that.locale))
        return false;
    }

    boolean this_present_hotpCounter = true;
    boolean that_present_hotpCounter = true;
    if (this_present_hotpCounter || that_present_hotpCounter) {
      if (!(this_present_hotpCounter && that_present_hotpCounter))
        return false;
      if (this.hotpCounter != that.hotpCounter)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_risk = true && this.isSetRisk();
    boolean that_present_risk = true && that.isSetRisk();
    if (this_present_risk || that_present_risk) {
      if (!(this_present_risk && that_present_risk))
        return false;
      if (!this.risk.equals(that.risk))
        return false;
    }

    boolean this_present_passwordLess = true;
    boolean that_present_passwordLess = true;
    if (this_present_passwordLess || that_present_passwordLess) {
      if (!(this_present_passwordLess && that_present_passwordLess))
        return false;
      if (this.passwordLess != that.passwordLess)
        return false;
    }

    boolean this_present_cpuArch = true && this.isSetCpuArch();
    boolean that_present_cpuArch = true && that.isSetCpuArch();
    if (this_present_cpuArch || that_present_cpuArch) {
      if (!(this_present_cpuArch && that_present_cpuArch))
        return false;
      if (!this.cpuArch.equals(that.cpuArch))
        return false;
    }

    boolean this_present_commClientType = true && this.isSetCommClientType();
    boolean that_present_commClientType = true && that.isSetCommClientType();
    if (this_present_commClientType || that_present_commClientType) {
      if (!(this_present_commClientType && that_present_commClientType))
        return false;
      if (!this.commClientType.equals(that.commClientType))
        return false;
    }

    boolean this_present_sessionCookie = true && this.isSetSessionCookie();
    boolean that_present_sessionCookie = true && that.isSetSessionCookie();
    if (this_present_sessionCookie || that_present_sessionCookie) {
      if (!(this_present_sessionCookie && that_present_sessionCookie))
        return false;
      if (!this.sessionCookie.equals(that.sessionCookie))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + deviceId;

    hashCode = hashCode * 8191 + ((isSetUdid()) ? 131071 : 524287);
    if (isSetUdid())
      hashCode = hashCode * 8191 + udid.hashCode();

    hashCode = hashCode * 8191 + ((isSetEncPassword()) ? 131071 : 524287);
    if (isSetEncPassword())
      hashCode = hashCode * 8191 + encPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsVersion()) ? 131071 : 524287);
    if (isSetOsVersion())
      hashCode = hashCode * 8191 + osVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
    if (isSetLocale())
      hashCode = hashCode * 8191 + locale.hashCode();

    hashCode = hashCode * 8191 + hotpCounter;

    hashCode = hashCode * 8191 + ((isSetDigest()) ? 131071 : 524287);
    if (isSetDigest())
      hashCode = hashCode * 8191 + digest.hashCode();

    hashCode = hashCode * 8191 + ((isSetRisk()) ? 131071 : 524287);
    if (isSetRisk())
      hashCode = hashCode * 8191 + risk.hashCode();

    hashCode = hashCode * 8191 + ((passwordLess) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCpuArch()) ? 131071 : 524287);
    if (isSetCpuArch())
      hashCode = hashCode * 8191 + cpuArch.getValue();

    hashCode = hashCode * 8191 + ((isSetCommClientType()) ? 131071 : 524287);
    if (isSetCommClientType())
      hashCode = hashCode * 8191 + commClientType.getValue();

    hashCode = hashCode * 8191 + ((isSetSessionCookie()) ? 131071 : 524287);
    if (isSetSessionCookie())
      hashCode = hashCode * 8191 + sessionCookie.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LoginParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUdid()).compareTo(other.isSetUdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udid, other.udid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncPassword()).compareTo(other.isSetEncPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encPassword, other.encPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsVersion()).compareTo(other.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, other.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHotpCounter()).compareTo(other.isSetHotpCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotpCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotpCounter, other.hotpCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRisk()).compareTo(other.isSetRisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.risk, other.risk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPasswordLess()).compareTo(other.isSetPasswordLess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswordLess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwordLess, other.passwordLess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuArch()).compareTo(other.isSetCpuArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuArch, other.cpuArch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommClientType()).compareTo(other.isSetCommClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commClientType, other.commClientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookie()).compareTo(other.isSetSessionCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookie, other.sessionCookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LoginParam(");
    boolean first = true;

    sb.append("deviceId:");
    sb.append(this.deviceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("udid:");
    if (this.udid == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.udid, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encPassword:");
    if (this.encPassword == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.encPassword, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locale:");
    if (this.locale == null) {
      sb.append("null");
    } else {
      sb.append(this.locale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotpCounter:");
    sb.append(this.hotpCounter);
    first = false;
    if (isSetDigest()) {
      if (!first) sb.append(", ");
      sb.append("digest:");
      if (this.digest == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.digest, sb);
      }
      first = false;
    }
    if (isSetRisk()) {
      if (!first) sb.append(", ");
      sb.append("risk:");
      if (this.risk == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.risk, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("passwordLess:");
    sb.append(this.passwordLess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuArch:");
    if (this.cpuArch == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuArch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commClientType:");
    if (this.commClientType == null) {
      sb.append("null");
    } else {
      sb.append(this.commClientType);
    }
    first = false;
    if (isSetSessionCookie()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookie:");
      if (this.sessionCookie == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionCookie);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoginParamStandardScheme getScheme() {
      return new LoginParamStandardScheme();
    }
  }

  private static class LoginParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoginParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceId = iprot.readI32();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udid = iprot.readBinary();
              struct.setUdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENC_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encPassword = iprot.readBinary();
              struct.setEncPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locale = iprot.readString();
              struct.setLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOTP_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hotpCounter = iprot.readI32();
              struct.setHotpCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readBinary();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RISK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.risk = iprot.readBinary();
              struct.setRiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PASSWORD_LESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.passwordLess = iprot.readBool();
              struct.setPasswordLessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CPU_ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuArch = com.doubleclue.comm.thrift.CpuArch.findByValue(iprot.readI32());
              struct.setCpuArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMM_CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commClientType = com.doubleclue.comm.thrift.CommClientType.findByValue(iprot.readI32());
              struct.setCommClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SESSION_COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionCookie = iprot.readString();
              struct.setSessionCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
      oprot.writeI32(struct.deviceId);
      oprot.writeFieldEnd();
      if (struct.udid != null) {
        oprot.writeFieldBegin(UDID_FIELD_DESC);
        oprot.writeBinary(struct.udid);
        oprot.writeFieldEnd();
      }
      if (struct.encPassword != null) {
        oprot.writeFieldBegin(ENC_PASSWORD_FIELD_DESC);
        oprot.writeBinary(struct.encPassword);
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(struct.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOTP_COUNTER_FIELD_DESC);
      oprot.writeI32(struct.hotpCounter);
      oprot.writeFieldEnd();
      if (struct.digest != null) {
        if (struct.isSetDigest()) {
          oprot.writeFieldBegin(DIGEST_FIELD_DESC);
          oprot.writeBinary(struct.digest);
          oprot.writeFieldEnd();
        }
      }
      if (struct.risk != null) {
        if (struct.isSetRisk()) {
          oprot.writeFieldBegin(RISK_FIELD_DESC);
          oprot.writeBinary(struct.risk);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PASSWORD_LESS_FIELD_DESC);
      oprot.writeBool(struct.passwordLess);
      oprot.writeFieldEnd();
      if (struct.cpuArch != null) {
        oprot.writeFieldBegin(CPU_ARCH_FIELD_DESC);
        oprot.writeI32(struct.cpuArch.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.commClientType != null) {
        oprot.writeFieldBegin(COMM_CLIENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.commClientType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sessionCookie != null) {
        if (struct.isSetSessionCookie()) {
          oprot.writeFieldBegin(SESSION_COOKIE_FIELD_DESC);
          oprot.writeString(struct.sessionCookie);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoginParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LoginParamTupleScheme getScheme() {
      return new LoginParamTupleScheme();
    }
  }

  private static class LoginParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoginParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoginParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeviceId()) {
        optionals.set(0);
      }
      if (struct.isSetUdid()) {
        optionals.set(1);
      }
      if (struct.isSetEncPassword()) {
        optionals.set(2);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(3);
      }
      if (struct.isSetLocale()) {
        optionals.set(4);
      }
      if (struct.isSetHotpCounter()) {
        optionals.set(5);
      }
      if (struct.isSetDigest()) {
        optionals.set(6);
      }
      if (struct.isSetRisk()) {
        optionals.set(7);
      }
      if (struct.isSetPasswordLess()) {
        optionals.set(8);
      }
      if (struct.isSetCpuArch()) {
        optionals.set(9);
      }
      if (struct.isSetCommClientType()) {
        optionals.set(10);
      }
      if (struct.isSetSessionCookie()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetDeviceId()) {
        oprot.writeI32(struct.deviceId);
      }
      if (struct.isSetUdid()) {
        oprot.writeBinary(struct.udid);
      }
      if (struct.isSetEncPassword()) {
        oprot.writeBinary(struct.encPassword);
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetLocale()) {
        oprot.writeString(struct.locale);
      }
      if (struct.isSetHotpCounter()) {
        oprot.writeI32(struct.hotpCounter);
      }
      if (struct.isSetDigest()) {
        oprot.writeBinary(struct.digest);
      }
      if (struct.isSetRisk()) {
        oprot.writeBinary(struct.risk);
      }
      if (struct.isSetPasswordLess()) {
        oprot.writeBool(struct.passwordLess);
      }
      if (struct.isSetCpuArch()) {
        oprot.writeI32(struct.cpuArch.getValue());
      }
      if (struct.isSetCommClientType()) {
        oprot.writeI32(struct.commClientType.getValue());
      }
      if (struct.isSetSessionCookie()) {
        oprot.writeString(struct.sessionCookie);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoginParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.deviceId = iprot.readI32();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.udid = iprot.readBinary();
        struct.setUdidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.encPassword = iprot.readBinary();
        struct.setEncPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.locale = iprot.readString();
        struct.setLocaleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hotpCounter = iprot.readI32();
        struct.setHotpCounterIsSet(true);
      }
      if (incoming.get(6)) {
        struct.digest = iprot.readBinary();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.risk = iprot.readBinary();
        struct.setRiskIsSet(true);
      }
      if (incoming.get(8)) {
        struct.passwordLess = iprot.readBool();
        struct.setPasswordLessIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cpuArch = com.doubleclue.comm.thrift.CpuArch.findByValue(iprot.readI32());
        struct.setCpuArchIsSet(true);
      }
      if (incoming.get(10)) {
        struct.commClientType = com.doubleclue.comm.thrift.CommClientType.findByValue(iprot.readI32());
        struct.setCommClientTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sessionCookie = iprot.readString();
        struct.setSessionCookieIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

