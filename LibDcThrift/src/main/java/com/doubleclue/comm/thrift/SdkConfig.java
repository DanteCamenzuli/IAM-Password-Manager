/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class SdkConfig implements org.apache.thrift.TBase<SdkConfig, SdkConfig._Fields>, java.io.Serializable, Cloneable, Comparable<SdkConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SdkConfig");

  private static final org.apache.thrift.protocol.TField CONNECTION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("serverUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSPORT_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("transportProtocol", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERVER_PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPublicKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORTAL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("portalUrl", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SdkConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SdkConfigTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer connectionKey; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String serverUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String transportProtocol; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverPublicKey; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String portalUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTION_KEY((short)1, "connectionKey"),
    SERVER_URL((short)2, "serverUrl"),
    TRANSPORT_PROTOCOL((short)3, "transportProtocol"),
    SERVER_PUBLIC_KEY((short)4, "serverPublicKey"),
    PORTAL_URL((short)5, "portalUrl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNECTION_KEY
          return CONNECTION_KEY;
        case 2: // SERVER_URL
          return SERVER_URL;
        case 3: // TRANSPORT_PROTOCOL
          return TRANSPORT_PROTOCOL;
        case 4: // SERVER_PUBLIC_KEY
          return SERVER_PUBLIC_KEY;
        case 5: // PORTAL_URL
          return PORTAL_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PORTAL_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTION_KEY, new org.apache.thrift.meta_data.FieldMetaData("connectionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SERVER_URL, new org.apache.thrift.meta_data.FieldMetaData("serverUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSPORT_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("transportProtocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverPublicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PORTAL_URL, new org.apache.thrift.meta_data.FieldMetaData("portalUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SdkConfig.class, metaDataMap);
  }

  public SdkConfig() {
  }

  public SdkConfig(
    java.nio.ByteBuffer connectionKey,
    java.lang.String serverUrl,
    java.lang.String transportProtocol,
    java.nio.ByteBuffer serverPublicKey)
  {
    this();
    this.connectionKey = org.apache.thrift.TBaseHelper.copyBinary(connectionKey);
    this.serverUrl = serverUrl;
    this.transportProtocol = transportProtocol;
    this.serverPublicKey = org.apache.thrift.TBaseHelper.copyBinary(serverPublicKey);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SdkConfig(SdkConfig other) {
    if (other.isSetConnectionKey()) {
      this.connectionKey = org.apache.thrift.TBaseHelper.copyBinary(other.connectionKey);
    }
    if (other.isSetServerUrl()) {
      this.serverUrl = other.serverUrl;
    }
    if (other.isSetTransportProtocol()) {
      this.transportProtocol = other.transportProtocol;
    }
    if (other.isSetServerPublicKey()) {
      this.serverPublicKey = org.apache.thrift.TBaseHelper.copyBinary(other.serverPublicKey);
    }
    if (other.isSetPortalUrl()) {
      this.portalUrl = other.portalUrl;
    }
  }

  public SdkConfig deepCopy() {
    return new SdkConfig(this);
  }

  @Override
  public void clear() {
    this.connectionKey = null;
    this.serverUrl = null;
    this.transportProtocol = null;
    this.serverPublicKey = null;
    this.portalUrl = null;
  }

  public byte[] getConnectionKey() {
    setConnectionKey(org.apache.thrift.TBaseHelper.rightSize(connectionKey));
    return connectionKey == null ? null : connectionKey.array();
  }

  public java.nio.ByteBuffer bufferForConnectionKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(connectionKey);
  }

  public SdkConfig setConnectionKey(byte[] connectionKey) {
    this.connectionKey = connectionKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(connectionKey.clone());
    return this;
  }

  public SdkConfig setConnectionKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer connectionKey) {
    this.connectionKey = org.apache.thrift.TBaseHelper.copyBinary(connectionKey);
    return this;
  }

  public void unsetConnectionKey() {
    this.connectionKey = null;
  }

  /** Returns true if field connectionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionKey() {
    return this.connectionKey != null;
  }

  public void setConnectionKeyIsSet(boolean value) {
    if (!value) {
      this.connectionKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServerUrl() {
    return this.serverUrl;
  }

  public SdkConfig setServerUrl(@org.apache.thrift.annotation.Nullable java.lang.String serverUrl) {
    this.serverUrl = serverUrl;
    return this;
  }

  public void unsetServerUrl() {
    this.serverUrl = null;
  }

  /** Returns true if field serverUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetServerUrl() {
    return this.serverUrl != null;
  }

  public void setServerUrlIsSet(boolean value) {
    if (!value) {
      this.serverUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTransportProtocol() {
    return this.transportProtocol;
  }

  public SdkConfig setTransportProtocol(@org.apache.thrift.annotation.Nullable java.lang.String transportProtocol) {
    this.transportProtocol = transportProtocol;
    return this;
  }

  public void unsetTransportProtocol() {
    this.transportProtocol = null;
  }

  /** Returns true if field transportProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetTransportProtocol() {
    return this.transportProtocol != null;
  }

  public void setTransportProtocolIsSet(boolean value) {
    if (!value) {
      this.transportProtocol = null;
    }
  }

  public byte[] getServerPublicKey() {
    setServerPublicKey(org.apache.thrift.TBaseHelper.rightSize(serverPublicKey));
    return serverPublicKey == null ? null : serverPublicKey.array();
  }

  public java.nio.ByteBuffer bufferForServerPublicKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(serverPublicKey);
  }

  public SdkConfig setServerPublicKey(byte[] serverPublicKey) {
    this.serverPublicKey = serverPublicKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(serverPublicKey.clone());
    return this;
  }

  public SdkConfig setServerPublicKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverPublicKey) {
    this.serverPublicKey = org.apache.thrift.TBaseHelper.copyBinary(serverPublicKey);
    return this;
  }

  public void unsetServerPublicKey() {
    this.serverPublicKey = null;
  }

  /** Returns true if field serverPublicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServerPublicKey() {
    return this.serverPublicKey != null;
  }

  public void setServerPublicKeyIsSet(boolean value) {
    if (!value) {
      this.serverPublicKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPortalUrl() {
    return this.portalUrl;
  }

  public SdkConfig setPortalUrl(@org.apache.thrift.annotation.Nullable java.lang.String portalUrl) {
    this.portalUrl = portalUrl;
    return this;
  }

  public void unsetPortalUrl() {
    this.portalUrl = null;
  }

  /** Returns true if field portalUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPortalUrl() {
    return this.portalUrl != null;
  }

  public void setPortalUrlIsSet(boolean value) {
    if (!value) {
      this.portalUrl = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CONNECTION_KEY:
      if (value == null) {
        unsetConnectionKey();
      } else {
        if (value instanceof byte[]) {
          setConnectionKey((byte[])value);
        } else {
          setConnectionKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SERVER_URL:
      if (value == null) {
        unsetServerUrl();
      } else {
        setServerUrl((java.lang.String)value);
      }
      break;

    case TRANSPORT_PROTOCOL:
      if (value == null) {
        unsetTransportProtocol();
      } else {
        setTransportProtocol((java.lang.String)value);
      }
      break;

    case SERVER_PUBLIC_KEY:
      if (value == null) {
        unsetServerPublicKey();
      } else {
        if (value instanceof byte[]) {
          setServerPublicKey((byte[])value);
        } else {
          setServerPublicKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PORTAL_URL:
      if (value == null) {
        unsetPortalUrl();
      } else {
        setPortalUrl((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTION_KEY:
      return getConnectionKey();

    case SERVER_URL:
      return getServerUrl();

    case TRANSPORT_PROTOCOL:
      return getTransportProtocol();

    case SERVER_PUBLIC_KEY:
      return getServerPublicKey();

    case PORTAL_URL:
      return getPortalUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONNECTION_KEY:
      return isSetConnectionKey();
    case SERVER_URL:
      return isSetServerUrl();
    case TRANSPORT_PROTOCOL:
      return isSetTransportProtocol();
    case SERVER_PUBLIC_KEY:
      return isSetServerPublicKey();
    case PORTAL_URL:
      return isSetPortalUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SdkConfig)
      return this.equals((SdkConfig)that);
    return false;
  }

  public boolean equals(SdkConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_connectionKey = true && this.isSetConnectionKey();
    boolean that_present_connectionKey = true && that.isSetConnectionKey();
    if (this_present_connectionKey || that_present_connectionKey) {
      if (!(this_present_connectionKey && that_present_connectionKey))
        return false;
      if (!this.connectionKey.equals(that.connectionKey))
        return false;
    }

    boolean this_present_serverUrl = true && this.isSetServerUrl();
    boolean that_present_serverUrl = true && that.isSetServerUrl();
    if (this_present_serverUrl || that_present_serverUrl) {
      if (!(this_present_serverUrl && that_present_serverUrl))
        return false;
      if (!this.serverUrl.equals(that.serverUrl))
        return false;
    }

    boolean this_present_transportProtocol = true && this.isSetTransportProtocol();
    boolean that_present_transportProtocol = true && that.isSetTransportProtocol();
    if (this_present_transportProtocol || that_present_transportProtocol) {
      if (!(this_present_transportProtocol && that_present_transportProtocol))
        return false;
      if (!this.transportProtocol.equals(that.transportProtocol))
        return false;
    }

    boolean this_present_serverPublicKey = true && this.isSetServerPublicKey();
    boolean that_present_serverPublicKey = true && that.isSetServerPublicKey();
    if (this_present_serverPublicKey || that_present_serverPublicKey) {
      if (!(this_present_serverPublicKey && that_present_serverPublicKey))
        return false;
      if (!this.serverPublicKey.equals(that.serverPublicKey))
        return false;
    }

    boolean this_present_portalUrl = true && this.isSetPortalUrl();
    boolean that_present_portalUrl = true && that.isSetPortalUrl();
    if (this_present_portalUrl || that_present_portalUrl) {
      if (!(this_present_portalUrl && that_present_portalUrl))
        return false;
      if (!this.portalUrl.equals(that.portalUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConnectionKey()) ? 131071 : 524287);
    if (isSetConnectionKey())
      hashCode = hashCode * 8191 + connectionKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerUrl()) ? 131071 : 524287);
    if (isSetServerUrl())
      hashCode = hashCode * 8191 + serverUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetTransportProtocol()) ? 131071 : 524287);
    if (isSetTransportProtocol())
      hashCode = hashCode * 8191 + transportProtocol.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerPublicKey()) ? 131071 : 524287);
    if (isSetServerPublicKey())
      hashCode = hashCode * 8191 + serverPublicKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortalUrl()) ? 131071 : 524287);
    if (isSetPortalUrl())
      hashCode = hashCode * 8191 + portalUrl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SdkConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetConnectionKey()).compareTo(other.isSetConnectionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionKey, other.connectionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServerUrl()).compareTo(other.isSetServerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverUrl, other.serverUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransportProtocol()).compareTo(other.isSetTransportProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransportProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transportProtocol, other.transportProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServerPublicKey()).compareTo(other.isSetServerPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPublicKey, other.serverPublicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortalUrl()).compareTo(other.isSetPortalUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortalUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portalUrl, other.portalUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SdkConfig(");
    boolean first = true;

    sb.append("connectionKey:");
    if (this.connectionKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.connectionKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverUrl:");
    if (this.serverUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.serverUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transportProtocol:");
    if (this.transportProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.transportProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverPublicKey:");
    if (this.serverPublicKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serverPublicKey, sb);
    }
    first = false;
    if (isSetPortalUrl()) {
      if (!first) sb.append(", ");
      sb.append("portalUrl:");
      if (this.portalUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.portalUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SdkConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SdkConfigStandardScheme getScheme() {
      return new SdkConfigStandardScheme();
    }
  }

  private static class SdkConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<SdkConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SdkConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNECTION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectionKey = iprot.readBinary();
              struct.setConnectionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverUrl = iprot.readString();
              struct.setServerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSPORT_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transportProtocol = iprot.readString();
              struct.setTransportProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVER_PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverPublicKey = iprot.readBinary();
              struct.setServerPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORTAL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.portalUrl = iprot.readString();
              struct.setPortalUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SdkConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.connectionKey != null) {
        oprot.writeFieldBegin(CONNECTION_KEY_FIELD_DESC);
        oprot.writeBinary(struct.connectionKey);
        oprot.writeFieldEnd();
      }
      if (struct.serverUrl != null) {
        oprot.writeFieldBegin(SERVER_URL_FIELD_DESC);
        oprot.writeString(struct.serverUrl);
        oprot.writeFieldEnd();
      }
      if (struct.transportProtocol != null) {
        oprot.writeFieldBegin(TRANSPORT_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.transportProtocol);
        oprot.writeFieldEnd();
      }
      if (struct.serverPublicKey != null) {
        oprot.writeFieldBegin(SERVER_PUBLIC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.serverPublicKey);
        oprot.writeFieldEnd();
      }
      if (struct.portalUrl != null) {
        if (struct.isSetPortalUrl()) {
          oprot.writeFieldBegin(PORTAL_URL_FIELD_DESC);
          oprot.writeString(struct.portalUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SdkConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SdkConfigTupleScheme getScheme() {
      return new SdkConfigTupleScheme();
    }
  }

  private static class SdkConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<SdkConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SdkConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConnectionKey()) {
        optionals.set(0);
      }
      if (struct.isSetServerUrl()) {
        optionals.set(1);
      }
      if (struct.isSetTransportProtocol()) {
        optionals.set(2);
      }
      if (struct.isSetServerPublicKey()) {
        optionals.set(3);
      }
      if (struct.isSetPortalUrl()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetConnectionKey()) {
        oprot.writeBinary(struct.connectionKey);
      }
      if (struct.isSetServerUrl()) {
        oprot.writeString(struct.serverUrl);
      }
      if (struct.isSetTransportProtocol()) {
        oprot.writeString(struct.transportProtocol);
      }
      if (struct.isSetServerPublicKey()) {
        oprot.writeBinary(struct.serverPublicKey);
      }
      if (struct.isSetPortalUrl()) {
        oprot.writeString(struct.portalUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SdkConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.connectionKey = iprot.readBinary();
        struct.setConnectionKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverUrl = iprot.readString();
        struct.setServerUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transportProtocol = iprot.readString();
        struct.setTransportProtocolIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serverPublicKey = iprot.readBinary();
        struct.setServerPublicKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.portalUrl = iprot.readString();
        struct.setPortalUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

