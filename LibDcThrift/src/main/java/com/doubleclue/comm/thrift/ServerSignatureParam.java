/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Thrift also lets you define constants for use across languages. Complex
 * types and structs are specified using JSON notation.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class ServerSignatureParam implements org.apache.thrift.TBase<ServerSignatureParam, ServerSignatureParam._Fields>, java.io.Serializable, Cloneable, Comparable<ServerSignatureParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerSignatureParam");

  private static final org.apache.thrift.protocol.TField DATA_FOR_SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataForSignature", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LIB_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("libVersion", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IAM_DCEM_FIELD_DESC = new org.apache.thrift.protocol.TField("iamDcem", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField COMM_CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commClientType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ServerSignatureParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ServerSignatureParamTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer dataForSignature; // required
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.AppVersion appVersion; // required
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.AppVersion libVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String domainName; // required
  public boolean iamDcem; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.CommClientType
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CommClientType commClientType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_FOR_SIGNATURE((short)1, "dataForSignature"),
    APP_VERSION((short)2, "appVersion"),
    LIB_VERSION((short)3, "libVersion"),
    DOMAIN_NAME((short)4, "domainName"),
    IAM_DCEM((short)5, "iamDcem"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.CommClientType
     */
    COMM_CLIENT_TYPE((short)6, "commClientType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_FOR_SIGNATURE
          return DATA_FOR_SIGNATURE;
        case 2: // APP_VERSION
          return APP_VERSION;
        case 3: // LIB_VERSION
          return LIB_VERSION;
        case 4: // DOMAIN_NAME
          return DOMAIN_NAME;
        case 5: // IAM_DCEM
          return IAM_DCEM;
        case 6: // COMM_CLIENT_TYPE
          return COMM_CLIENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IAMDCEM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_FOR_SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("dataForSignature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.doubleclue.comm.thrift.AppVersion.class)));
    tmpMap.put(_Fields.LIB_VERSION, new org.apache.thrift.meta_data.FieldMetaData("libVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.doubleclue.comm.thrift.AppVersion.class)));
    tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IAM_DCEM, new org.apache.thrift.meta_data.FieldMetaData("iamDcem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMM_CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commClientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.CommClientType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerSignatureParam.class, metaDataMap);
  }

  public ServerSignatureParam() {
  }

  public ServerSignatureParam(
    java.nio.ByteBuffer dataForSignature,
    com.doubleclue.comm.thrift.AppVersion appVersion,
    com.doubleclue.comm.thrift.AppVersion libVersion,
    java.lang.String domainName,
    boolean iamDcem,
    com.doubleclue.comm.thrift.CommClientType commClientType)
  {
    this();
    this.dataForSignature = org.apache.thrift.TBaseHelper.copyBinary(dataForSignature);
    this.appVersion = appVersion;
    this.libVersion = libVersion;
    this.domainName = domainName;
    this.iamDcem = iamDcem;
    setIamDcemIsSet(true);
    this.commClientType = commClientType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerSignatureParam(ServerSignatureParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDataForSignature()) {
      this.dataForSignature = org.apache.thrift.TBaseHelper.copyBinary(other.dataForSignature);
    }
    if (other.isSetAppVersion()) {
      this.appVersion = new com.doubleclue.comm.thrift.AppVersion(other.appVersion);
    }
    if (other.isSetLibVersion()) {
      this.libVersion = new com.doubleclue.comm.thrift.AppVersion(other.libVersion);
    }
    if (other.isSetDomainName()) {
      this.domainName = other.domainName;
    }
    this.iamDcem = other.iamDcem;
    if (other.isSetCommClientType()) {
      this.commClientType = other.commClientType;
    }
  }

  public ServerSignatureParam deepCopy() {
    return new ServerSignatureParam(this);
  }

  @Override
  public void clear() {
    this.dataForSignature = null;
    this.appVersion = null;
    this.libVersion = null;
    this.domainName = null;
    setIamDcemIsSet(false);
    this.iamDcem = false;
    this.commClientType = null;
  }

  public byte[] getDataForSignature() {
    setDataForSignature(org.apache.thrift.TBaseHelper.rightSize(dataForSignature));
    return dataForSignature == null ? null : dataForSignature.array();
  }

  public java.nio.ByteBuffer bufferForDataForSignature() {
    return org.apache.thrift.TBaseHelper.copyBinary(dataForSignature);
  }

  public ServerSignatureParam setDataForSignature(byte[] dataForSignature) {
    this.dataForSignature = dataForSignature == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(dataForSignature.clone());
    return this;
  }

  public ServerSignatureParam setDataForSignature(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer dataForSignature) {
    this.dataForSignature = org.apache.thrift.TBaseHelper.copyBinary(dataForSignature);
    return this;
  }

  public void unsetDataForSignature() {
    this.dataForSignature = null;
  }

  /** Returns true if field dataForSignature is set (has been assigned a value) and false otherwise */
  public boolean isSetDataForSignature() {
    return this.dataForSignature != null;
  }

  public void setDataForSignatureIsSet(boolean value) {
    if (!value) {
      this.dataForSignature = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.AppVersion getAppVersion() {
    return this.appVersion;
  }

  public ServerSignatureParam setAppVersion(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.AppVersion appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.AppVersion getLibVersion() {
    return this.libVersion;
  }

  public ServerSignatureParam setLibVersion(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.AppVersion libVersion) {
    this.libVersion = libVersion;
    return this;
  }

  public void unsetLibVersion() {
    this.libVersion = null;
  }

  /** Returns true if field libVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetLibVersion() {
    return this.libVersion != null;
  }

  public void setLibVersionIsSet(boolean value) {
    if (!value) {
      this.libVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDomainName() {
    return this.domainName;
  }

  public ServerSignatureParam setDomainName(@org.apache.thrift.annotation.Nullable java.lang.String domainName) {
    this.domainName = domainName;
    return this;
  }

  public void unsetDomainName() {
    this.domainName = null;
  }

  /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainName() {
    return this.domainName != null;
  }

  public void setDomainNameIsSet(boolean value) {
    if (!value) {
      this.domainName = null;
    }
  }

  public boolean isIamDcem() {
    return this.iamDcem;
  }

  public ServerSignatureParam setIamDcem(boolean iamDcem) {
    this.iamDcem = iamDcem;
    setIamDcemIsSet(true);
    return this;
  }

  public void unsetIamDcem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IAMDCEM_ISSET_ID);
  }

  /** Returns true if field iamDcem is set (has been assigned a value) and false otherwise */
  public boolean isSetIamDcem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IAMDCEM_ISSET_ID);
  }

  public void setIamDcemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IAMDCEM_ISSET_ID, value);
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CommClientType
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.CommClientType getCommClientType() {
    return this.commClientType;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CommClientType
   */
  public ServerSignatureParam setCommClientType(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CommClientType commClientType) {
    this.commClientType = commClientType;
    return this;
  }

  public void unsetCommClientType() {
    this.commClientType = null;
  }

  /** Returns true if field commClientType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommClientType() {
    return this.commClientType != null;
  }

  public void setCommClientTypeIsSet(boolean value) {
    if (!value) {
      this.commClientType = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DATA_FOR_SIGNATURE:
      if (value == null) {
        unsetDataForSignature();
      } else {
        if (value instanceof byte[]) {
          setDataForSignature((byte[])value);
        } else {
          setDataForSignature((java.nio.ByteBuffer)value);
        }
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((com.doubleclue.comm.thrift.AppVersion)value);
      }
      break;

    case LIB_VERSION:
      if (value == null) {
        unsetLibVersion();
      } else {
        setLibVersion((com.doubleclue.comm.thrift.AppVersion)value);
      }
      break;

    case DOMAIN_NAME:
      if (value == null) {
        unsetDomainName();
      } else {
        setDomainName((java.lang.String)value);
      }
      break;

    case IAM_DCEM:
      if (value == null) {
        unsetIamDcem();
      } else {
        setIamDcem((java.lang.Boolean)value);
      }
      break;

    case COMM_CLIENT_TYPE:
      if (value == null) {
        unsetCommClientType();
      } else {
        setCommClientType((com.doubleclue.comm.thrift.CommClientType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_FOR_SIGNATURE:
      return getDataForSignature();

    case APP_VERSION:
      return getAppVersion();

    case LIB_VERSION:
      return getLibVersion();

    case DOMAIN_NAME:
      return getDomainName();

    case IAM_DCEM:
      return isIamDcem();

    case COMM_CLIENT_TYPE:
      return getCommClientType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATA_FOR_SIGNATURE:
      return isSetDataForSignature();
    case APP_VERSION:
      return isSetAppVersion();
    case LIB_VERSION:
      return isSetLibVersion();
    case DOMAIN_NAME:
      return isSetDomainName();
    case IAM_DCEM:
      return isSetIamDcem();
    case COMM_CLIENT_TYPE:
      return isSetCommClientType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerSignatureParam)
      return this.equals((ServerSignatureParam)that);
    return false;
  }

  public boolean equals(ServerSignatureParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dataForSignature = true && this.isSetDataForSignature();
    boolean that_present_dataForSignature = true && that.isSetDataForSignature();
    if (this_present_dataForSignature || that_present_dataForSignature) {
      if (!(this_present_dataForSignature && that_present_dataForSignature))
        return false;
      if (!this.dataForSignature.equals(that.dataForSignature))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_libVersion = true && this.isSetLibVersion();
    boolean that_present_libVersion = true && that.isSetLibVersion();
    if (this_present_libVersion || that_present_libVersion) {
      if (!(this_present_libVersion && that_present_libVersion))
        return false;
      if (!this.libVersion.equals(that.libVersion))
        return false;
    }

    boolean this_present_domainName = true && this.isSetDomainName();
    boolean that_present_domainName = true && that.isSetDomainName();
    if (this_present_domainName || that_present_domainName) {
      if (!(this_present_domainName && that_present_domainName))
        return false;
      if (!this.domainName.equals(that.domainName))
        return false;
    }

    boolean this_present_iamDcem = true;
    boolean that_present_iamDcem = true;
    if (this_present_iamDcem || that_present_iamDcem) {
      if (!(this_present_iamDcem && that_present_iamDcem))
        return false;
      if (this.iamDcem != that.iamDcem)
        return false;
    }

    boolean this_present_commClientType = true && this.isSetCommClientType();
    boolean that_present_commClientType = true && that.isSetCommClientType();
    if (this_present_commClientType || that_present_commClientType) {
      if (!(this_present_commClientType && that_present_commClientType))
        return false;
      if (!this.commClientType.equals(that.commClientType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDataForSignature()) ? 131071 : 524287);
    if (isSetDataForSignature())
      hashCode = hashCode * 8191 + dataForSignature.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppVersion()) ? 131071 : 524287);
    if (isSetAppVersion())
      hashCode = hashCode * 8191 + appVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetLibVersion()) ? 131071 : 524287);
    if (isSetLibVersion())
      hashCode = hashCode * 8191 + libVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainName()) ? 131071 : 524287);
    if (isSetDomainName())
      hashCode = hashCode * 8191 + domainName.hashCode();

    hashCode = hashCode * 8191 + ((iamDcem) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCommClientType()) ? 131071 : 524287);
    if (isSetCommClientType())
      hashCode = hashCode * 8191 + commClientType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(ServerSignatureParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDataForSignature()).compareTo(other.isSetDataForSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataForSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataForSignature, other.dataForSignature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppVersion()).compareTo(other.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, other.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLibVersion()).compareTo(other.isSetLibVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libVersion, other.libVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIamDcem()).compareTo(other.isSetIamDcem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIamDcem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iamDcem, other.iamDcem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommClientType()).compareTo(other.isSetCommClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commClientType, other.commClientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ServerSignatureParam(");
    boolean first = true;

    sb.append("dataForSignature:");
    if (this.dataForSignature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.dataForSignature, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appVersion:");
    if (this.appVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.appVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("libVersion:");
    if (this.libVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.libVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainName:");
    if (this.domainName == null) {
      sb.append("null");
    } else {
      sb.append(this.domainName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iamDcem:");
    sb.append(this.iamDcem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commClientType:");
    if (this.commClientType == null) {
      sb.append("null");
    } else {
      sb.append(this.commClientType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (appVersion != null) {
      appVersion.validate();
    }
    if (libVersion != null) {
      libVersion.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerSignatureParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServerSignatureParamStandardScheme getScheme() {
      return new ServerSignatureParamStandardScheme();
    }
  }

  private static class ServerSignatureParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<ServerSignatureParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerSignatureParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_FOR_SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataForSignature = iprot.readBinary();
              struct.setDataForSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.appVersion = new com.doubleclue.comm.thrift.AppVersion();
              struct.appVersion.read(iprot);
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIB_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.libVersion = new com.doubleclue.comm.thrift.AppVersion();
              struct.libVersion.read(iprot);
              struct.setLibVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOMAIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainName = iprot.readString();
              struct.setDomainNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IAM_DCEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.iamDcem = iprot.readBool();
              struct.setIamDcemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMM_CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commClientType = com.doubleclue.comm.thrift.CommClientType.findByValue(iprot.readI32());
              struct.setCommClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerSignatureParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dataForSignature != null) {
        oprot.writeFieldBegin(DATA_FOR_SIGNATURE_FIELD_DESC);
        oprot.writeBinary(struct.dataForSignature);
        oprot.writeFieldEnd();
      }
      if (struct.appVersion != null) {
        oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
        struct.appVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.libVersion != null) {
        oprot.writeFieldBegin(LIB_VERSION_FIELD_DESC);
        struct.libVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.domainName != null) {
        oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
        oprot.writeString(struct.domainName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IAM_DCEM_FIELD_DESC);
      oprot.writeBool(struct.iamDcem);
      oprot.writeFieldEnd();
      if (struct.commClientType != null) {
        oprot.writeFieldBegin(COMM_CLIENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.commClientType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerSignatureParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServerSignatureParamTupleScheme getScheme() {
      return new ServerSignatureParamTupleScheme();
    }
  }

  private static class ServerSignatureParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<ServerSignatureParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerSignatureParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDataForSignature()) {
        optionals.set(0);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(1);
      }
      if (struct.isSetLibVersion()) {
        optionals.set(2);
      }
      if (struct.isSetDomainName()) {
        optionals.set(3);
      }
      if (struct.isSetIamDcem()) {
        optionals.set(4);
      }
      if (struct.isSetCommClientType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDataForSignature()) {
        oprot.writeBinary(struct.dataForSignature);
      }
      if (struct.isSetAppVersion()) {
        struct.appVersion.write(oprot);
      }
      if (struct.isSetLibVersion()) {
        struct.libVersion.write(oprot);
      }
      if (struct.isSetDomainName()) {
        oprot.writeString(struct.domainName);
      }
      if (struct.isSetIamDcem()) {
        oprot.writeBool(struct.iamDcem);
      }
      if (struct.isSetCommClientType()) {
        oprot.writeI32(struct.commClientType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerSignatureParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.dataForSignature = iprot.readBinary();
        struct.setDataForSignatureIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appVersion = new com.doubleclue.comm.thrift.AppVersion();
        struct.appVersion.read(iprot);
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.libVersion = new com.doubleclue.comm.thrift.AppVersion();
        struct.libVersion.read(iprot);
        struct.setLibVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.domainName = iprot.readString();
        struct.setDomainNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.iamDcem = iprot.readBool();
        struct.setIamDcemIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commClientType = com.doubleclue.comm.thrift.CommClientType.findByValue(iprot.readI32());
        struct.setCommClientTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

