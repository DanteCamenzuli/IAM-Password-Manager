/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class SdkCloudSafe implements org.apache.thrift.TBase<SdkCloudSafe, SdkCloudSafe._Fields>, java.io.Serializable, Cloneable, Comparable<SdkCloudSafe> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SdkCloudSafe");

  private static final org.apache.thrift.protocol.TField UNIQUE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DISCARD_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("discardAfter", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModified", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SHARED_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedUser", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField WRITE_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("writeAccess", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RESTICT_DOWNLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("restictDownload", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SdkCloudSafeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SdkCloudSafeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable SdkCloudSafeKey uniqueKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String options; // required
  public long discardAfter; // required
  public long lastModified; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signature; // required
  public long length; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sharedUser; // required
  public boolean writeAccess; // required
  public boolean restictDownload; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIQUE_KEY((short)1, "uniqueKey"),
    CONTENT((short)2, "content"),
    OPTIONS((short)3, "options"),
    DISCARD_AFTER((short)4, "discardAfter"),
    LAST_MODIFIED((short)5, "lastModified"),
    SIGNATURE((short)6, "signature"),
    LENGTH((short)7, "length"),
    SHARED_USER((short)8, "sharedUser"),
    WRITE_ACCESS((short)9, "writeAccess"),
    RESTICT_DOWNLOAD((short)10, "restictDownload");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIQUE_KEY
          return UNIQUE_KEY;
        case 2: // CONTENT
          return CONTENT;
        case 3: // OPTIONS
          return OPTIONS;
        case 4: // DISCARD_AFTER
          return DISCARD_AFTER;
        case 5: // LAST_MODIFIED
          return LAST_MODIFIED;
        case 6: // SIGNATURE
          return SIGNATURE;
        case 7: // LENGTH
          return LENGTH;
        case 8: // SHARED_USER
          return SHARED_USER;
        case 9: // WRITE_ACCESS
          return WRITE_ACCESS;
        case 10: // RESTICT_DOWNLOAD
          return RESTICT_DOWNLOAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISCARDAFTER_ISSET_ID = 0;
  private static final int __LASTMODIFIED_ISSET_ID = 1;
  private static final int __LENGTH_ISSET_ID = 2;
  private static final int __WRITEACCESS_ISSET_ID = 3;
  private static final int __RESTICTDOWNLOAD_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIQUE_KEY, new org.apache.thrift.meta_data.FieldMetaData("uniqueKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SdkCloudSafeKey.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISCARD_AFTER, new org.apache.thrift.meta_data.FieldMetaData("discardAfter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("lastModified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHARED_USER, new org.apache.thrift.meta_data.FieldMetaData("sharedUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITE_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("writeAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESTICT_DOWNLOAD, new org.apache.thrift.meta_data.FieldMetaData("restictDownload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SdkCloudSafe.class, metaDataMap);
  }

  public SdkCloudSafe() {
  }

  public SdkCloudSafe(
    SdkCloudSafeKey uniqueKey,
    java.nio.ByteBuffer content,
    java.lang.String options,
    long discardAfter,
    long lastModified,
    java.nio.ByteBuffer signature,
    long length,
    java.lang.String sharedUser,
    boolean writeAccess,
    boolean restictDownload)
  {
    this();
    this.uniqueKey = uniqueKey;
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    this.options = options;
    this.discardAfter = discardAfter;
    setDiscardAfterIsSet(true);
    this.lastModified = lastModified;
    setLastModifiedIsSet(true);
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
    this.length = length;
    setLengthIsSet(true);
    this.sharedUser = sharedUser;
    this.writeAccess = writeAccess;
    setWriteAccessIsSet(true);
    this.restictDownload = restictDownload;
    setRestictDownloadIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SdkCloudSafe(SdkCloudSafe other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUniqueKey()) {
      this.uniqueKey = new SdkCloudSafeKey(other.uniqueKey);
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
    if (other.isSetOptions()) {
      this.options = other.options;
    }
    this.discardAfter = other.discardAfter;
    this.lastModified = other.lastModified;
    if (other.isSetSignature()) {
      this.signature = org.apache.thrift.TBaseHelper.copyBinary(other.signature);
    }
    this.length = other.length;
    if (other.isSetSharedUser()) {
      this.sharedUser = other.sharedUser;
    }
    this.writeAccess = other.writeAccess;
    this.restictDownload = other.restictDownload;
  }

  public SdkCloudSafe deepCopy() {
    return new SdkCloudSafe(this);
  }

  @Override
  public void clear() {
    this.uniqueKey = null;
    this.content = null;
    this.options = null;
    setDiscardAfterIsSet(false);
    this.discardAfter = 0;
    setLastModifiedIsSet(false);
    this.lastModified = 0;
    this.signature = null;
    setLengthIsSet(false);
    this.length = 0;
    this.sharedUser = null;
    setWriteAccessIsSet(false);
    this.writeAccess = false;
    setRestictDownloadIsSet(false);
    this.restictDownload = false;
  }

  @org.apache.thrift.annotation.Nullable
  public SdkCloudSafeKey getUniqueKey() {
    return this.uniqueKey;
  }

  public SdkCloudSafe setUniqueKey(@org.apache.thrift.annotation.Nullable SdkCloudSafeKey uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

  public void unsetUniqueKey() {
    this.uniqueKey = null;
  }

  /** Returns true if field uniqueKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueKey() {
    return this.uniqueKey != null;
  }

  public void setUniqueKeyIsSet(boolean value) {
    if (!value) {
      this.uniqueKey = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public java.nio.ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public SdkCloudSafe setContent(byte[] content) {
    this.content = content == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(content.clone());
    return this;
  }

  public SdkCloudSafe setContent(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOptions() {
    return this.options;
  }

  public SdkCloudSafe setOptions(@org.apache.thrift.annotation.Nullable java.lang.String options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public long getDiscardAfter() {
    return this.discardAfter;
  }

  public SdkCloudSafe setDiscardAfter(long discardAfter) {
    this.discardAfter = discardAfter;
    setDiscardAfterIsSet(true);
    return this;
  }

  public void unsetDiscardAfter() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISCARDAFTER_ISSET_ID);
  }

  /** Returns true if field discardAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscardAfter() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISCARDAFTER_ISSET_ID);
  }

  public void setDiscardAfterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISCARDAFTER_ISSET_ID, value);
  }

  public long getLastModified() {
    return this.lastModified;
  }

  public SdkCloudSafe setLastModified(long lastModified) {
    this.lastModified = lastModified;
    setLastModifiedIsSet(true);
    return this;
  }

  public void unsetLastModified() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFIED_ISSET_ID);
  }

  /** Returns true if field lastModified is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModified() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTMODIFIED_ISSET_ID);
  }

  public void setLastModifiedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTMODIFIED_ISSET_ID, value);
  }

  public byte[] getSignature() {
    setSignature(org.apache.thrift.TBaseHelper.rightSize(signature));
    return signature == null ? null : signature.array();
  }

  public java.nio.ByteBuffer bufferForSignature() {
    return org.apache.thrift.TBaseHelper.copyBinary(signature);
  }

  public SdkCloudSafe setSignature(byte[] signature) {
    this.signature = signature == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(signature.clone());
    return this;
  }

  public SdkCloudSafe setSignature(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signature) {
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public SdkCloudSafe setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSharedUser() {
    return this.sharedUser;
  }

  public SdkCloudSafe setSharedUser(@org.apache.thrift.annotation.Nullable java.lang.String sharedUser) {
    this.sharedUser = sharedUser;
    return this;
  }

  public void unsetSharedUser() {
    this.sharedUser = null;
  }

  /** Returns true if field sharedUser is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedUser() {
    return this.sharedUser != null;
  }

  public void setSharedUserIsSet(boolean value) {
    if (!value) {
      this.sharedUser = null;
    }
  }

  public boolean isWriteAccess() {
    return this.writeAccess;
  }

  public SdkCloudSafe setWriteAccess(boolean writeAccess) {
    this.writeAccess = writeAccess;
    setWriteAccessIsSet(true);
    return this;
  }

  public void unsetWriteAccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITEACCESS_ISSET_ID);
  }

  /** Returns true if field writeAccess is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteAccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITEACCESS_ISSET_ID);
  }

  public void setWriteAccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITEACCESS_ISSET_ID, value);
  }

  public boolean isRestictDownload() {
    return this.restictDownload;
  }

  public SdkCloudSafe setRestictDownload(boolean restictDownload) {
    this.restictDownload = restictDownload;
    setRestictDownloadIsSet(true);
    return this;
  }

  public void unsetRestictDownload() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESTICTDOWNLOAD_ISSET_ID);
  }

  /** Returns true if field restictDownload is set (has been assigned a value) and false otherwise */
  public boolean isSetRestictDownload() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESTICTDOWNLOAD_ISSET_ID);
  }

  public void setRestictDownloadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESTICTDOWNLOAD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UNIQUE_KEY:
      if (value == null) {
        unsetUniqueKey();
      } else {
        setUniqueKey((SdkCloudSafeKey)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        if (value instanceof byte[]) {
          setContent((byte[])value);
        } else {
          setContent((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((java.lang.String)value);
      }
      break;

    case DISCARD_AFTER:
      if (value == null) {
        unsetDiscardAfter();
      } else {
        setDiscardAfter((java.lang.Long)value);
      }
      break;

    case LAST_MODIFIED:
      if (value == null) {
        unsetLastModified();
      } else {
        setLastModified((java.lang.Long)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        if (value instanceof byte[]) {
          setSignature((byte[])value);
        } else {
          setSignature((java.nio.ByteBuffer)value);
        }
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((java.lang.Long)value);
      }
      break;

    case SHARED_USER:
      if (value == null) {
        unsetSharedUser();
      } else {
        setSharedUser((java.lang.String)value);
      }
      break;

    case WRITE_ACCESS:
      if (value == null) {
        unsetWriteAccess();
      } else {
        setWriteAccess((java.lang.Boolean)value);
      }
      break;

    case RESTICT_DOWNLOAD:
      if (value == null) {
        unsetRestictDownload();
      } else {
        setRestictDownload((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIQUE_KEY:
      return getUniqueKey();

    case CONTENT:
      return getContent();

    case OPTIONS:
      return getOptions();

    case DISCARD_AFTER:
      return getDiscardAfter();

    case LAST_MODIFIED:
      return getLastModified();

    case SIGNATURE:
      return getSignature();

    case LENGTH:
      return getLength();

    case SHARED_USER:
      return getSharedUser();

    case WRITE_ACCESS:
      return isWriteAccess();

    case RESTICT_DOWNLOAD:
      return isRestictDownload();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UNIQUE_KEY:
      return isSetUniqueKey();
    case CONTENT:
      return isSetContent();
    case OPTIONS:
      return isSetOptions();
    case DISCARD_AFTER:
      return isSetDiscardAfter();
    case LAST_MODIFIED:
      return isSetLastModified();
    case SIGNATURE:
      return isSetSignature();
    case LENGTH:
      return isSetLength();
    case SHARED_USER:
      return isSetSharedUser();
    case WRITE_ACCESS:
      return isSetWriteAccess();
    case RESTICT_DOWNLOAD:
      return isSetRestictDownload();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SdkCloudSafe)
      return this.equals((SdkCloudSafe)that);
    return false;
  }

  public boolean equals(SdkCloudSafe that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uniqueKey = true && this.isSetUniqueKey();
    boolean that_present_uniqueKey = true && that.isSetUniqueKey();
    if (this_present_uniqueKey || that_present_uniqueKey) {
      if (!(this_present_uniqueKey && that_present_uniqueKey))
        return false;
      if (!this.uniqueKey.equals(that.uniqueKey))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_discardAfter = true;
    boolean that_present_discardAfter = true;
    if (this_present_discardAfter || that_present_discardAfter) {
      if (!(this_present_discardAfter && that_present_discardAfter))
        return false;
      if (this.discardAfter != that.discardAfter)
        return false;
    }

    boolean this_present_lastModified = true;
    boolean that_present_lastModified = true;
    if (this_present_lastModified || that_present_lastModified) {
      if (!(this_present_lastModified && that_present_lastModified))
        return false;
      if (this.lastModified != that.lastModified)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_sharedUser = true && this.isSetSharedUser();
    boolean that_present_sharedUser = true && that.isSetSharedUser();
    if (this_present_sharedUser || that_present_sharedUser) {
      if (!(this_present_sharedUser && that_present_sharedUser))
        return false;
      if (!this.sharedUser.equals(that.sharedUser))
        return false;
    }

    boolean this_present_writeAccess = true;
    boolean that_present_writeAccess = true;
    if (this_present_writeAccess || that_present_writeAccess) {
      if (!(this_present_writeAccess && that_present_writeAccess))
        return false;
      if (this.writeAccess != that.writeAccess)
        return false;
    }

    boolean this_present_restictDownload = true;
    boolean that_present_restictDownload = true;
    if (this_present_restictDownload || that_present_restictDownload) {
      if (!(this_present_restictDownload && that_present_restictDownload))
        return false;
      if (this.restictDownload != that.restictDownload)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUniqueKey()) ? 131071 : 524287);
    if (isSetUniqueKey())
      hashCode = hashCode * 8191 + uniqueKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
    if (isSetOptions())
      hashCode = hashCode * 8191 + options.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(discardAfter);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastModified);

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(length);

    hashCode = hashCode * 8191 + ((isSetSharedUser()) ? 131071 : 524287);
    if (isSetSharedUser())
      hashCode = hashCode * 8191 + sharedUser.hashCode();

    hashCode = hashCode * 8191 + ((writeAccess) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((restictDownload) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(SdkCloudSafe other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUniqueKey()).compareTo(other.isSetUniqueKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueKey, other.uniqueKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiscardAfter()).compareTo(other.isSetDiscardAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscardAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discardAfter, other.discardAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastModified()).compareTo(other.isSetLastModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModified, other.lastModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSharedUser()).compareTo(other.isSetSharedUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedUser, other.sharedUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteAccess()).compareTo(other.isSetWriteAccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteAccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeAccess, other.writeAccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRestictDownload()).compareTo(other.isSetRestictDownload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestictDownload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restictDownload, other.restictDownload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SdkCloudSafe(");
    boolean first = true;

    sb.append("uniqueKey:");
    if (this.uniqueKey == null) {
      sb.append("null");
    } else {
      sb.append(this.uniqueKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("discardAfter:");
    sb.append(this.discardAfter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModified:");
    sb.append(this.lastModified);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.signature, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharedUser:");
    if (this.sharedUser == null) {
      sb.append("null");
    } else {
      sb.append(this.sharedUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeAccess:");
    sb.append(this.writeAccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("restictDownload:");
    sb.append(this.restictDownload);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (uniqueKey != null) {
      uniqueKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SdkCloudSafeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SdkCloudSafeStandardScheme getScheme() {
      return new SdkCloudSafeStandardScheme();
    }
  }

  private static class SdkCloudSafeStandardScheme extends org.apache.thrift.scheme.StandardScheme<SdkCloudSafe> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SdkCloudSafe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIQUE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uniqueKey = new SdkCloudSafeKey();
              struct.uniqueKey.read(iprot);
              struct.setUniqueKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.options = iprot.readString();
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISCARD_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.discardAfter = iprot.readI64();
              struct.setDiscardAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModified = iprot.readI64();
              struct.setLastModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readBinary();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHARED_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sharedUser = iprot.readString();
              struct.setSharedUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WRITE_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.writeAccess = iprot.readBool();
              struct.setWriteAccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESTICT_DOWNLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.restictDownload = iprot.readBool();
              struct.setRestictDownloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SdkCloudSafe struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uniqueKey != null) {
        oprot.writeFieldBegin(UNIQUE_KEY_FIELD_DESC);
        struct.uniqueKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        oprot.writeString(struct.options);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISCARD_AFTER_FIELD_DESC);
      oprot.writeI64(struct.discardAfter);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFIED_FIELD_DESC);
      oprot.writeI64(struct.lastModified);
      oprot.writeFieldEnd();
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeBinary(struct.signature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      if (struct.sharedUser != null) {
        oprot.writeFieldBegin(SHARED_USER_FIELD_DESC);
        oprot.writeString(struct.sharedUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WRITE_ACCESS_FIELD_DESC);
      oprot.writeBool(struct.writeAccess);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESTICT_DOWNLOAD_FIELD_DESC);
      oprot.writeBool(struct.restictDownload);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SdkCloudSafeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SdkCloudSafeTupleScheme getScheme() {
      return new SdkCloudSafeTupleScheme();
    }
  }

  private static class SdkCloudSafeTupleScheme extends org.apache.thrift.scheme.TupleScheme<SdkCloudSafe> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SdkCloudSafe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUniqueKey()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetOptions()) {
        optionals.set(2);
      }
      if (struct.isSetDiscardAfter()) {
        optionals.set(3);
      }
      if (struct.isSetLastModified()) {
        optionals.set(4);
      }
      if (struct.isSetSignature()) {
        optionals.set(5);
      }
      if (struct.isSetLength()) {
        optionals.set(6);
      }
      if (struct.isSetSharedUser()) {
        optionals.set(7);
      }
      if (struct.isSetWriteAccess()) {
        optionals.set(8);
      }
      if (struct.isSetRestictDownload()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetUniqueKey()) {
        struct.uniqueKey.write(oprot);
      }
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
      if (struct.isSetOptions()) {
        oprot.writeString(struct.options);
      }
      if (struct.isSetDiscardAfter()) {
        oprot.writeI64(struct.discardAfter);
      }
      if (struct.isSetLastModified()) {
        oprot.writeI64(struct.lastModified);
      }
      if (struct.isSetSignature()) {
        oprot.writeBinary(struct.signature);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetSharedUser()) {
        oprot.writeString(struct.sharedUser);
      }
      if (struct.isSetWriteAccess()) {
        oprot.writeBool(struct.writeAccess);
      }
      if (struct.isSetRestictDownload()) {
        oprot.writeBool(struct.restictDownload);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SdkCloudSafe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.uniqueKey = new SdkCloudSafeKey();
        struct.uniqueKey.read(iprot);
        struct.setUniqueKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.options = iprot.readString();
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.discardAfter = iprot.readI64();
        struct.setDiscardAfterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastModified = iprot.readI64();
        struct.setLastModifiedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.signature = iprot.readBinary();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(6)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sharedUser = iprot.readString();
        struct.setSharedUserIsSet(true);
      }
      if (incoming.get(8)) {
        struct.writeAccess = iprot.readBool();
        struct.setWriteAccessIsSet(true);
      }
      if (incoming.get(9)) {
        struct.restictDownload = iprot.readBool();
        struct.setRestictDownloadIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

