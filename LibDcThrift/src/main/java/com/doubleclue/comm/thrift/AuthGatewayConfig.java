/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class AuthGatewayConfig implements org.apache.thrift.TBase<AuthGatewayConfig, AuthGatewayConfig._Fields>, java.io.Serializable, Cloneable, Comparable<AuthGatewayConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthGatewayConfig");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHARED_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedSecret", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TENANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthGatewayConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthGatewayConfigTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sharedSecret; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tenantName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SHARED_SECRET((short)2, "sharedSecret"),
    TENANT_NAME((short)3, "tenantName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SHARED_SECRET
          return SHARED_SECRET;
        case 3: // TENANT_NAME
          return TENANT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARED_SECRET, new org.apache.thrift.meta_data.FieldMetaData("sharedSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TENANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("tenantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthGatewayConfig.class, metaDataMap);
  }

  public AuthGatewayConfig() {
  }

  public AuthGatewayConfig(
    java.lang.String name,
    java.nio.ByteBuffer sharedSecret,
    java.lang.String tenantName)
  {
    this();
    this.name = name;
    this.sharedSecret = org.apache.thrift.TBaseHelper.copyBinary(sharedSecret);
    this.tenantName = tenantName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthGatewayConfig(AuthGatewayConfig other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSharedSecret()) {
      this.sharedSecret = org.apache.thrift.TBaseHelper.copyBinary(other.sharedSecret);
    }
    if (other.isSetTenantName()) {
      this.tenantName = other.tenantName;
    }
  }

  public AuthGatewayConfig deepCopy() {
    return new AuthGatewayConfig(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.sharedSecret = null;
    this.tenantName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public AuthGatewayConfig setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte[] getSharedSecret() {
    setSharedSecret(org.apache.thrift.TBaseHelper.rightSize(sharedSecret));
    return sharedSecret == null ? null : sharedSecret.array();
  }

  public java.nio.ByteBuffer bufferForSharedSecret() {
    return org.apache.thrift.TBaseHelper.copyBinary(sharedSecret);
  }

  public AuthGatewayConfig setSharedSecret(byte[] sharedSecret) {
    this.sharedSecret = sharedSecret == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(sharedSecret.clone());
    return this;
  }

  public AuthGatewayConfig setSharedSecret(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sharedSecret) {
    this.sharedSecret = org.apache.thrift.TBaseHelper.copyBinary(sharedSecret);
    return this;
  }

  public void unsetSharedSecret() {
    this.sharedSecret = null;
  }

  /** Returns true if field sharedSecret is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedSecret() {
    return this.sharedSecret != null;
  }

  public void setSharedSecretIsSet(boolean value) {
    if (!value) {
      this.sharedSecret = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTenantName() {
    return this.tenantName;
  }

  public AuthGatewayConfig setTenantName(@org.apache.thrift.annotation.Nullable java.lang.String tenantName) {
    this.tenantName = tenantName;
    return this;
  }

  public void unsetTenantName() {
    this.tenantName = null;
  }

  /** Returns true if field tenantName is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantName() {
    return this.tenantName != null;
  }

  public void setTenantNameIsSet(boolean value) {
    if (!value) {
      this.tenantName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case SHARED_SECRET:
      if (value == null) {
        unsetSharedSecret();
      } else {
        if (value instanceof byte[]) {
          setSharedSecret((byte[])value);
        } else {
          setSharedSecret((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TENANT_NAME:
      if (value == null) {
        unsetTenantName();
      } else {
        setTenantName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SHARED_SECRET:
      return getSharedSecret();

    case TENANT_NAME:
      return getTenantName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SHARED_SECRET:
      return isSetSharedSecret();
    case TENANT_NAME:
      return isSetTenantName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthGatewayConfig)
      return this.equals((AuthGatewayConfig)that);
    return false;
  }

  public boolean equals(AuthGatewayConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sharedSecret = true && this.isSetSharedSecret();
    boolean that_present_sharedSecret = true && that.isSetSharedSecret();
    if (this_present_sharedSecret || that_present_sharedSecret) {
      if (!(this_present_sharedSecret && that_present_sharedSecret))
        return false;
      if (!this.sharedSecret.equals(that.sharedSecret))
        return false;
    }

    boolean this_present_tenantName = true && this.isSetTenantName();
    boolean that_present_tenantName = true && that.isSetTenantName();
    if (this_present_tenantName || that_present_tenantName) {
      if (!(this_present_tenantName && that_present_tenantName))
        return false;
      if (!this.tenantName.equals(that.tenantName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSharedSecret()) ? 131071 : 524287);
    if (isSetSharedSecret())
      hashCode = hashCode * 8191 + sharedSecret.hashCode();

    hashCode = hashCode * 8191 + ((isSetTenantName()) ? 131071 : 524287);
    if (isSetTenantName())
      hashCode = hashCode * 8191 + tenantName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AuthGatewayConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSharedSecret()).compareTo(other.isSetSharedSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedSecret, other.sharedSecret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTenantName()).compareTo(other.isSetTenantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantName, other.tenantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthGatewayConfig(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharedSecret:");
    if (this.sharedSecret == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.sharedSecret, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenantName:");
    if (this.tenantName == null) {
      sb.append("null");
    } else {
      sb.append(this.tenantName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthGatewayConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthGatewayConfigStandardScheme getScheme() {
      return new AuthGatewayConfigStandardScheme();
    }
  }

  private static class AuthGatewayConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthGatewayConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthGatewayConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHARED_SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sharedSecret = iprot.readBinary();
              struct.setSharedSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TENANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantName = iprot.readString();
              struct.setTenantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthGatewayConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.sharedSecret != null) {
        oprot.writeFieldBegin(SHARED_SECRET_FIELD_DESC);
        oprot.writeBinary(struct.sharedSecret);
        oprot.writeFieldEnd();
      }
      if (struct.tenantName != null) {
        oprot.writeFieldBegin(TENANT_NAME_FIELD_DESC);
        oprot.writeString(struct.tenantName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthGatewayConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthGatewayConfigTupleScheme getScheme() {
      return new AuthGatewayConfigTupleScheme();
    }
  }

  private static class AuthGatewayConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthGatewayConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthGatewayConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSharedSecret()) {
        optionals.set(1);
      }
      if (struct.isSetTenantName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSharedSecret()) {
        oprot.writeBinary(struct.sharedSecret);
      }
      if (struct.isSetTenantName()) {
        oprot.writeString(struct.tenantName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthGatewayConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sharedSecret = iprot.readBinary();
        struct.setSharedSecretIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tenantName = iprot.readString();
        struct.setTenantNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

