/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class ServerSignatureResponse implements org.apache.thrift.TBase<ServerSignatureResponse, ServerSignatureResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ServerSignatureResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerSignatureResponse");

  private static final org.apache.thrift.protocol.TField SERVER_SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverSignature", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverVersion", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_REVERSE_PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("isReverseProxy", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DISPATCHED_FIELD_DESC = new org.apache.thrift.protocol.TField("isDispatched", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField CHALLENGE_FIELD_DESC = new org.apache.thrift.protocol.TField("challenge", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ServerSignatureResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ServerSignatureResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverSignature; // required
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.AppVersion serverVersion; // required
  public boolean isReverseProxy; // required
  public boolean isDispatched; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer challenge; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_SIGNATURE((short)1, "serverSignature"),
    SERVER_VERSION((short)2, "serverVersion"),
    IS_REVERSE_PROXY((short)3, "isReverseProxy"),
    IS_DISPATCHED((short)4, "isDispatched"),
    CHALLENGE((short)5, "challenge");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_SIGNATURE
          return SERVER_SIGNATURE;
        case 2: // SERVER_VERSION
          return SERVER_VERSION;
        case 3: // IS_REVERSE_PROXY
          return IS_REVERSE_PROXY;
        case 4: // IS_DISPATCHED
          return IS_DISPATCHED;
        case 5: // CHALLENGE
          return CHALLENGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREVERSEPROXY_ISSET_ID = 0;
  private static final int __ISDISPATCHED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CHALLENGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("serverSignature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SERVER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("serverVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.doubleclue.comm.thrift.AppVersion.class)));
    tmpMap.put(_Fields.IS_REVERSE_PROXY, new org.apache.thrift.meta_data.FieldMetaData("isReverseProxy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_DISPATCHED, new org.apache.thrift.meta_data.FieldMetaData("isDispatched", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHALLENGE, new org.apache.thrift.meta_data.FieldMetaData("challenge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerSignatureResponse.class, metaDataMap);
  }

  public ServerSignatureResponse() {
  }

  public ServerSignatureResponse(
    java.nio.ByteBuffer serverSignature,
    com.doubleclue.comm.thrift.AppVersion serverVersion,
    boolean isReverseProxy,
    boolean isDispatched)
  {
    this();
    this.serverSignature = org.apache.thrift.TBaseHelper.copyBinary(serverSignature);
    this.serverVersion = serverVersion;
    this.isReverseProxy = isReverseProxy;
    setIsReverseProxyIsSet(true);
    this.isDispatched = isDispatched;
    setIsDispatchedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerSignatureResponse(ServerSignatureResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServerSignature()) {
      this.serverSignature = org.apache.thrift.TBaseHelper.copyBinary(other.serverSignature);
    }
    if (other.isSetServerVersion()) {
      this.serverVersion = new com.doubleclue.comm.thrift.AppVersion(other.serverVersion);
    }
    this.isReverseProxy = other.isReverseProxy;
    this.isDispatched = other.isDispatched;
    if (other.isSetChallenge()) {
      this.challenge = org.apache.thrift.TBaseHelper.copyBinary(other.challenge);
    }
  }

  public ServerSignatureResponse deepCopy() {
    return new ServerSignatureResponse(this);
  }

  @Override
  public void clear() {
    this.serverSignature = null;
    this.serverVersion = null;
    setIsReverseProxyIsSet(false);
    this.isReverseProxy = false;
    setIsDispatchedIsSet(false);
    this.isDispatched = false;
    this.challenge = null;
  }

  public byte[] getServerSignature() {
    setServerSignature(org.apache.thrift.TBaseHelper.rightSize(serverSignature));
    return serverSignature == null ? null : serverSignature.array();
  }

  public java.nio.ByteBuffer bufferForServerSignature() {
    return org.apache.thrift.TBaseHelper.copyBinary(serverSignature);
  }

  public ServerSignatureResponse setServerSignature(byte[] serverSignature) {
    this.serverSignature = serverSignature == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(serverSignature.clone());
    return this;
  }

  public ServerSignatureResponse setServerSignature(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverSignature) {
    this.serverSignature = org.apache.thrift.TBaseHelper.copyBinary(serverSignature);
    return this;
  }

  public void unsetServerSignature() {
    this.serverSignature = null;
  }

  /** Returns true if field serverSignature is set (has been assigned a value) and false otherwise */
  public boolean isSetServerSignature() {
    return this.serverSignature != null;
  }

  public void setServerSignatureIsSet(boolean value) {
    if (!value) {
      this.serverSignature = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.AppVersion getServerVersion() {
    return this.serverVersion;
  }

  public ServerSignatureResponse setServerVersion(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.AppVersion serverVersion) {
    this.serverVersion = serverVersion;
    return this;
  }

  public void unsetServerVersion() {
    this.serverVersion = null;
  }

  /** Returns true if field serverVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetServerVersion() {
    return this.serverVersion != null;
  }

  public void setServerVersionIsSet(boolean value) {
    if (!value) {
      this.serverVersion = null;
    }
  }

  public boolean isIsReverseProxy() {
    return this.isReverseProxy;
  }

  public ServerSignatureResponse setIsReverseProxy(boolean isReverseProxy) {
    this.isReverseProxy = isReverseProxy;
    setIsReverseProxyIsSet(true);
    return this;
  }

  public void unsetIsReverseProxy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREVERSEPROXY_ISSET_ID);
  }

  /** Returns true if field isReverseProxy is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReverseProxy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREVERSEPROXY_ISSET_ID);
  }

  public void setIsReverseProxyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREVERSEPROXY_ISSET_ID, value);
  }

  public boolean isIsDispatched() {
    return this.isDispatched;
  }

  public ServerSignatureResponse setIsDispatched(boolean isDispatched) {
    this.isDispatched = isDispatched;
    setIsDispatchedIsSet(true);
    return this;
  }

  public void unsetIsDispatched() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDISPATCHED_ISSET_ID);
  }

  /** Returns true if field isDispatched is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDispatched() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDISPATCHED_ISSET_ID);
  }

  public void setIsDispatchedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDISPATCHED_ISSET_ID, value);
  }

  public byte[] getChallenge() {
    setChallenge(org.apache.thrift.TBaseHelper.rightSize(challenge));
    return challenge == null ? null : challenge.array();
  }

  public java.nio.ByteBuffer bufferForChallenge() {
    return org.apache.thrift.TBaseHelper.copyBinary(challenge);
  }

  public ServerSignatureResponse setChallenge(byte[] challenge) {
    this.challenge = challenge == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(challenge.clone());
    return this;
  }

  public ServerSignatureResponse setChallenge(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer challenge) {
    this.challenge = org.apache.thrift.TBaseHelper.copyBinary(challenge);
    return this;
  }

  public void unsetChallenge() {
    this.challenge = null;
  }

  /** Returns true if field challenge is set (has been assigned a value) and false otherwise */
  public boolean isSetChallenge() {
    return this.challenge != null;
  }

  public void setChallengeIsSet(boolean value) {
    if (!value) {
      this.challenge = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SERVER_SIGNATURE:
      if (value == null) {
        unsetServerSignature();
      } else {
        if (value instanceof byte[]) {
          setServerSignature((byte[])value);
        } else {
          setServerSignature((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SERVER_VERSION:
      if (value == null) {
        unsetServerVersion();
      } else {
        setServerVersion((com.doubleclue.comm.thrift.AppVersion)value);
      }
      break;

    case IS_REVERSE_PROXY:
      if (value == null) {
        unsetIsReverseProxy();
      } else {
        setIsReverseProxy((java.lang.Boolean)value);
      }
      break;

    case IS_DISPATCHED:
      if (value == null) {
        unsetIsDispatched();
      } else {
        setIsDispatched((java.lang.Boolean)value);
      }
      break;

    case CHALLENGE:
      if (value == null) {
        unsetChallenge();
      } else {
        if (value instanceof byte[]) {
          setChallenge((byte[])value);
        } else {
          setChallenge((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_SIGNATURE:
      return getServerSignature();

    case SERVER_VERSION:
      return getServerVersion();

    case IS_REVERSE_PROXY:
      return isIsReverseProxy();

    case IS_DISPATCHED:
      return isIsDispatched();

    case CHALLENGE:
      return getChallenge();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_SIGNATURE:
      return isSetServerSignature();
    case SERVER_VERSION:
      return isSetServerVersion();
    case IS_REVERSE_PROXY:
      return isSetIsReverseProxy();
    case IS_DISPATCHED:
      return isSetIsDispatched();
    case CHALLENGE:
      return isSetChallenge();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerSignatureResponse)
      return this.equals((ServerSignatureResponse)that);
    return false;
  }

  public boolean equals(ServerSignatureResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverSignature = true && this.isSetServerSignature();
    boolean that_present_serverSignature = true && that.isSetServerSignature();
    if (this_present_serverSignature || that_present_serverSignature) {
      if (!(this_present_serverSignature && that_present_serverSignature))
        return false;
      if (!this.serverSignature.equals(that.serverSignature))
        return false;
    }

    boolean this_present_serverVersion = true && this.isSetServerVersion();
    boolean that_present_serverVersion = true && that.isSetServerVersion();
    if (this_present_serverVersion || that_present_serverVersion) {
      if (!(this_present_serverVersion && that_present_serverVersion))
        return false;
      if (!this.serverVersion.equals(that.serverVersion))
        return false;
    }

    boolean this_present_isReverseProxy = true;
    boolean that_present_isReverseProxy = true;
    if (this_present_isReverseProxy || that_present_isReverseProxy) {
      if (!(this_present_isReverseProxy && that_present_isReverseProxy))
        return false;
      if (this.isReverseProxy != that.isReverseProxy)
        return false;
    }

    boolean this_present_isDispatched = true;
    boolean that_present_isDispatched = true;
    if (this_present_isDispatched || that_present_isDispatched) {
      if (!(this_present_isDispatched && that_present_isDispatched))
        return false;
      if (this.isDispatched != that.isDispatched)
        return false;
    }

    boolean this_present_challenge = true && this.isSetChallenge();
    boolean that_present_challenge = true && that.isSetChallenge();
    if (this_present_challenge || that_present_challenge) {
      if (!(this_present_challenge && that_present_challenge))
        return false;
      if (!this.challenge.equals(that.challenge))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServerSignature()) ? 131071 : 524287);
    if (isSetServerSignature())
      hashCode = hashCode * 8191 + serverSignature.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerVersion()) ? 131071 : 524287);
    if (isSetServerVersion())
      hashCode = hashCode * 8191 + serverVersion.hashCode();

    hashCode = hashCode * 8191 + ((isReverseProxy) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isDispatched) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetChallenge()) ? 131071 : 524287);
    if (isSetChallenge())
      hashCode = hashCode * 8191 + challenge.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ServerSignatureResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerSignature()).compareTo(other.isSetServerSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverSignature, other.serverSignature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServerVersion()).compareTo(other.isSetServerVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverVersion, other.serverVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsReverseProxy()).compareTo(other.isSetIsReverseProxy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReverseProxy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReverseProxy, other.isReverseProxy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDispatched()).compareTo(other.isSetIsDispatched());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDispatched()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDispatched, other.isDispatched);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChallenge()).compareTo(other.isSetChallenge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChallenge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.challenge, other.challenge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ServerSignatureResponse(");
    boolean first = true;

    sb.append("serverSignature:");
    if (this.serverSignature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serverSignature, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverVersion:");
    if (this.serverVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.serverVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReverseProxy:");
    sb.append(this.isReverseProxy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDispatched:");
    sb.append(this.isDispatched);
    first = false;
    if (isSetChallenge()) {
      if (!first) sb.append(", ");
      sb.append("challenge:");
      if (this.challenge == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.challenge, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (serverVersion != null) {
      serverVersion.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerSignatureResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServerSignatureResponseStandardScheme getScheme() {
      return new ServerSignatureResponseStandardScheme();
    }
  }

  private static class ServerSignatureResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ServerSignatureResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerSignatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverSignature = iprot.readBinary();
              struct.setServerSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.serverVersion = new com.doubleclue.comm.thrift.AppVersion();
              struct.serverVersion.read(iprot);
              struct.setServerVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_REVERSE_PROXY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReverseProxy = iprot.readBool();
              struct.setIsReverseProxyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DISPATCHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDispatched = iprot.readBool();
              struct.setIsDispatchedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHALLENGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.challenge = iprot.readBinary();
              struct.setChallengeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerSignatureResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverSignature != null) {
        oprot.writeFieldBegin(SERVER_SIGNATURE_FIELD_DESC);
        oprot.writeBinary(struct.serverSignature);
        oprot.writeFieldEnd();
      }
      if (struct.serverVersion != null) {
        oprot.writeFieldBegin(SERVER_VERSION_FIELD_DESC);
        struct.serverVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_REVERSE_PROXY_FIELD_DESC);
      oprot.writeBool(struct.isReverseProxy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DISPATCHED_FIELD_DESC);
      oprot.writeBool(struct.isDispatched);
      oprot.writeFieldEnd();
      if (struct.challenge != null) {
        if (struct.isSetChallenge()) {
          oprot.writeFieldBegin(CHALLENGE_FIELD_DESC);
          oprot.writeBinary(struct.challenge);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerSignatureResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServerSignatureResponseTupleScheme getScheme() {
      return new ServerSignatureResponseTupleScheme();
    }
  }

  private static class ServerSignatureResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ServerSignatureResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerSignatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetServerSignature()) {
        optionals.set(0);
      }
      if (struct.isSetServerVersion()) {
        optionals.set(1);
      }
      if (struct.isSetIsReverseProxy()) {
        optionals.set(2);
      }
      if (struct.isSetIsDispatched()) {
        optionals.set(3);
      }
      if (struct.isSetChallenge()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetServerSignature()) {
        oprot.writeBinary(struct.serverSignature);
      }
      if (struct.isSetServerVersion()) {
        struct.serverVersion.write(oprot);
      }
      if (struct.isSetIsReverseProxy()) {
        oprot.writeBool(struct.isReverseProxy);
      }
      if (struct.isSetIsDispatched()) {
        oprot.writeBool(struct.isDispatched);
      }
      if (struct.isSetChallenge()) {
        oprot.writeBinary(struct.challenge);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerSignatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.serverSignature = iprot.readBinary();
        struct.setServerSignatureIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverVersion = new com.doubleclue.comm.thrift.AppVersion();
        struct.serverVersion.read(iprot);
        struct.setServerVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isReverseProxy = iprot.readBool();
        struct.setIsReverseProxyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isDispatched = iprot.readBool();
        struct.setIsDispatchedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.challenge = iprot.readBinary();
        struct.setChallengeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

