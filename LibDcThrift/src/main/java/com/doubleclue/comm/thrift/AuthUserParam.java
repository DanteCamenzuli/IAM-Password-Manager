/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class AuthUserParam implements org.apache.thrift.TBase<AuthUserParam, AuthUserParam._Fields>, java.io.Serializable, Cloneable, Comparable<AuthUserParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthUserParam");

  private static final org.apache.thrift.protocol.TField AUTH_GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authGatewayId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTH_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("authMethod", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENC_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encPassword", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENC_PASSCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("encPasscode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SHARED_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedSecret", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UDID_FIELD_DESC = new org.apache.thrift.protocol.TField("udid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WORKSTATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("workstationName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PROPERTY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyMap", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthUserParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthUserParamTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String authGatewayId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String loginId; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.ThriftAuthMethod
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ThriftAuthMethod authMethod; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPassword; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPasscode; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sharedSecret; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String workstationName; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.ClientType
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ClientType clientType; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> propertyMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTH_GATEWAY_ID((short)1, "authGatewayId"),
    LOGIN_ID((short)2, "loginId"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.ThriftAuthMethod
     */
    AUTH_METHOD((short)3, "authMethod"),
    ENC_PASSWORD((short)4, "encPassword"),
    ENC_PASSCODE((short)5, "encPasscode"),
    SHARED_SECRET((short)6, "sharedSecret"),
    UDID((short)7, "udid"),
    WORKSTATION_NAME((short)8, "workstationName"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.ClientType
     */
    CLIENT_TYPE((short)9, "clientType"),
    PROPERTY_MAP((short)10, "propertyMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_GATEWAY_ID
          return AUTH_GATEWAY_ID;
        case 2: // LOGIN_ID
          return LOGIN_ID;
        case 3: // AUTH_METHOD
          return AUTH_METHOD;
        case 4: // ENC_PASSWORD
          return ENC_PASSWORD;
        case 5: // ENC_PASSCODE
          return ENC_PASSCODE;
        case 6: // SHARED_SECRET
          return SHARED_SECRET;
        case 7: // UDID
          return UDID;
        case 8: // WORKSTATION_NAME
          return WORKSTATION_NAME;
        case 9: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 10: // PROPERTY_MAP
          return PROPERTY_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData("authGatewayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_METHOD, new org.apache.thrift.meta_data.FieldMetaData("authMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.ThriftAuthMethod.class)));
    tmpMap.put(_Fields.ENC_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENC_PASSCODE, new org.apache.thrift.meta_data.FieldMetaData("encPasscode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SHARED_SECRET, new org.apache.thrift.meta_data.FieldMetaData("sharedSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.UDID, new org.apache.thrift.meta_data.FieldMetaData("udid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.WORKSTATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("workstationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.ClientType.class)));
    tmpMap.put(_Fields.PROPERTY_MAP, new org.apache.thrift.meta_data.FieldMetaData("propertyMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthUserParam.class, metaDataMap);
  }

  public AuthUserParam() {
  }

  public AuthUserParam(
    java.lang.String authGatewayId,
    java.lang.String loginId,
    com.doubleclue.comm.thrift.ThriftAuthMethod authMethod,
    java.nio.ByteBuffer encPassword,
    java.nio.ByteBuffer encPasscode,
    java.nio.ByteBuffer sharedSecret,
    java.nio.ByteBuffer udid,
    java.lang.String workstationName,
    com.doubleclue.comm.thrift.ClientType clientType,
    java.util.Map<java.lang.String,java.lang.String> propertyMap)
  {
    this();
    this.authGatewayId = authGatewayId;
    this.loginId = loginId;
    this.authMethod = authMethod;
    this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(encPassword);
    this.encPasscode = org.apache.thrift.TBaseHelper.copyBinary(encPasscode);
    this.sharedSecret = org.apache.thrift.TBaseHelper.copyBinary(sharedSecret);
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    this.workstationName = workstationName;
    this.clientType = clientType;
    this.propertyMap = propertyMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthUserParam(AuthUserParam other) {
    if (other.isSetAuthGatewayId()) {
      this.authGatewayId = other.authGatewayId;
    }
    if (other.isSetLoginId()) {
      this.loginId = other.loginId;
    }
    if (other.isSetAuthMethod()) {
      this.authMethod = other.authMethod;
    }
    if (other.isSetEncPassword()) {
      this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(other.encPassword);
    }
    if (other.isSetEncPasscode()) {
      this.encPasscode = org.apache.thrift.TBaseHelper.copyBinary(other.encPasscode);
    }
    if (other.isSetSharedSecret()) {
      this.sharedSecret = org.apache.thrift.TBaseHelper.copyBinary(other.sharedSecret);
    }
    if (other.isSetUdid()) {
      this.udid = org.apache.thrift.TBaseHelper.copyBinary(other.udid);
    }
    if (other.isSetWorkstationName()) {
      this.workstationName = other.workstationName;
    }
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetPropertyMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.propertyMap);
      this.propertyMap = __this__propertyMap;
    }
  }

  public AuthUserParam deepCopy() {
    return new AuthUserParam(this);
  }

  @Override
  public void clear() {
    this.authGatewayId = null;
    this.loginId = null;
    this.authMethod = null;
    this.encPassword = null;
    this.encPasscode = null;
    this.sharedSecret = null;
    this.udid = null;
    this.workstationName = null;
    this.clientType = null;
    this.propertyMap = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthGatewayId() {
    return this.authGatewayId;
  }

  public AuthUserParam setAuthGatewayId(@org.apache.thrift.annotation.Nullable java.lang.String authGatewayId) {
    this.authGatewayId = authGatewayId;
    return this;
  }

  public void unsetAuthGatewayId() {
    this.authGatewayId = null;
  }

  /** Returns true if field authGatewayId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthGatewayId() {
    return this.authGatewayId != null;
  }

  public void setAuthGatewayIdIsSet(boolean value) {
    if (!value) {
      this.authGatewayId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLoginId() {
    return this.loginId;
  }

  public AuthUserParam setLoginId(@org.apache.thrift.annotation.Nullable java.lang.String loginId) {
    this.loginId = loginId;
    return this;
  }

  public void unsetLoginId() {
    this.loginId = null;
  }

  /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginId() {
    return this.loginId != null;
  }

  public void setLoginIdIsSet(boolean value) {
    if (!value) {
      this.loginId = null;
    }
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.ThriftAuthMethod
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.ThriftAuthMethod getAuthMethod() {
    return this.authMethod;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.ThriftAuthMethod
   */
  public AuthUserParam setAuthMethod(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ThriftAuthMethod authMethod) {
    this.authMethod = authMethod;
    return this;
  }

  public void unsetAuthMethod() {
    this.authMethod = null;
  }

  /** Returns true if field authMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthMethod() {
    return this.authMethod != null;
  }

  public void setAuthMethodIsSet(boolean value) {
    if (!value) {
      this.authMethod = null;
    }
  }

  public byte[] getEncPassword() {
    setEncPassword(org.apache.thrift.TBaseHelper.rightSize(encPassword));
    return encPassword == null ? null : encPassword.array();
  }

  public java.nio.ByteBuffer bufferForEncPassword() {
    return org.apache.thrift.TBaseHelper.copyBinary(encPassword);
  }

  public AuthUserParam setEncPassword(byte[] encPassword) {
    this.encPassword = encPassword == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(encPassword.clone());
    return this;
  }

  public AuthUserParam setEncPassword(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPassword) {
    this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(encPassword);
    return this;
  }

  public void unsetEncPassword() {
    this.encPassword = null;
  }

  /** Returns true if field encPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetEncPassword() {
    return this.encPassword != null;
  }

  public void setEncPasswordIsSet(boolean value) {
    if (!value) {
      this.encPassword = null;
    }
  }

  public byte[] getEncPasscode() {
    setEncPasscode(org.apache.thrift.TBaseHelper.rightSize(encPasscode));
    return encPasscode == null ? null : encPasscode.array();
  }

  public java.nio.ByteBuffer bufferForEncPasscode() {
    return org.apache.thrift.TBaseHelper.copyBinary(encPasscode);
  }

  public AuthUserParam setEncPasscode(byte[] encPasscode) {
    this.encPasscode = encPasscode == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(encPasscode.clone());
    return this;
  }

  public AuthUserParam setEncPasscode(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPasscode) {
    this.encPasscode = org.apache.thrift.TBaseHelper.copyBinary(encPasscode);
    return this;
  }

  public void unsetEncPasscode() {
    this.encPasscode = null;
  }

  /** Returns true if field encPasscode is set (has been assigned a value) and false otherwise */
  public boolean isSetEncPasscode() {
    return this.encPasscode != null;
  }

  public void setEncPasscodeIsSet(boolean value) {
    if (!value) {
      this.encPasscode = null;
    }
  }

  public byte[] getSharedSecret() {
    setSharedSecret(org.apache.thrift.TBaseHelper.rightSize(sharedSecret));
    return sharedSecret == null ? null : sharedSecret.array();
  }

  public java.nio.ByteBuffer bufferForSharedSecret() {
    return org.apache.thrift.TBaseHelper.copyBinary(sharedSecret);
  }

  public AuthUserParam setSharedSecret(byte[] sharedSecret) {
    this.sharedSecret = sharedSecret == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(sharedSecret.clone());
    return this;
  }

  public AuthUserParam setSharedSecret(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sharedSecret) {
    this.sharedSecret = org.apache.thrift.TBaseHelper.copyBinary(sharedSecret);
    return this;
  }

  public void unsetSharedSecret() {
    this.sharedSecret = null;
  }

  /** Returns true if field sharedSecret is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedSecret() {
    return this.sharedSecret != null;
  }

  public void setSharedSecretIsSet(boolean value) {
    if (!value) {
      this.sharedSecret = null;
    }
  }

  public byte[] getUdid() {
    setUdid(org.apache.thrift.TBaseHelper.rightSize(udid));
    return udid == null ? null : udid.array();
  }

  public java.nio.ByteBuffer bufferForUdid() {
    return org.apache.thrift.TBaseHelper.copyBinary(udid);
  }

  public AuthUserParam setUdid(byte[] udid) {
    this.udid = udid == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(udid.clone());
    return this;
  }

  public AuthUserParam setUdid(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid) {
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    return this;
  }

  public void unsetUdid() {
    this.udid = null;
  }

  /** Returns true if field udid is set (has been assigned a value) and false otherwise */
  public boolean isSetUdid() {
    return this.udid != null;
  }

  public void setUdidIsSet(boolean value) {
    if (!value) {
      this.udid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWorkstationName() {
    return this.workstationName;
  }

  public AuthUserParam setWorkstationName(@org.apache.thrift.annotation.Nullable java.lang.String workstationName) {
    this.workstationName = workstationName;
    return this;
  }

  public void unsetWorkstationName() {
    this.workstationName = null;
  }

  /** Returns true if field workstationName is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkstationName() {
    return this.workstationName != null;
  }

  public void setWorkstationNameIsSet(boolean value) {
    if (!value) {
      this.workstationName = null;
    }
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.ClientType
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.ClientType getClientType() {
    return this.clientType;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.ClientType
   */
  public AuthUserParam setClientType(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ClientType clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public int getPropertyMapSize() {
    return (this.propertyMap == null) ? 0 : this.propertyMap.size();
  }

  public void putToPropertyMap(java.lang.String key, java.lang.String val) {
    if (this.propertyMap == null) {
      this.propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.propertyMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getPropertyMap() {
    return this.propertyMap;
  }

  public AuthUserParam setPropertyMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> propertyMap) {
    this.propertyMap = propertyMap;
    return this;
  }

  public void unsetPropertyMap() {
    this.propertyMap = null;
  }

  /** Returns true if field propertyMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyMap() {
    return this.propertyMap != null;
  }

  public void setPropertyMapIsSet(boolean value) {
    if (!value) {
      this.propertyMap = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AUTH_GATEWAY_ID:
      if (value == null) {
        unsetAuthGatewayId();
      } else {
        setAuthGatewayId((java.lang.String)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginId();
      } else {
        setLoginId((java.lang.String)value);
      }
      break;

    case AUTH_METHOD:
      if (value == null) {
        unsetAuthMethod();
      } else {
        setAuthMethod((com.doubleclue.comm.thrift.ThriftAuthMethod)value);
      }
      break;

    case ENC_PASSWORD:
      if (value == null) {
        unsetEncPassword();
      } else {
        if (value instanceof byte[]) {
          setEncPassword((byte[])value);
        } else {
          setEncPassword((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ENC_PASSCODE:
      if (value == null) {
        unsetEncPasscode();
      } else {
        if (value instanceof byte[]) {
          setEncPasscode((byte[])value);
        } else {
          setEncPasscode((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SHARED_SECRET:
      if (value == null) {
        unsetSharedSecret();
      } else {
        if (value instanceof byte[]) {
          setSharedSecret((byte[])value);
        } else {
          setSharedSecret((java.nio.ByteBuffer)value);
        }
      }
      break;

    case UDID:
      if (value == null) {
        unsetUdid();
      } else {
        if (value instanceof byte[]) {
          setUdid((byte[])value);
        } else {
          setUdid((java.nio.ByteBuffer)value);
        }
      }
      break;

    case WORKSTATION_NAME:
      if (value == null) {
        unsetWorkstationName();
      } else {
        setWorkstationName((java.lang.String)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((com.doubleclue.comm.thrift.ClientType)value);
      }
      break;

    case PROPERTY_MAP:
      if (value == null) {
        unsetPropertyMap();
      } else {
        setPropertyMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_GATEWAY_ID:
      return getAuthGatewayId();

    case LOGIN_ID:
      return getLoginId();

    case AUTH_METHOD:
      return getAuthMethod();

    case ENC_PASSWORD:
      return getEncPassword();

    case ENC_PASSCODE:
      return getEncPasscode();

    case SHARED_SECRET:
      return getSharedSecret();

    case UDID:
      return getUdid();

    case WORKSTATION_NAME:
      return getWorkstationName();

    case CLIENT_TYPE:
      return getClientType();

    case PROPERTY_MAP:
      return getPropertyMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AUTH_GATEWAY_ID:
      return isSetAuthGatewayId();
    case LOGIN_ID:
      return isSetLoginId();
    case AUTH_METHOD:
      return isSetAuthMethod();
    case ENC_PASSWORD:
      return isSetEncPassword();
    case ENC_PASSCODE:
      return isSetEncPasscode();
    case SHARED_SECRET:
      return isSetSharedSecret();
    case UDID:
      return isSetUdid();
    case WORKSTATION_NAME:
      return isSetWorkstationName();
    case CLIENT_TYPE:
      return isSetClientType();
    case PROPERTY_MAP:
      return isSetPropertyMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthUserParam)
      return this.equals((AuthUserParam)that);
    return false;
  }

  public boolean equals(AuthUserParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_authGatewayId = true && this.isSetAuthGatewayId();
    boolean that_present_authGatewayId = true && that.isSetAuthGatewayId();
    if (this_present_authGatewayId || that_present_authGatewayId) {
      if (!(this_present_authGatewayId && that_present_authGatewayId))
        return false;
      if (!this.authGatewayId.equals(that.authGatewayId))
        return false;
    }

    boolean this_present_loginId = true && this.isSetLoginId();
    boolean that_present_loginId = true && that.isSetLoginId();
    if (this_present_loginId || that_present_loginId) {
      if (!(this_present_loginId && that_present_loginId))
        return false;
      if (!this.loginId.equals(that.loginId))
        return false;
    }

    boolean this_present_authMethod = true && this.isSetAuthMethod();
    boolean that_present_authMethod = true && that.isSetAuthMethod();
    if (this_present_authMethod || that_present_authMethod) {
      if (!(this_present_authMethod && that_present_authMethod))
        return false;
      if (!this.authMethod.equals(that.authMethod))
        return false;
    }

    boolean this_present_encPassword = true && this.isSetEncPassword();
    boolean that_present_encPassword = true && that.isSetEncPassword();
    if (this_present_encPassword || that_present_encPassword) {
      if (!(this_present_encPassword && that_present_encPassword))
        return false;
      if (!this.encPassword.equals(that.encPassword))
        return false;
    }

    boolean this_present_encPasscode = true && this.isSetEncPasscode();
    boolean that_present_encPasscode = true && that.isSetEncPasscode();
    if (this_present_encPasscode || that_present_encPasscode) {
      if (!(this_present_encPasscode && that_present_encPasscode))
        return false;
      if (!this.encPasscode.equals(that.encPasscode))
        return false;
    }

    boolean this_present_sharedSecret = true && this.isSetSharedSecret();
    boolean that_present_sharedSecret = true && that.isSetSharedSecret();
    if (this_present_sharedSecret || that_present_sharedSecret) {
      if (!(this_present_sharedSecret && that_present_sharedSecret))
        return false;
      if (!this.sharedSecret.equals(that.sharedSecret))
        return false;
    }

    boolean this_present_udid = true && this.isSetUdid();
    boolean that_present_udid = true && that.isSetUdid();
    if (this_present_udid || that_present_udid) {
      if (!(this_present_udid && that_present_udid))
        return false;
      if (!this.udid.equals(that.udid))
        return false;
    }

    boolean this_present_workstationName = true && this.isSetWorkstationName();
    boolean that_present_workstationName = true && that.isSetWorkstationName();
    if (this_present_workstationName || that_present_workstationName) {
      if (!(this_present_workstationName && that_present_workstationName))
        return false;
      if (!this.workstationName.equals(that.workstationName))
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_propertyMap = true && this.isSetPropertyMap();
    boolean that_present_propertyMap = true && that.isSetPropertyMap();
    if (this_present_propertyMap || that_present_propertyMap) {
      if (!(this_present_propertyMap && that_present_propertyMap))
        return false;
      if (!this.propertyMap.equals(that.propertyMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAuthGatewayId()) ? 131071 : 524287);
    if (isSetAuthGatewayId())
      hashCode = hashCode * 8191 + authGatewayId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoginId()) ? 131071 : 524287);
    if (isSetLoginId())
      hashCode = hashCode * 8191 + loginId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthMethod()) ? 131071 : 524287);
    if (isSetAuthMethod())
      hashCode = hashCode * 8191 + authMethod.getValue();

    hashCode = hashCode * 8191 + ((isSetEncPassword()) ? 131071 : 524287);
    if (isSetEncPassword())
      hashCode = hashCode * 8191 + encPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetEncPasscode()) ? 131071 : 524287);
    if (isSetEncPasscode())
      hashCode = hashCode * 8191 + encPasscode.hashCode();

    hashCode = hashCode * 8191 + ((isSetSharedSecret()) ? 131071 : 524287);
    if (isSetSharedSecret())
      hashCode = hashCode * 8191 + sharedSecret.hashCode();

    hashCode = hashCode * 8191 + ((isSetUdid()) ? 131071 : 524287);
    if (isSetUdid())
      hashCode = hashCode * 8191 + udid.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkstationName()) ? 131071 : 524287);
    if (isSetWorkstationName())
      hashCode = hashCode * 8191 + workstationName.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientType()) ? 131071 : 524287);
    if (isSetClientType())
      hashCode = hashCode * 8191 + clientType.getValue();

    hashCode = hashCode * 8191 + ((isSetPropertyMap()) ? 131071 : 524287);
    if (isSetPropertyMap())
      hashCode = hashCode * 8191 + propertyMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AuthUserParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAuthGatewayId()).compareTo(other.isSetAuthGatewayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthGatewayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authGatewayId, other.authGatewayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthMethod()).compareTo(other.isSetAuthMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authMethod, other.authMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncPassword()).compareTo(other.isSetEncPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encPassword, other.encPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncPasscode()).compareTo(other.isSetEncPasscode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncPasscode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encPasscode, other.encPasscode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSharedSecret()).compareTo(other.isSetSharedSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedSecret, other.sharedSecret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUdid()).compareTo(other.isSetUdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udid, other.udid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWorkstationName()).compareTo(other.isSetWorkstationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkstationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workstationName, other.workstationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPropertyMap()).compareTo(other.isSetPropertyMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyMap, other.propertyMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthUserParam(");
    boolean first = true;

    sb.append("authGatewayId:");
    if (this.authGatewayId == null) {
      sb.append("null");
    } else {
      sb.append(this.authGatewayId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginId:");
    if (this.loginId == null) {
      sb.append("null");
    } else {
      sb.append(this.loginId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authMethod:");
    if (this.authMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.authMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encPassword:");
    if (this.encPassword == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.encPassword, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encPasscode:");
    if (this.encPasscode == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.encPasscode, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharedSecret:");
    if (this.sharedSecret == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.sharedSecret, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("udid:");
    if (this.udid == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.udid, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workstationName:");
    if (this.workstationName == null) {
      sb.append("null");
    } else {
      sb.append(this.workstationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientType:");
    if (this.clientType == null) {
      sb.append("null");
    } else {
      sb.append(this.clientType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyMap:");
    if (this.propertyMap == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthUserParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthUserParamStandardScheme getScheme() {
      return new AuthUserParamStandardScheme();
    }
  }

  private static class AuthUserParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthUserParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthUserParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_GATEWAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authGatewayId = iprot.readString();
              struct.setAuthGatewayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginId = iprot.readString();
              struct.setLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTH_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authMethod = com.doubleclue.comm.thrift.ThriftAuthMethod.findByValue(iprot.readI32());
              struct.setAuthMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENC_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encPassword = iprot.readBinary();
              struct.setEncPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENC_PASSCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encPasscode = iprot.readBinary();
              struct.setEncPasscodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHARED_SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sharedSecret = iprot.readBinary();
              struct.setSharedSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udid = iprot.readBinary();
              struct.setUdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WORKSTATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workstationName = iprot.readString();
              struct.setWorkstationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clientType = com.doubleclue.comm.thrift.ClientType.findByValue(iprot.readI32());
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROPERTY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.propertyMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setPropertyMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthUserParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authGatewayId != null) {
        oprot.writeFieldBegin(AUTH_GATEWAY_ID_FIELD_DESC);
        oprot.writeString(struct.authGatewayId);
        oprot.writeFieldEnd();
      }
      if (struct.loginId != null) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.loginId);
        oprot.writeFieldEnd();
      }
      if (struct.authMethod != null) {
        oprot.writeFieldBegin(AUTH_METHOD_FIELD_DESC);
        oprot.writeI32(struct.authMethod.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.encPassword != null) {
        oprot.writeFieldBegin(ENC_PASSWORD_FIELD_DESC);
        oprot.writeBinary(struct.encPassword);
        oprot.writeFieldEnd();
      }
      if (struct.encPasscode != null) {
        oprot.writeFieldBegin(ENC_PASSCODE_FIELD_DESC);
        oprot.writeBinary(struct.encPasscode);
        oprot.writeFieldEnd();
      }
      if (struct.sharedSecret != null) {
        oprot.writeFieldBegin(SHARED_SECRET_FIELD_DESC);
        oprot.writeBinary(struct.sharedSecret);
        oprot.writeFieldEnd();
      }
      if (struct.udid != null) {
        oprot.writeFieldBegin(UDID_FIELD_DESC);
        oprot.writeBinary(struct.udid);
        oprot.writeFieldEnd();
      }
      if (struct.workstationName != null) {
        oprot.writeFieldBegin(WORKSTATION_NAME_FIELD_DESC);
        oprot.writeString(struct.workstationName);
        oprot.writeFieldEnd();
      }
      if (struct.clientType != null) {
        oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.clientType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.propertyMap != null) {
        oprot.writeFieldBegin(PROPERTY_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.propertyMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.propertyMap.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthUserParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthUserParamTupleScheme getScheme() {
      return new AuthUserParamTupleScheme();
    }
  }

  private static class AuthUserParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthUserParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthUserParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuthGatewayId()) {
        optionals.set(0);
      }
      if (struct.isSetLoginId()) {
        optionals.set(1);
      }
      if (struct.isSetAuthMethod()) {
        optionals.set(2);
      }
      if (struct.isSetEncPassword()) {
        optionals.set(3);
      }
      if (struct.isSetEncPasscode()) {
        optionals.set(4);
      }
      if (struct.isSetSharedSecret()) {
        optionals.set(5);
      }
      if (struct.isSetUdid()) {
        optionals.set(6);
      }
      if (struct.isSetWorkstationName()) {
        optionals.set(7);
      }
      if (struct.isSetClientType()) {
        optionals.set(8);
      }
      if (struct.isSetPropertyMap()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetAuthGatewayId()) {
        oprot.writeString(struct.authGatewayId);
      }
      if (struct.isSetLoginId()) {
        oprot.writeString(struct.loginId);
      }
      if (struct.isSetAuthMethod()) {
        oprot.writeI32(struct.authMethod.getValue());
      }
      if (struct.isSetEncPassword()) {
        oprot.writeBinary(struct.encPassword);
      }
      if (struct.isSetEncPasscode()) {
        oprot.writeBinary(struct.encPasscode);
      }
      if (struct.isSetSharedSecret()) {
        oprot.writeBinary(struct.sharedSecret);
      }
      if (struct.isSetUdid()) {
        oprot.writeBinary(struct.udid);
      }
      if (struct.isSetWorkstationName()) {
        oprot.writeString(struct.workstationName);
      }
      if (struct.isSetClientType()) {
        oprot.writeI32(struct.clientType.getValue());
      }
      if (struct.isSetPropertyMap()) {
        {
          oprot.writeI32(struct.propertyMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.propertyMap.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthUserParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.authGatewayId = iprot.readString();
        struct.setAuthGatewayIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginId = iprot.readString();
        struct.setLoginIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authMethod = com.doubleclue.comm.thrift.ThriftAuthMethod.findByValue(iprot.readI32());
        struct.setAuthMethodIsSet(true);
      }
      if (incoming.get(3)) {
        struct.encPassword = iprot.readBinary();
        struct.setEncPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.encPasscode = iprot.readBinary();
        struct.setEncPasscodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sharedSecret = iprot.readBinary();
        struct.setSharedSecretIsSet(true);
      }
      if (incoming.get(6)) {
        struct.udid = iprot.readBinary();
        struct.setUdidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.workstationName = iprot.readString();
        struct.setWorkstationNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.clientType = com.doubleclue.comm.thrift.ClientType.findByValue(iprot.readI32());
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.propertyMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.propertyMap.put(_key7, _val8);
          }
        }
        struct.setPropertyMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

