/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class SignatureResponse implements org.apache.thrift.TBase<SignatureResponse, SignatureResponse._Fields>, java.io.Serializable, Cloneable, Comparable<SignatureResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SignatureResponse");

  private static final org.apache.thrift.protocol.TField RECONNECT_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("reconnectTicket", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEEP_ALIVE_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keepAliveSeconds", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SignatureResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SignatureResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer reconnectTicket; // required
  public int keepAliveSeconds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECONNECT_TICKET((short)1, "reconnectTicket"),
    KEEP_ALIVE_SECONDS((short)2, "keepAliveSeconds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECONNECT_TICKET
          return RECONNECT_TICKET;
        case 2: // KEEP_ALIVE_SECONDS
          return KEEP_ALIVE_SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEEPALIVESECONDS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECONNECT_TICKET, new org.apache.thrift.meta_data.FieldMetaData("reconnectTicket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.KEEP_ALIVE_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("keepAliveSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SignatureResponse.class, metaDataMap);
  }

  public SignatureResponse() {
  }

  public SignatureResponse(
    java.nio.ByteBuffer reconnectTicket,
    int keepAliveSeconds)
  {
    this();
    this.reconnectTicket = org.apache.thrift.TBaseHelper.copyBinary(reconnectTicket);
    this.keepAliveSeconds = keepAliveSeconds;
    setKeepAliveSecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SignatureResponse(SignatureResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReconnectTicket()) {
      this.reconnectTicket = org.apache.thrift.TBaseHelper.copyBinary(other.reconnectTicket);
    }
    this.keepAliveSeconds = other.keepAliveSeconds;
  }

  public SignatureResponse deepCopy() {
    return new SignatureResponse(this);
  }

  @Override
  public void clear() {
    this.reconnectTicket = null;
    setKeepAliveSecondsIsSet(false);
    this.keepAliveSeconds = 0;
  }

  public byte[] getReconnectTicket() {
    setReconnectTicket(org.apache.thrift.TBaseHelper.rightSize(reconnectTicket));
    return reconnectTicket == null ? null : reconnectTicket.array();
  }

  public java.nio.ByteBuffer bufferForReconnectTicket() {
    return org.apache.thrift.TBaseHelper.copyBinary(reconnectTicket);
  }

  public SignatureResponse setReconnectTicket(byte[] reconnectTicket) {
    this.reconnectTicket = reconnectTicket == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(reconnectTicket.clone());
    return this;
  }

  public SignatureResponse setReconnectTicket(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer reconnectTicket) {
    this.reconnectTicket = org.apache.thrift.TBaseHelper.copyBinary(reconnectTicket);
    return this;
  }

  public void unsetReconnectTicket() {
    this.reconnectTicket = null;
  }

  /** Returns true if field reconnectTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetReconnectTicket() {
    return this.reconnectTicket != null;
  }

  public void setReconnectTicketIsSet(boolean value) {
    if (!value) {
      this.reconnectTicket = null;
    }
  }

  public int getKeepAliveSeconds() {
    return this.keepAliveSeconds;
  }

  public SignatureResponse setKeepAliveSeconds(int keepAliveSeconds) {
    this.keepAliveSeconds = keepAliveSeconds;
    setKeepAliveSecondsIsSet(true);
    return this;
  }

  public void unsetKeepAliveSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEEPALIVESECONDS_ISSET_ID);
  }

  /** Returns true if field keepAliveSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetKeepAliveSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEEPALIVESECONDS_ISSET_ID);
  }

  public void setKeepAliveSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEEPALIVESECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RECONNECT_TICKET:
      if (value == null) {
        unsetReconnectTicket();
      } else {
        if (value instanceof byte[]) {
          setReconnectTicket((byte[])value);
        } else {
          setReconnectTicket((java.nio.ByteBuffer)value);
        }
      }
      break;

    case KEEP_ALIVE_SECONDS:
      if (value == null) {
        unsetKeepAliveSeconds();
      } else {
        setKeepAliveSeconds((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RECONNECT_TICKET:
      return getReconnectTicket();

    case KEEP_ALIVE_SECONDS:
      return getKeepAliveSeconds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RECONNECT_TICKET:
      return isSetReconnectTicket();
    case KEEP_ALIVE_SECONDS:
      return isSetKeepAliveSeconds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SignatureResponse)
      return this.equals((SignatureResponse)that);
    return false;
  }

  public boolean equals(SignatureResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_reconnectTicket = true && this.isSetReconnectTicket();
    boolean that_present_reconnectTicket = true && that.isSetReconnectTicket();
    if (this_present_reconnectTicket || that_present_reconnectTicket) {
      if (!(this_present_reconnectTicket && that_present_reconnectTicket))
        return false;
      if (!this.reconnectTicket.equals(that.reconnectTicket))
        return false;
    }

    boolean this_present_keepAliveSeconds = true;
    boolean that_present_keepAliveSeconds = true;
    if (this_present_keepAliveSeconds || that_present_keepAliveSeconds) {
      if (!(this_present_keepAliveSeconds && that_present_keepAliveSeconds))
        return false;
      if (this.keepAliveSeconds != that.keepAliveSeconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetReconnectTicket()) ? 131071 : 524287);
    if (isSetReconnectTicket())
      hashCode = hashCode * 8191 + reconnectTicket.hashCode();

    hashCode = hashCode * 8191 + keepAliveSeconds;

    return hashCode;
  }

  @Override
  public int compareTo(SignatureResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetReconnectTicket()).compareTo(other.isSetReconnectTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconnectTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconnectTicket, other.reconnectTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeepAliveSeconds()).compareTo(other.isSetKeepAliveSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeepAliveSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepAliveSeconds, other.keepAliveSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SignatureResponse(");
    boolean first = true;

    sb.append("reconnectTicket:");
    if (this.reconnectTicket == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.reconnectTicket, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keepAliveSeconds:");
    sb.append(this.keepAliveSeconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SignatureResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SignatureResponseStandardScheme getScheme() {
      return new SignatureResponseStandardScheme();
    }
  }

  private static class SignatureResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<SignatureResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SignatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECONNECT_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconnectTicket = iprot.readBinary();
              struct.setReconnectTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEEP_ALIVE_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keepAliveSeconds = iprot.readI32();
              struct.setKeepAliveSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SignatureResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reconnectTicket != null) {
        oprot.writeFieldBegin(RECONNECT_TICKET_FIELD_DESC);
        oprot.writeBinary(struct.reconnectTicket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEEP_ALIVE_SECONDS_FIELD_DESC);
      oprot.writeI32(struct.keepAliveSeconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SignatureResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SignatureResponseTupleScheme getScheme() {
      return new SignatureResponseTupleScheme();
    }
  }

  private static class SignatureResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<SignatureResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SignatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReconnectTicket()) {
        optionals.set(0);
      }
      if (struct.isSetKeepAliveSeconds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReconnectTicket()) {
        oprot.writeBinary(struct.reconnectTicket);
      }
      if (struct.isSetKeepAliveSeconds()) {
        oprot.writeI32(struct.keepAliveSeconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SignatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.reconnectTicket = iprot.readBinary();
        struct.setReconnectTicketIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keepAliveSeconds = iprot.readI32();
        struct.setKeepAliveSecondsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

