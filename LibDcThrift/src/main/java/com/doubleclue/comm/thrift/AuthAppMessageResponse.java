/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class AuthAppMessageResponse implements org.apache.thrift.TBase<AuthAppMessageResponse, AuthAppMessageResponse._Fields>, java.io.Serializable, Cloneable, Comparable<AuthAppMessageResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthAppMessageResponse");

  private static final org.apache.thrift.protocol.TField SUCCESFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("succesful", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_EXPIRES_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookieExpiresOn", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookie", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthAppMessageResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthAppMessageResponseTupleSchemeFactory();

  public boolean succesful; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String errorCode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String errorMessage; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer userKey; // optional
  public int sessionCookieExpiresOn; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sessionCookie; // optional
  public long msgId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUCCESFUL((short)1, "succesful"),
    ERROR_CODE((short)2, "errorCode"),
    ERROR_MESSAGE((short)3, "errorMessage"),
    USER_KEY((short)4, "userKey"),
    SESSION_COOKIE_EXPIRES_ON((short)5, "sessionCookieExpiresOn"),
    SESSION_COOKIE((short)6, "sessionCookie"),
    MSG_ID((short)7, "msgId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUCCESFUL
          return SUCCESFUL;
        case 2: // ERROR_CODE
          return ERROR_CODE;
        case 3: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 4: // USER_KEY
          return USER_KEY;
        case 5: // SESSION_COOKIE_EXPIRES_ON
          return SESSION_COOKIE_EXPIRES_ON;
        case 6: // SESSION_COOKIE
          return SESSION_COOKIE;
        case 7: // MSG_ID
          return MSG_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESFUL_ISSET_ID = 0;
  private static final int __SESSIONCOOKIEEXPIRESON_ISSET_ID = 1;
  private static final int __MSGID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ERROR_CODE,_Fields.ERROR_MESSAGE,_Fields.USER_KEY,_Fields.SESSION_COOKIE_EXPIRES_ON,_Fields.SESSION_COOKIE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESFUL, new org.apache.thrift.meta_data.FieldMetaData("succesful", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_KEY, new org.apache.thrift.meta_data.FieldMetaData("userKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SESSION_COOKIE_EXPIRES_ON, new org.apache.thrift.meta_data.FieldMetaData("sessionCookieExpiresOn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SESSION_COOKIE, new org.apache.thrift.meta_data.FieldMetaData("sessionCookie", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthAppMessageResponse.class, metaDataMap);
  }

  public AuthAppMessageResponse() {
  }

  public AuthAppMessageResponse(
    boolean succesful,
    long msgId)
  {
    this();
    this.succesful = succesful;
    setSuccesfulIsSet(true);
    this.msgId = msgId;
    setMsgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthAppMessageResponse(AuthAppMessageResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.succesful = other.succesful;
    if (other.isSetErrorCode()) {
      this.errorCode = other.errorCode;
    }
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetUserKey()) {
      this.userKey = org.apache.thrift.TBaseHelper.copyBinary(other.userKey);
    }
    this.sessionCookieExpiresOn = other.sessionCookieExpiresOn;
    if (other.isSetSessionCookie()) {
      this.sessionCookie = other.sessionCookie;
    }
    this.msgId = other.msgId;
  }

  public AuthAppMessageResponse deepCopy() {
    return new AuthAppMessageResponse(this);
  }

  @Override
  public void clear() {
    setSuccesfulIsSet(false);
    this.succesful = false;
    this.errorCode = null;
    this.errorMessage = null;
    this.userKey = null;
    setSessionCookieExpiresOnIsSet(false);
    this.sessionCookieExpiresOn = 0;
    this.sessionCookie = null;
    setMsgIdIsSet(false);
    this.msgId = 0;
  }

  public boolean isSuccesful() {
    return this.succesful;
  }

  public AuthAppMessageResponse setSuccesful(boolean succesful) {
    this.succesful = succesful;
    setSuccesfulIsSet(true);
    return this;
  }

  public void unsetSuccesful() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESFUL_ISSET_ID);
  }

  /** Returns true if field succesful is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccesful() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESFUL_ISSET_ID);
  }

  public void setSuccesfulIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESFUL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getErrorCode() {
    return this.errorCode;
  }

  public AuthAppMessageResponse setErrorCode(@org.apache.thrift.annotation.Nullable java.lang.String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public void unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return this.errorCode != null;
  }

  public void setErrorCodeIsSet(boolean value) {
    if (!value) {
      this.errorCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getErrorMessage() {
    return this.errorMessage;
  }

  public AuthAppMessageResponse setErrorMessage(@org.apache.thrift.annotation.Nullable java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  public byte[] getUserKey() {
    setUserKey(org.apache.thrift.TBaseHelper.rightSize(userKey));
    return userKey == null ? null : userKey.array();
  }

  public java.nio.ByteBuffer bufferForUserKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(userKey);
  }

  public AuthAppMessageResponse setUserKey(byte[] userKey) {
    this.userKey = userKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(userKey.clone());
    return this;
  }

  public AuthAppMessageResponse setUserKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer userKey) {
    this.userKey = org.apache.thrift.TBaseHelper.copyBinary(userKey);
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getSessionCookieExpiresOn() {
    return this.sessionCookieExpiresOn;
  }

  public AuthAppMessageResponse setSessionCookieExpiresOn(int sessionCookieExpiresOn) {
    this.sessionCookieExpiresOn = sessionCookieExpiresOn;
    setSessionCookieExpiresOnIsSet(true);
    return this;
  }

  public void unsetSessionCookieExpiresOn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  /** Returns true if field sessionCookieExpiresOn is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookieExpiresOn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  public void setSessionCookieExpiresOnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSessionCookie() {
    return this.sessionCookie;
  }

  public AuthAppMessageResponse setSessionCookie(@org.apache.thrift.annotation.Nullable java.lang.String sessionCookie) {
    this.sessionCookie = sessionCookie;
    return this;
  }

  public void unsetSessionCookie() {
    this.sessionCookie = null;
  }

  /** Returns true if field sessionCookie is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookie() {
    return this.sessionCookie != null;
  }

  public void setSessionCookieIsSet(boolean value) {
    if (!value) {
      this.sessionCookie = null;
    }
  }

  public long getMsgId() {
    return this.msgId;
  }

  public AuthAppMessageResponse setMsgId(long msgId) {
    this.msgId = msgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUCCESFUL:
      if (value == null) {
        unsetSuccesful();
      } else {
        setSuccesful((java.lang.Boolean)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((java.lang.String)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((java.lang.String)value);
      }
      break;

    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        if (value instanceof byte[]) {
          setUserKey((byte[])value);
        } else {
          setUserKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SESSION_COOKIE_EXPIRES_ON:
      if (value == null) {
        unsetSessionCookieExpiresOn();
      } else {
        setSessionCookieExpiresOn((java.lang.Integer)value);
      }
      break;

    case SESSION_COOKIE:
      if (value == null) {
        unsetSessionCookie();
      } else {
        setSessionCookie((java.lang.String)value);
      }
      break;

    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESFUL:
      return isSuccesful();

    case ERROR_CODE:
      return getErrorCode();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case USER_KEY:
      return getUserKey();

    case SESSION_COOKIE_EXPIRES_ON:
      return getSessionCookieExpiresOn();

    case SESSION_COOKIE:
      return getSessionCookie();

    case MSG_ID:
      return getMsgId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUCCESFUL:
      return isSetSuccesful();
    case ERROR_CODE:
      return isSetErrorCode();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case USER_KEY:
      return isSetUserKey();
    case SESSION_COOKIE_EXPIRES_ON:
      return isSetSessionCookieExpiresOn();
    case SESSION_COOKIE:
      return isSetSessionCookie();
    case MSG_ID:
      return isSetMsgId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthAppMessageResponse)
      return this.equals((AuthAppMessageResponse)that);
    return false;
  }

  public boolean equals(AuthAppMessageResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_succesful = true;
    boolean that_present_succesful = true;
    if (this_present_succesful || that_present_succesful) {
      if (!(this_present_succesful && that_present_succesful))
        return false;
      if (this.succesful != that.succesful)
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (!this.errorCode.equals(that.errorCode))
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }

    boolean this_present_sessionCookieExpiresOn = true && this.isSetSessionCookieExpiresOn();
    boolean that_present_sessionCookieExpiresOn = true && that.isSetSessionCookieExpiresOn();
    if (this_present_sessionCookieExpiresOn || that_present_sessionCookieExpiresOn) {
      if (!(this_present_sessionCookieExpiresOn && that_present_sessionCookieExpiresOn))
        return false;
      if (this.sessionCookieExpiresOn != that.sessionCookieExpiresOn)
        return false;
    }

    boolean this_present_sessionCookie = true && this.isSetSessionCookie();
    boolean that_present_sessionCookie = true && that.isSetSessionCookie();
    if (this_present_sessionCookie || that_present_sessionCookie) {
      if (!(this_present_sessionCookie && that_present_sessionCookie))
        return false;
      if (!this.sessionCookie.equals(that.sessionCookie))
        return false;
    }

    boolean this_present_msgId = true;
    boolean that_present_msgId = true;
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (this.msgId != that.msgId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((succesful) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetErrorCode()) ? 131071 : 524287);
    if (isSetErrorCode())
      hashCode = hashCode * 8191 + errorCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrorMessage()) ? 131071 : 524287);
    if (isSetErrorMessage())
      hashCode = hashCode * 8191 + errorMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserKey()) ? 131071 : 524287);
    if (isSetUserKey())
      hashCode = hashCode * 8191 + userKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionCookieExpiresOn()) ? 131071 : 524287);
    if (isSetSessionCookieExpiresOn())
      hashCode = hashCode * 8191 + sessionCookieExpiresOn;

    hashCode = hashCode * 8191 + ((isSetSessionCookie()) ? 131071 : 524287);
    if (isSetSessionCookie())
      hashCode = hashCode * 8191 + sessionCookie.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(msgId);

    return hashCode;
  }

  @Override
  public int compareTo(AuthAppMessageResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSuccesful()).compareTo(other.isSetSuccesful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccesful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.succesful, other.succesful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserKey()).compareTo(other.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userKey, other.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookieExpiresOn()).compareTo(other.isSetSessionCookieExpiresOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookieExpiresOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookieExpiresOn, other.sessionCookieExpiresOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookie()).compareTo(other.isSetSessionCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookie, other.sessionCookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthAppMessageResponse(");
    boolean first = true;

    sb.append("succesful:");
    sb.append(this.succesful);
    first = false;
    if (isSetErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
    }
    if (isSetErrorMessage()) {
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
    }
    if (isSetUserKey()) {
      if (!first) sb.append(", ");
      sb.append("userKey:");
      if (this.userKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.userKey, sb);
      }
      first = false;
    }
    if (isSetSessionCookieExpiresOn()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookieExpiresOn:");
      sb.append(this.sessionCookieExpiresOn);
      first = false;
    }
    if (isSetSessionCookie()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookie:");
      if (this.sessionCookie == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionCookie);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("msgId:");
    sb.append(this.msgId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthAppMessageResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthAppMessageResponseStandardScheme getScheme() {
      return new AuthAppMessageResponseStandardScheme();
    }
  }

  private static class AuthAppMessageResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthAppMessageResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthAppMessageResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCESFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.succesful = iprot.readBool();
              struct.setSuccesfulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorCode = iprot.readString();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userKey = iprot.readBinary();
              struct.setUserKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SESSION_COOKIE_EXPIRES_ON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionCookieExpiresOn = iprot.readI32();
              struct.setSessionCookieExpiresOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SESSION_COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionCookie = iprot.readString();
              struct.setSessionCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthAppMessageResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCESFUL_FIELD_DESC);
      oprot.writeBool(struct.succesful);
      oprot.writeFieldEnd();
      if (struct.errorCode != null) {
        if (struct.isSetErrorCode()) {
          oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
          oprot.writeString(struct.errorCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.errorMessage != null) {
        if (struct.isSetErrorMessage()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userKey != null) {
        if (struct.isSetUserKey()) {
          oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
          oprot.writeBinary(struct.userKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeFieldBegin(SESSION_COOKIE_EXPIRES_ON_FIELD_DESC);
        oprot.writeI32(struct.sessionCookieExpiresOn);
        oprot.writeFieldEnd();
      }
      if (struct.sessionCookie != null) {
        if (struct.isSetSessionCookie()) {
          oprot.writeFieldBegin(SESSION_COOKIE_FIELD_DESC);
          oprot.writeString(struct.sessionCookie);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msgId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthAppMessageResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthAppMessageResponseTupleScheme getScheme() {
      return new AuthAppMessageResponseTupleScheme();
    }
  }

  private static class AuthAppMessageResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthAppMessageResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthAppMessageResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSuccesful()) {
        optionals.set(0);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(1);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(2);
      }
      if (struct.isSetUserKey()) {
        optionals.set(3);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        optionals.set(4);
      }
      if (struct.isSetSessionCookie()) {
        optionals.set(5);
      }
      if (struct.isSetMsgId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSuccesful()) {
        oprot.writeBool(struct.succesful);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeString(struct.errorCode);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetUserKey()) {
        oprot.writeBinary(struct.userKey);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeI32(struct.sessionCookieExpiresOn);
      }
      if (struct.isSetSessionCookie()) {
        oprot.writeString(struct.sessionCookie);
      }
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.msgId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthAppMessageResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.succesful = iprot.readBool();
        struct.setSuccesfulIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorCode = iprot.readString();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userKey = iprot.readBinary();
        struct.setUserKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sessionCookieExpiresOn = iprot.readI32();
        struct.setSessionCookieExpiresOnIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sessionCookie = iprot.readString();
        struct.setSessionCookieIsSet(true);
      }
      if (incoming.get(6)) {
        struct.msgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

