/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class AppMessage implements org.apache.thrift.TBase<AppMessage, AppMessage._Fields>, java.io.Serializable, Cloneable, Comparable<AppMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppMessage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNITURE_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("signitureRequired", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField RESPONSE_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("responseRequired", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RESPONSE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTo", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppMessageTupleSchemeFactory();

  public long id; // required
  /**
   * 
   * @see MsgPriority
   */
  public @org.apache.thrift.annotation.Nullable MsgPriority priority; // required
  public int templateId; // required
  public boolean signitureRequired; // required
  public boolean responseRequired; // required
  public int responseTime; // required
  public long responseTo; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see MsgPriority
     */
    PRIORITY((short)2, "priority"),
    TEMPLATE_ID((short)3, "templateId"),
    SIGNITURE_REQUIRED((short)4, "signitureRequired"),
    RESPONSE_REQUIRED((short)5, "responseRequired"),
    RESPONSE_TIME((short)6, "responseTime"),
    RESPONSE_TO((short)7, "responseTo"),
    DATA((short)8, "data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRIORITY
          return PRIORITY;
        case 3: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 4: // SIGNITURE_REQUIRED
          return SIGNITURE_REQUIRED;
        case 5: // RESPONSE_REQUIRED
          return RESPONSE_REQUIRED;
        case 6: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 7: // RESPONSE_TO
          return RESPONSE_TO;
        case 8: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TEMPLATEID_ISSET_ID = 1;
  private static final int __SIGNITUREREQUIRED_ISSET_ID = 2;
  private static final int __RESPONSEREQUIRED_ISSET_ID = 3;
  private static final int __RESPONSETIME_ISSET_ID = 4;
  private static final int __RESPONSETO_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MsgPriority.class)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNITURE_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("signitureRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESPONSE_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("responseRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESPONSE_TO, new org.apache.thrift.meta_data.FieldMetaData("responseTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppMessage.class, metaDataMap);
  }

  public AppMessage() {
  }

  public AppMessage(
    long id,
    MsgPriority priority,
    int templateId,
    boolean signitureRequired,
    boolean responseRequired,
    int responseTime,
    long responseTo,
    java.util.Map<java.lang.String,java.lang.String> data)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.priority = priority;
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    this.signitureRequired = signitureRequired;
    setSignitureRequiredIsSet(true);
    this.responseRequired = responseRequired;
    setResponseRequiredIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.responseTo = responseTo;
    setResponseToIsSet(true);
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppMessage(AppMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    this.templateId = other.templateId;
    this.signitureRequired = other.signitureRequired;
    this.responseRequired = other.responseRequired;
    this.responseTime = other.responseTime;
    this.responseTo = other.responseTo;
    if (other.isSetData()) {
      java.util.Map<java.lang.String,java.lang.String> __this__data = new java.util.HashMap<java.lang.String,java.lang.String>(other.data);
      this.data = __this__data;
    }
  }

  public AppMessage deepCopy() {
    return new AppMessage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.priority = null;
    setTemplateIdIsSet(false);
    this.templateId = 0;
    setSignitureRequiredIsSet(false);
    this.signitureRequired = false;
    setResponseRequiredIsSet(false);
    this.responseRequired = false;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setResponseToIsSet(false);
    this.responseTo = 0;
    this.data = null;
  }

  public long getId() {
    return this.id;
  }

  public AppMessage setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see MsgPriority
   */
  @org.apache.thrift.annotation.Nullable
  public MsgPriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see MsgPriority
   */
  public AppMessage setPriority(@org.apache.thrift.annotation.Nullable MsgPriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public int getTemplateId() {
    return this.templateId;
  }

  public AppMessage setTemplateId(int templateId) {
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    return this;
  }

  public void unsetTemplateId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  public void setTemplateIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEMPLATEID_ISSET_ID, value);
  }

  public boolean isSignitureRequired() {
    return this.signitureRequired;
  }

  public AppMessage setSignitureRequired(boolean signitureRequired) {
    this.signitureRequired = signitureRequired;
    setSignitureRequiredIsSet(true);
    return this;
  }

  public void unsetSignitureRequired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGNITUREREQUIRED_ISSET_ID);
  }

  /** Returns true if field signitureRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetSignitureRequired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGNITUREREQUIRED_ISSET_ID);
  }

  public void setSignitureRequiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGNITUREREQUIRED_ISSET_ID, value);
  }

  public boolean isResponseRequired() {
    return this.responseRequired;
  }

  public AppMessage setResponseRequired(boolean responseRequired) {
    this.responseRequired = responseRequired;
    setResponseRequiredIsSet(true);
    return this;
  }

  public void unsetResponseRequired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSEREQUIRED_ISSET_ID);
  }

  /** Returns true if field responseRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseRequired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSEREQUIRED_ISSET_ID);
  }

  public void setResponseRequiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSEREQUIRED_ISSET_ID, value);
  }

  public int getResponseTime() {
    return this.responseTime;
  }

  public AppMessage setResponseTime(int responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getResponseTo() {
    return this.responseTo;
  }

  public AppMessage setResponseTo(long responseTo) {
    this.responseTo = responseTo;
    setResponseToIsSet(true);
    return this;
  }

  public void unsetResponseTo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETO_ISSET_ID);
  }

  /** Returns true if field responseTo is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETO_ISSET_ID);
  }

  public void setResponseToIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETO_ISSET_ID, value);
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public void putToData(java.lang.String key, java.lang.String val) {
    if (this.data == null) {
      this.data = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.data.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getData() {
    return this.data;
  }

  public AppMessage setData(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((MsgPriority)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((java.lang.Integer)value);
      }
      break;

    case SIGNITURE_REQUIRED:
      if (value == null) {
        unsetSignitureRequired();
      } else {
        setSignitureRequired((java.lang.Boolean)value);
      }
      break;

    case RESPONSE_REQUIRED:
      if (value == null) {
        unsetResponseRequired();
      } else {
        setResponseRequired((java.lang.Boolean)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Integer)value);
      }
      break;

    case RESPONSE_TO:
      if (value == null) {
        unsetResponseTo();
      } else {
        setResponseTo((java.lang.Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PRIORITY:
      return getPriority();

    case TEMPLATE_ID:
      return getTemplateId();

    case SIGNITURE_REQUIRED:
      return isSignitureRequired();

    case RESPONSE_REQUIRED:
      return isResponseRequired();

    case RESPONSE_TIME:
      return getResponseTime();

    case RESPONSE_TO:
      return getResponseTo();

    case DATA:
      return getData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRIORITY:
      return isSetPriority();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case SIGNITURE_REQUIRED:
      return isSetSignitureRequired();
    case RESPONSE_REQUIRED:
      return isSetResponseRequired();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case RESPONSE_TO:
      return isSetResponseTo();
    case DATA:
      return isSetData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AppMessage)
      return this.equals((AppMessage)that);
    return false;
  }

  public boolean equals(AppMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_templateId = true;
    boolean that_present_templateId = true;
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (this.templateId != that.templateId)
        return false;
    }

    boolean this_present_signitureRequired = true;
    boolean that_present_signitureRequired = true;
    if (this_present_signitureRequired || that_present_signitureRequired) {
      if (!(this_present_signitureRequired && that_present_signitureRequired))
        return false;
      if (this.signitureRequired != that.signitureRequired)
        return false;
    }

    boolean this_present_responseRequired = true;
    boolean that_present_responseRequired = true;
    if (this_present_responseRequired || that_present_responseRequired) {
      if (!(this_present_responseRequired && that_present_responseRequired))
        return false;
      if (this.responseRequired != that.responseRequired)
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_responseTo = true;
    boolean that_present_responseTo = true;
    if (this_present_responseTo || that_present_responseTo) {
      if (!(this_present_responseTo && that_present_responseTo))
        return false;
      if (this.responseTo != that.responseTo)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.getValue();

    hashCode = hashCode * 8191 + templateId;

    hashCode = hashCode * 8191 + ((signitureRequired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((responseRequired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + responseTime;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(responseTo);

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AppMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignitureRequired()).compareTo(other.isSetSignitureRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignitureRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signitureRequired, other.signitureRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseRequired()).compareTo(other.isSetResponseRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseRequired, other.responseRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseTime()).compareTo(other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseTo()).compareTo(other.isSetResponseTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTo, other.responseTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AppMessage(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    if (this.priority == null) {
      sb.append("null");
    } else {
      sb.append(this.priority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateId:");
    sb.append(this.templateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signitureRequired:");
    sb.append(this.signitureRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseRequired:");
    sb.append(this.responseRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseTo:");
    sb.append(this.responseTo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AppMessageStandardScheme getScheme() {
      return new AppMessageStandardScheme();
    }
  }

  private static class AppMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = com.doubleclue.comm.thrift.MsgPriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateId = iprot.readI32();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGNITURE_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.signitureRequired = iprot.readBool();
              struct.setSignitureRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESPONSE_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.responseRequired = iprot.readBool();
              struct.setResponseRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseTime = iprot.readI32();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESPONSE_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseTo = iprot.readI64();
              struct.setResponseToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.data = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map10.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key11;
                @org.apache.thrift.annotation.Nullable java.lang.String _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readString();
                  _val12 = iprot.readString();
                  struct.data.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.templateId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNITURE_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.signitureRequired);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.responseRequired);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI32(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESPONSE_TO_FIELD_DESC);
      oprot.writeI64(struct.responseTo);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.data.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.data.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AppMessageTupleScheme getScheme() {
      return new AppMessageTupleScheme();
    }
  }

  private static class AppMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPriority()) {
        optionals.set(1);
      }
      if (struct.isSetTemplateId()) {
        optionals.set(2);
      }
      if (struct.isSetSignitureRequired()) {
        optionals.set(3);
      }
      if (struct.isSetResponseRequired()) {
        optionals.set(4);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(5);
      }
      if (struct.isSetResponseTo()) {
        optionals.set(6);
      }
      if (struct.isSetData()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority.getValue());
      }
      if (struct.isSetTemplateId()) {
        oprot.writeI32(struct.templateId);
      }
      if (struct.isSetSignitureRequired()) {
        oprot.writeBool(struct.signitureRequired);
      }
      if (struct.isSetResponseRequired()) {
        oprot.writeBool(struct.responseRequired);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI32(struct.responseTime);
      }
      if (struct.isSetResponseTo()) {
        oprot.writeI64(struct.responseTo);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.data.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.priority = com.doubleclue.comm.thrift.MsgPriority.findByValue(iprot.readI32());
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.templateId = iprot.readI32();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.signitureRequired = iprot.readBool();
        struct.setSignitureRequiredIsSet(true);
      }
      if (incoming.get(4)) {
        struct.responseRequired = iprot.readBool();
        struct.setResponseRequiredIsSet(true);
      }
      if (incoming.get(5)) {
        struct.responseTime = iprot.readI32();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.responseTo = iprot.readI64();
        struct.setResponseToIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.data = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key17;
          @org.apache.thrift.annotation.Nullable java.lang.String _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readString();
            struct.data.put(_key17, _val18);
          }
        }
        struct.setDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

