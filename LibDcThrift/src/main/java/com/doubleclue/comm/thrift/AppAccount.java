/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class AppAccount implements org.apache.thrift.TBase<AppAccount, AppAccount._Fields>, java.io.Serializable, Cloneable, Comparable<AppAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppAccount");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TENANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REALM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realmName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FULL_QUALIFIED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullQualifiedName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_PUSH_NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("updatePushNotification", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField USING_REVERSE_PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("usingReverseProxy", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SETTINGS_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("settingsFileName", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppAccountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppAccountTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tenantName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String realmName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fullQualifiedName; // required
  public boolean updatePushNotification; // required
  public boolean usingReverseProxy; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String settingsFileName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    USER_NAME((short)2, "userName"),
    TENANT_NAME((short)3, "tenantName"),
    REALM_NAME((short)4, "realmName"),
    FULL_QUALIFIED_NAME((short)5, "fullQualifiedName"),
    UPDATE_PUSH_NOTIFICATION((short)6, "updatePushNotification"),
    USING_REVERSE_PROXY((short)7, "usingReverseProxy"),
    SETTINGS_FILE_NAME((short)8, "settingsFileName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // TENANT_NAME
          return TENANT_NAME;
        case 4: // REALM_NAME
          return REALM_NAME;
        case 5: // FULL_QUALIFIED_NAME
          return FULL_QUALIFIED_NAME;
        case 6: // UPDATE_PUSH_NOTIFICATION
          return UPDATE_PUSH_NOTIFICATION;
        case 7: // USING_REVERSE_PROXY
          return USING_REVERSE_PROXY;
        case 8: // SETTINGS_FILE_NAME
          return SETTINGS_FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATEPUSHNOTIFICATION_ISSET_ID = 0;
  private static final int __USINGREVERSEPROXY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("tenantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REALM_NAME, new org.apache.thrift.meta_data.FieldMetaData("realmName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_QUALIFIED_NAME, new org.apache.thrift.meta_data.FieldMetaData("fullQualifiedName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_PUSH_NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("updatePushNotification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USING_REVERSE_PROXY, new org.apache.thrift.meta_data.FieldMetaData("usingReverseProxy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SETTINGS_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("settingsFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppAccount.class, metaDataMap);
  }

  public AppAccount() {
  }

  public AppAccount(
    java.lang.String name,
    java.lang.String userName,
    java.lang.String tenantName,
    java.lang.String realmName,
    java.lang.String fullQualifiedName,
    boolean updatePushNotification,
    boolean usingReverseProxy,
    java.lang.String settingsFileName)
  {
    this();
    this.name = name;
    this.userName = userName;
    this.tenantName = tenantName;
    this.realmName = realmName;
    this.fullQualifiedName = fullQualifiedName;
    this.updatePushNotification = updatePushNotification;
    setUpdatePushNotificationIsSet(true);
    this.usingReverseProxy = usingReverseProxy;
    setUsingReverseProxyIsSet(true);
    this.settingsFileName = settingsFileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppAccount(AppAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetTenantName()) {
      this.tenantName = other.tenantName;
    }
    if (other.isSetRealmName()) {
      this.realmName = other.realmName;
    }
    if (other.isSetFullQualifiedName()) {
      this.fullQualifiedName = other.fullQualifiedName;
    }
    this.updatePushNotification = other.updatePushNotification;
    this.usingReverseProxy = other.usingReverseProxy;
    if (other.isSetSettingsFileName()) {
      this.settingsFileName = other.settingsFileName;
    }
  }

  public AppAccount deepCopy() {
    return new AppAccount(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.userName = null;
    this.tenantName = null;
    this.realmName = null;
    this.fullQualifiedName = null;
    setUpdatePushNotificationIsSet(false);
    this.updatePushNotification = false;
    setUsingReverseProxyIsSet(false);
    this.usingReverseProxy = false;
    this.settingsFileName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public AppAccount setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserName() {
    return this.userName;
  }

  public AppAccount setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTenantName() {
    return this.tenantName;
  }

  public AppAccount setTenantName(@org.apache.thrift.annotation.Nullable java.lang.String tenantName) {
    this.tenantName = tenantName;
    return this;
  }

  public void unsetTenantName() {
    this.tenantName = null;
  }

  /** Returns true if field tenantName is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantName() {
    return this.tenantName != null;
  }

  public void setTenantNameIsSet(boolean value) {
    if (!value) {
      this.tenantName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRealmName() {
    return this.realmName;
  }

  public AppAccount setRealmName(@org.apache.thrift.annotation.Nullable java.lang.String realmName) {
    this.realmName = realmName;
    return this;
  }

  public void unsetRealmName() {
    this.realmName = null;
  }

  /** Returns true if field realmName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealmName() {
    return this.realmName != null;
  }

  public void setRealmNameIsSet(boolean value) {
    if (!value) {
      this.realmName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFullQualifiedName() {
    return this.fullQualifiedName;
  }

  public AppAccount setFullQualifiedName(@org.apache.thrift.annotation.Nullable java.lang.String fullQualifiedName) {
    this.fullQualifiedName = fullQualifiedName;
    return this;
  }

  public void unsetFullQualifiedName() {
    this.fullQualifiedName = null;
  }

  /** Returns true if field fullQualifiedName is set (has been assigned a value) and false otherwise */
  public boolean isSetFullQualifiedName() {
    return this.fullQualifiedName != null;
  }

  public void setFullQualifiedNameIsSet(boolean value) {
    if (!value) {
      this.fullQualifiedName = null;
    }
  }

  public boolean isUpdatePushNotification() {
    return this.updatePushNotification;
  }

  public AppAccount setUpdatePushNotification(boolean updatePushNotification) {
    this.updatePushNotification = updatePushNotification;
    setUpdatePushNotificationIsSet(true);
    return this;
  }

  public void unsetUpdatePushNotification() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEPUSHNOTIFICATION_ISSET_ID);
  }

  /** Returns true if field updatePushNotification is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatePushNotification() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEPUSHNOTIFICATION_ISSET_ID);
  }

  public void setUpdatePushNotificationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEPUSHNOTIFICATION_ISSET_ID, value);
  }

  public boolean isUsingReverseProxy() {
    return this.usingReverseProxy;
  }

  public AppAccount setUsingReverseProxy(boolean usingReverseProxy) {
    this.usingReverseProxy = usingReverseProxy;
    setUsingReverseProxyIsSet(true);
    return this;
  }

  public void unsetUsingReverseProxy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USINGREVERSEPROXY_ISSET_ID);
  }

  /** Returns true if field usingReverseProxy is set (has been assigned a value) and false otherwise */
  public boolean isSetUsingReverseProxy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USINGREVERSEPROXY_ISSET_ID);
  }

  public void setUsingReverseProxyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USINGREVERSEPROXY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSettingsFileName() {
    return this.settingsFileName;
  }

  public AppAccount setSettingsFileName(@org.apache.thrift.annotation.Nullable java.lang.String settingsFileName) {
    this.settingsFileName = settingsFileName;
    return this;
  }

  public void unsetSettingsFileName() {
    this.settingsFileName = null;
  }

  /** Returns true if field settingsFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetSettingsFileName() {
    return this.settingsFileName != null;
  }

  public void setSettingsFileNameIsSet(boolean value) {
    if (!value) {
      this.settingsFileName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((java.lang.String)value);
      }
      break;

    case TENANT_NAME:
      if (value == null) {
        unsetTenantName();
      } else {
        setTenantName((java.lang.String)value);
      }
      break;

    case REALM_NAME:
      if (value == null) {
        unsetRealmName();
      } else {
        setRealmName((java.lang.String)value);
      }
      break;

    case FULL_QUALIFIED_NAME:
      if (value == null) {
        unsetFullQualifiedName();
      } else {
        setFullQualifiedName((java.lang.String)value);
      }
      break;

    case UPDATE_PUSH_NOTIFICATION:
      if (value == null) {
        unsetUpdatePushNotification();
      } else {
        setUpdatePushNotification((java.lang.Boolean)value);
      }
      break;

    case USING_REVERSE_PROXY:
      if (value == null) {
        unsetUsingReverseProxy();
      } else {
        setUsingReverseProxy((java.lang.Boolean)value);
      }
      break;

    case SETTINGS_FILE_NAME:
      if (value == null) {
        unsetSettingsFileName();
      } else {
        setSettingsFileName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case USER_NAME:
      return getUserName();

    case TENANT_NAME:
      return getTenantName();

    case REALM_NAME:
      return getRealmName();

    case FULL_QUALIFIED_NAME:
      return getFullQualifiedName();

    case UPDATE_PUSH_NOTIFICATION:
      return isUpdatePushNotification();

    case USING_REVERSE_PROXY:
      return isUsingReverseProxy();

    case SETTINGS_FILE_NAME:
      return getSettingsFileName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case USER_NAME:
      return isSetUserName();
    case TENANT_NAME:
      return isSetTenantName();
    case REALM_NAME:
      return isSetRealmName();
    case FULL_QUALIFIED_NAME:
      return isSetFullQualifiedName();
    case UPDATE_PUSH_NOTIFICATION:
      return isSetUpdatePushNotification();
    case USING_REVERSE_PROXY:
      return isSetUsingReverseProxy();
    case SETTINGS_FILE_NAME:
      return isSetSettingsFileName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AppAccount)
      return this.equals((AppAccount)that);
    return false;
  }

  public boolean equals(AppAccount that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_tenantName = true && this.isSetTenantName();
    boolean that_present_tenantName = true && that.isSetTenantName();
    if (this_present_tenantName || that_present_tenantName) {
      if (!(this_present_tenantName && that_present_tenantName))
        return false;
      if (!this.tenantName.equals(that.tenantName))
        return false;
    }

    boolean this_present_realmName = true && this.isSetRealmName();
    boolean that_present_realmName = true && that.isSetRealmName();
    if (this_present_realmName || that_present_realmName) {
      if (!(this_present_realmName && that_present_realmName))
        return false;
      if (!this.realmName.equals(that.realmName))
        return false;
    }

    boolean this_present_fullQualifiedName = true && this.isSetFullQualifiedName();
    boolean that_present_fullQualifiedName = true && that.isSetFullQualifiedName();
    if (this_present_fullQualifiedName || that_present_fullQualifiedName) {
      if (!(this_present_fullQualifiedName && that_present_fullQualifiedName))
        return false;
      if (!this.fullQualifiedName.equals(that.fullQualifiedName))
        return false;
    }

    boolean this_present_updatePushNotification = true;
    boolean that_present_updatePushNotification = true;
    if (this_present_updatePushNotification || that_present_updatePushNotification) {
      if (!(this_present_updatePushNotification && that_present_updatePushNotification))
        return false;
      if (this.updatePushNotification != that.updatePushNotification)
        return false;
    }

    boolean this_present_usingReverseProxy = true;
    boolean that_present_usingReverseProxy = true;
    if (this_present_usingReverseProxy || that_present_usingReverseProxy) {
      if (!(this_present_usingReverseProxy && that_present_usingReverseProxy))
        return false;
      if (this.usingReverseProxy != that.usingReverseProxy)
        return false;
    }

    boolean this_present_settingsFileName = true && this.isSetSettingsFileName();
    boolean that_present_settingsFileName = true && that.isSetSettingsFileName();
    if (this_present_settingsFileName || that_present_settingsFileName) {
      if (!(this_present_settingsFileName && that_present_settingsFileName))
        return false;
      if (!this.settingsFileName.equals(that.settingsFileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
    if (isSetUserName())
      hashCode = hashCode * 8191 + userName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTenantName()) ? 131071 : 524287);
    if (isSetTenantName())
      hashCode = hashCode * 8191 + tenantName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRealmName()) ? 131071 : 524287);
    if (isSetRealmName())
      hashCode = hashCode * 8191 + realmName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFullQualifiedName()) ? 131071 : 524287);
    if (isSetFullQualifiedName())
      hashCode = hashCode * 8191 + fullQualifiedName.hashCode();

    hashCode = hashCode * 8191 + ((updatePushNotification) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((usingReverseProxy) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSettingsFileName()) ? 131071 : 524287);
    if (isSetSettingsFileName())
      hashCode = hashCode * 8191 + settingsFileName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AppAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTenantName()).compareTo(other.isSetTenantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantName, other.tenantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealmName()).compareTo(other.isSetRealmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realmName, other.realmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFullQualifiedName()).compareTo(other.isSetFullQualifiedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullQualifiedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullQualifiedName, other.fullQualifiedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatePushNotification()).compareTo(other.isSetUpdatePushNotification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatePushNotification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatePushNotification, other.updatePushNotification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsingReverseProxy()).compareTo(other.isSetUsingReverseProxy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsingReverseProxy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usingReverseProxy, other.usingReverseProxy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSettingsFileName()).compareTo(other.isSetSettingsFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettingsFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settingsFileName, other.settingsFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AppAccount(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenantName:");
    if (this.tenantName == null) {
      sb.append("null");
    } else {
      sb.append(this.tenantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realmName:");
    if (this.realmName == null) {
      sb.append("null");
    } else {
      sb.append(this.realmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullQualifiedName:");
    if (this.fullQualifiedName == null) {
      sb.append("null");
    } else {
      sb.append(this.fullQualifiedName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatePushNotification:");
    sb.append(this.updatePushNotification);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usingReverseProxy:");
    sb.append(this.usingReverseProxy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settingsFileName:");
    if (this.settingsFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.settingsFileName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppAccountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AppAccountStandardScheme getScheme() {
      return new AppAccountStandardScheme();
    }
  }

  private static class AppAccountStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TENANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantName = iprot.readString();
              struct.setTenantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REALM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realmName = iprot.readString();
              struct.setRealmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FULL_QUALIFIED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullQualifiedName = iprot.readString();
              struct.setFullQualifiedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_PUSH_NOTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.updatePushNotification = iprot.readBool();
              struct.setUpdatePushNotificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USING_REVERSE_PROXY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.usingReverseProxy = iprot.readBool();
              struct.setUsingReverseProxyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SETTINGS_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settingsFileName = iprot.readString();
              struct.setSettingsFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.tenantName != null) {
        oprot.writeFieldBegin(TENANT_NAME_FIELD_DESC);
        oprot.writeString(struct.tenantName);
        oprot.writeFieldEnd();
      }
      if (struct.realmName != null) {
        oprot.writeFieldBegin(REALM_NAME_FIELD_DESC);
        oprot.writeString(struct.realmName);
        oprot.writeFieldEnd();
      }
      if (struct.fullQualifiedName != null) {
        oprot.writeFieldBegin(FULL_QUALIFIED_NAME_FIELD_DESC);
        oprot.writeString(struct.fullQualifiedName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_PUSH_NOTIFICATION_FIELD_DESC);
      oprot.writeBool(struct.updatePushNotification);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USING_REVERSE_PROXY_FIELD_DESC);
      oprot.writeBool(struct.usingReverseProxy);
      oprot.writeFieldEnd();
      if (struct.settingsFileName != null) {
        oprot.writeFieldBegin(SETTINGS_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.settingsFileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppAccountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AppAccountTupleScheme getScheme() {
      return new AppAccountTupleScheme();
    }
  }

  private static class AppAccountTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetTenantName()) {
        optionals.set(2);
      }
      if (struct.isSetRealmName()) {
        optionals.set(3);
      }
      if (struct.isSetFullQualifiedName()) {
        optionals.set(4);
      }
      if (struct.isSetUpdatePushNotification()) {
        optionals.set(5);
      }
      if (struct.isSetUsingReverseProxy()) {
        optionals.set(6);
      }
      if (struct.isSetSettingsFileName()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetTenantName()) {
        oprot.writeString(struct.tenantName);
      }
      if (struct.isSetRealmName()) {
        oprot.writeString(struct.realmName);
      }
      if (struct.isSetFullQualifiedName()) {
        oprot.writeString(struct.fullQualifiedName);
      }
      if (struct.isSetUpdatePushNotification()) {
        oprot.writeBool(struct.updatePushNotification);
      }
      if (struct.isSetUsingReverseProxy()) {
        oprot.writeBool(struct.usingReverseProxy);
      }
      if (struct.isSetSettingsFileName()) {
        oprot.writeString(struct.settingsFileName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tenantName = iprot.readString();
        struct.setTenantNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.realmName = iprot.readString();
        struct.setRealmNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fullQualifiedName = iprot.readString();
        struct.setFullQualifiedNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updatePushNotification = iprot.readBool();
        struct.setUpdatePushNotificationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.usingReverseProxy = iprot.readBool();
        struct.setUsingReverseProxyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.settingsFileName = iprot.readString();
        struct.setSettingsFileNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

