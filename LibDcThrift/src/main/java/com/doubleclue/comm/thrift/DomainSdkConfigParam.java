/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class DomainSdkConfigParam implements org.apache.thrift.TBase<DomainSdkConfigParam, DomainSdkConfigParam._Fields>, java.io.Serializable, Cloneable, Comparable<DomainSdkConfigParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DomainSdkConfigParam");

  private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACTIVATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("activationCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DISPATCHER_SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("dispatcherSignature", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DomainSdkConfigParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DomainSdkConfigParamTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String domainName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String activationCode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String userId; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer dispatcherSignature; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOMAIN_NAME((short)1, "domainName"),
    ACTIVATION_CODE((short)2, "activationCode"),
    USER_ID((short)3, "userId"),
    DISPATCHER_SIGNATURE((short)4, "dispatcherSignature");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN_NAME
          return DOMAIN_NAME;
        case 2: // ACTIVATION_CODE
          return ACTIVATION_CODE;
        case 3: // USER_ID
          return USER_ID;
        case 4: // DISPATCHER_SIGNATURE
          return DISPATCHER_SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DISPATCHER_SIGNATURE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("activationCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPATCHER_SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("dispatcherSignature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DomainSdkConfigParam.class, metaDataMap);
  }

  public DomainSdkConfigParam() {
  }

  public DomainSdkConfigParam(
    java.lang.String domainName,
    java.lang.String activationCode,
    java.lang.String userId)
  {
    this();
    this.domainName = domainName;
    this.activationCode = activationCode;
    this.userId = userId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DomainSdkConfigParam(DomainSdkConfigParam other) {
    if (other.isSetDomainName()) {
      this.domainName = other.domainName;
    }
    if (other.isSetActivationCode()) {
      this.activationCode = other.activationCode;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetDispatcherSignature()) {
      this.dispatcherSignature = org.apache.thrift.TBaseHelper.copyBinary(other.dispatcherSignature);
    }
  }

  public DomainSdkConfigParam deepCopy() {
    return new DomainSdkConfigParam(this);
  }

  @Override
  public void clear() {
    this.domainName = null;
    this.activationCode = null;
    this.userId = null;
    this.dispatcherSignature = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDomainName() {
    return this.domainName;
  }

  public DomainSdkConfigParam setDomainName(@org.apache.thrift.annotation.Nullable java.lang.String domainName) {
    this.domainName = domainName;
    return this;
  }

  public void unsetDomainName() {
    this.domainName = null;
  }

  /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainName() {
    return this.domainName != null;
  }

  public void setDomainNameIsSet(boolean value) {
    if (!value) {
      this.domainName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getActivationCode() {
    return this.activationCode;
  }

  public DomainSdkConfigParam setActivationCode(@org.apache.thrift.annotation.Nullable java.lang.String activationCode) {
    this.activationCode = activationCode;
    return this;
  }

  public void unsetActivationCode() {
    this.activationCode = null;
  }

  /** Returns true if field activationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetActivationCode() {
    return this.activationCode != null;
  }

  public void setActivationCodeIsSet(boolean value) {
    if (!value) {
      this.activationCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserId() {
    return this.userId;
  }

  public DomainSdkConfigParam setUserId(@org.apache.thrift.annotation.Nullable java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public byte[] getDispatcherSignature() {
    setDispatcherSignature(org.apache.thrift.TBaseHelper.rightSize(dispatcherSignature));
    return dispatcherSignature == null ? null : dispatcherSignature.array();
  }

  public java.nio.ByteBuffer bufferForDispatcherSignature() {
    return org.apache.thrift.TBaseHelper.copyBinary(dispatcherSignature);
  }

  public DomainSdkConfigParam setDispatcherSignature(byte[] dispatcherSignature) {
    this.dispatcherSignature = dispatcherSignature == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(dispatcherSignature.clone());
    return this;
  }

  public DomainSdkConfigParam setDispatcherSignature(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer dispatcherSignature) {
    this.dispatcherSignature = org.apache.thrift.TBaseHelper.copyBinary(dispatcherSignature);
    return this;
  }

  public void unsetDispatcherSignature() {
    this.dispatcherSignature = null;
  }

  /** Returns true if field dispatcherSignature is set (has been assigned a value) and false otherwise */
  public boolean isSetDispatcherSignature() {
    return this.dispatcherSignature != null;
  }

  public void setDispatcherSignatureIsSet(boolean value) {
    if (!value) {
      this.dispatcherSignature = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DOMAIN_NAME:
      if (value == null) {
        unsetDomainName();
      } else {
        setDomainName((java.lang.String)value);
      }
      break;

    case ACTIVATION_CODE:
      if (value == null) {
        unsetActivationCode();
      } else {
        setActivationCode((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case DISPATCHER_SIGNATURE:
      if (value == null) {
        unsetDispatcherSignature();
      } else {
        if (value instanceof byte[]) {
          setDispatcherSignature((byte[])value);
        } else {
          setDispatcherSignature((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN_NAME:
      return getDomainName();

    case ACTIVATION_CODE:
      return getActivationCode();

    case USER_ID:
      return getUserId();

    case DISPATCHER_SIGNATURE:
      return getDispatcherSignature();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN_NAME:
      return isSetDomainName();
    case ACTIVATION_CODE:
      return isSetActivationCode();
    case USER_ID:
      return isSetUserId();
    case DISPATCHER_SIGNATURE:
      return isSetDispatcherSignature();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DomainSdkConfigParam)
      return this.equals((DomainSdkConfigParam)that);
    return false;
  }

  public boolean equals(DomainSdkConfigParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_domainName = true && this.isSetDomainName();
    boolean that_present_domainName = true && that.isSetDomainName();
    if (this_present_domainName || that_present_domainName) {
      if (!(this_present_domainName && that_present_domainName))
        return false;
      if (!this.domainName.equals(that.domainName))
        return false;
    }

    boolean this_present_activationCode = true && this.isSetActivationCode();
    boolean that_present_activationCode = true && that.isSetActivationCode();
    if (this_present_activationCode || that_present_activationCode) {
      if (!(this_present_activationCode && that_present_activationCode))
        return false;
      if (!this.activationCode.equals(that.activationCode))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_dispatcherSignature = true && this.isSetDispatcherSignature();
    boolean that_present_dispatcherSignature = true && that.isSetDispatcherSignature();
    if (this_present_dispatcherSignature || that_present_dispatcherSignature) {
      if (!(this_present_dispatcherSignature && that_present_dispatcherSignature))
        return false;
      if (!this.dispatcherSignature.equals(that.dispatcherSignature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDomainName()) ? 131071 : 524287);
    if (isSetDomainName())
      hashCode = hashCode * 8191 + domainName.hashCode();

    hashCode = hashCode * 8191 + ((isSetActivationCode()) ? 131071 : 524287);
    if (isSetActivationCode())
      hashCode = hashCode * 8191 + activationCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDispatcherSignature()) ? 131071 : 524287);
    if (isSetDispatcherSignature())
      hashCode = hashCode * 8191 + dispatcherSignature.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DomainSdkConfigParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivationCode()).compareTo(other.isSetActivationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activationCode, other.activationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDispatcherSignature()).compareTo(other.isSetDispatcherSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDispatcherSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dispatcherSignature, other.dispatcherSignature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DomainSdkConfigParam(");
    boolean first = true;

    sb.append("domainName:");
    if (this.domainName == null) {
      sb.append("null");
    } else {
      sb.append(this.domainName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activationCode:");
    if (this.activationCode == null) {
      sb.append("null");
    } else {
      sb.append(this.activationCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (isSetDispatcherSignature()) {
      if (!first) sb.append(", ");
      sb.append("dispatcherSignature:");
      if (this.dispatcherSignature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.dispatcherSignature, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DomainSdkConfigParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DomainSdkConfigParamStandardScheme getScheme() {
      return new DomainSdkConfigParamStandardScheme();
    }
  }

  private static class DomainSdkConfigParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<DomainSdkConfigParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DomainSdkConfigParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainName = iprot.readString();
              struct.setDomainNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTIVATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activationCode = iprot.readString();
              struct.setActivationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISPATCHER_SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dispatcherSignature = iprot.readBinary();
              struct.setDispatcherSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DomainSdkConfigParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.domainName != null) {
        oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
        oprot.writeString(struct.domainName);
        oprot.writeFieldEnd();
      }
      if (struct.activationCode != null) {
        oprot.writeFieldBegin(ACTIVATION_CODE_FIELD_DESC);
        oprot.writeString(struct.activationCode);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.dispatcherSignature != null) {
        if (struct.isSetDispatcherSignature()) {
          oprot.writeFieldBegin(DISPATCHER_SIGNATURE_FIELD_DESC);
          oprot.writeBinary(struct.dispatcherSignature);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DomainSdkConfigParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DomainSdkConfigParamTupleScheme getScheme() {
      return new DomainSdkConfigParamTupleScheme();
    }
  }

  private static class DomainSdkConfigParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<DomainSdkConfigParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DomainSdkConfigParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDomainName()) {
        optionals.set(0);
      }
      if (struct.isSetActivationCode()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetDispatcherSignature()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDomainName()) {
        oprot.writeString(struct.domainName);
      }
      if (struct.isSetActivationCode()) {
        oprot.writeString(struct.activationCode);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetDispatcherSignature()) {
        oprot.writeBinary(struct.dispatcherSignature);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DomainSdkConfigParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.domainName = iprot.readString();
        struct.setDomainNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.activationCode = iprot.readString();
        struct.setActivationCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dispatcherSignature = iprot.readBinary();
        struct.setDispatcherSignatureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

