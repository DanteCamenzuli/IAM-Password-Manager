/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class ActivationParam implements org.apache.thrift.TBase<ActivationParam, ActivationParam._Fields>, java.io.Serializable, Cloneable, Comparable<ActivationParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivationParam");

  private static final org.apache.thrift.protocol.TField ACTIVATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("activationCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UDID_FIELD_DESC = new org.apache.thrift.protocol.TField("udid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENC_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encPassword", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CPU_ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuArch", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MANUFACTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacture", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DEVICE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceModel", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RISK_FIELD_DESC = new org.apache.thrift.protocol.TField("risk", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ActivationParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ActivationParamTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String activationCode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String userId; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPassword; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.CpuArch
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CpuArch cpuArch; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String osVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String locale; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String manufacture; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String deviceModel; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String deviceName; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer publicKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signature; // required
  /**
   * 
   * @see com.doubleclue.comm.thrift.ClientType
   */
  public @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ClientType clientType; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer digest; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer risk; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVATION_CODE((short)1, "activationCode"),
    USER_ID((short)2, "userId"),
    UDID((short)3, "udid"),
    ENC_PASSWORD((short)4, "encPassword"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.CpuArch
     */
    CPU_ARCH((short)5, "cpuArch"),
    OS_VERSION((short)6, "osVersion"),
    LOCALE((short)7, "locale"),
    MANUFACTURE((short)8, "manufacture"),
    DEVICE_MODEL((short)9, "deviceModel"),
    DEVICE_NAME((short)10, "deviceName"),
    PUBLIC_KEY((short)11, "publicKey"),
    SIGNATURE((short)12, "signature"),
    /**
     * 
     * @see com.doubleclue.comm.thrift.ClientType
     */
    CLIENT_TYPE((short)13, "clientType"),
    DIGEST((short)14, "digest"),
    RISK((short)15, "risk");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVATION_CODE
          return ACTIVATION_CODE;
        case 2: // USER_ID
          return USER_ID;
        case 3: // UDID
          return UDID;
        case 4: // ENC_PASSWORD
          return ENC_PASSWORD;
        case 5: // CPU_ARCH
          return CPU_ARCH;
        case 6: // OS_VERSION
          return OS_VERSION;
        case 7: // LOCALE
          return LOCALE;
        case 8: // MANUFACTURE
          return MANUFACTURE;
        case 9: // DEVICE_MODEL
          return DEVICE_MODEL;
        case 10: // DEVICE_NAME
          return DEVICE_NAME;
        case 11: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 12: // SIGNATURE
          return SIGNATURE;
        case 13: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 14: // DIGEST
          return DIGEST;
        case 15: // RISK
          return RISK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DIGEST,_Fields.RISK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("activationCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UDID, new org.apache.thrift.meta_data.FieldMetaData("udid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENC_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.CPU_ARCH, new org.apache.thrift.meta_data.FieldMetaData("cpuArch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.CpuArch.class)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANUFACTURE, new org.apache.thrift.meta_data.FieldMetaData("manufacture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("deviceModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.ClientType.class)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RISK, new org.apache.thrift.meta_data.FieldMetaData("risk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivationParam.class, metaDataMap);
  }

  public ActivationParam() {
  }

  public ActivationParam(
    java.lang.String activationCode,
    java.lang.String userId,
    java.nio.ByteBuffer udid,
    java.nio.ByteBuffer encPassword,
    com.doubleclue.comm.thrift.CpuArch cpuArch,
    java.lang.String osVersion,
    java.lang.String locale,
    java.lang.String manufacture,
    java.lang.String deviceModel,
    java.lang.String deviceName,
    java.nio.ByteBuffer publicKey,
    java.nio.ByteBuffer signature,
    com.doubleclue.comm.thrift.ClientType clientType)
  {
    this();
    this.activationCode = activationCode;
    this.userId = userId;
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(encPassword);
    this.cpuArch = cpuArch;
    this.osVersion = osVersion;
    this.locale = locale;
    this.manufacture = manufacture;
    this.deviceModel = deviceModel;
    this.deviceName = deviceName;
    this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(publicKey);
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
    this.clientType = clientType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivationParam(ActivationParam other) {
    if (other.isSetActivationCode()) {
      this.activationCode = other.activationCode;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUdid()) {
      this.udid = org.apache.thrift.TBaseHelper.copyBinary(other.udid);
    }
    if (other.isSetEncPassword()) {
      this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(other.encPassword);
    }
    if (other.isSetCpuArch()) {
      this.cpuArch = other.cpuArch;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetLocale()) {
      this.locale = other.locale;
    }
    if (other.isSetManufacture()) {
      this.manufacture = other.manufacture;
    }
    if (other.isSetDeviceModel()) {
      this.deviceModel = other.deviceModel;
    }
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    if (other.isSetPublicKey()) {
      this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(other.publicKey);
    }
    if (other.isSetSignature()) {
      this.signature = org.apache.thrift.TBaseHelper.copyBinary(other.signature);
    }
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetDigest()) {
      this.digest = org.apache.thrift.TBaseHelper.copyBinary(other.digest);
    }
    if (other.isSetRisk()) {
      this.risk = org.apache.thrift.TBaseHelper.copyBinary(other.risk);
    }
  }

  public ActivationParam deepCopy() {
    return new ActivationParam(this);
  }

  @Override
  public void clear() {
    this.activationCode = null;
    this.userId = null;
    this.udid = null;
    this.encPassword = null;
    this.cpuArch = null;
    this.osVersion = null;
    this.locale = null;
    this.manufacture = null;
    this.deviceModel = null;
    this.deviceName = null;
    this.publicKey = null;
    this.signature = null;
    this.clientType = null;
    this.digest = null;
    this.risk = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getActivationCode() {
    return this.activationCode;
  }

  public ActivationParam setActivationCode(@org.apache.thrift.annotation.Nullable java.lang.String activationCode) {
    this.activationCode = activationCode;
    return this;
  }

  public void unsetActivationCode() {
    this.activationCode = null;
  }

  /** Returns true if field activationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetActivationCode() {
    return this.activationCode != null;
  }

  public void setActivationCodeIsSet(boolean value) {
    if (!value) {
      this.activationCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserId() {
    return this.userId;
  }

  public ActivationParam setUserId(@org.apache.thrift.annotation.Nullable java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public byte[] getUdid() {
    setUdid(org.apache.thrift.TBaseHelper.rightSize(udid));
    return udid == null ? null : udid.array();
  }

  public java.nio.ByteBuffer bufferForUdid() {
    return org.apache.thrift.TBaseHelper.copyBinary(udid);
  }

  public ActivationParam setUdid(byte[] udid) {
    this.udid = udid == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(udid.clone());
    return this;
  }

  public ActivationParam setUdid(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer udid) {
    this.udid = org.apache.thrift.TBaseHelper.copyBinary(udid);
    return this;
  }

  public void unsetUdid() {
    this.udid = null;
  }

  /** Returns true if field udid is set (has been assigned a value) and false otherwise */
  public boolean isSetUdid() {
    return this.udid != null;
  }

  public void setUdidIsSet(boolean value) {
    if (!value) {
      this.udid = null;
    }
  }

  public byte[] getEncPassword() {
    setEncPassword(org.apache.thrift.TBaseHelper.rightSize(encPassword));
    return encPassword == null ? null : encPassword.array();
  }

  public java.nio.ByteBuffer bufferForEncPassword() {
    return org.apache.thrift.TBaseHelper.copyBinary(encPassword);
  }

  public ActivationParam setEncPassword(byte[] encPassword) {
    this.encPassword = encPassword == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(encPassword.clone());
    return this;
  }

  public ActivationParam setEncPassword(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encPassword) {
    this.encPassword = org.apache.thrift.TBaseHelper.copyBinary(encPassword);
    return this;
  }

  public void unsetEncPassword() {
    this.encPassword = null;
  }

  /** Returns true if field encPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetEncPassword() {
    return this.encPassword != null;
  }

  public void setEncPasswordIsSet(boolean value) {
    if (!value) {
      this.encPassword = null;
    }
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CpuArch
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.CpuArch getCpuArch() {
    return this.cpuArch;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.CpuArch
   */
  public ActivationParam setCpuArch(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.CpuArch cpuArch) {
    this.cpuArch = cpuArch;
    return this;
  }

  public void unsetCpuArch() {
    this.cpuArch = null;
  }

  /** Returns true if field cpuArch is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuArch() {
    return this.cpuArch != null;
  }

  public void setCpuArchIsSet(boolean value) {
    if (!value) {
      this.cpuArch = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOsVersion() {
    return this.osVersion;
  }

  public ActivationParam setOsVersion(@org.apache.thrift.annotation.Nullable java.lang.String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocale() {
    return this.locale;
  }

  public ActivationParam setLocale(@org.apache.thrift.annotation.Nullable java.lang.String locale) {
    this.locale = locale;
    return this;
  }

  public void unsetLocale() {
    this.locale = null;
  }

  /** Returns true if field locale is set (has been assigned a value) and false otherwise */
  public boolean isSetLocale() {
    return this.locale != null;
  }

  public void setLocaleIsSet(boolean value) {
    if (!value) {
      this.locale = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getManufacture() {
    return this.manufacture;
  }

  public ActivationParam setManufacture(@org.apache.thrift.annotation.Nullable java.lang.String manufacture) {
    this.manufacture = manufacture;
    return this;
  }

  public void unsetManufacture() {
    this.manufacture = null;
  }

  /** Returns true if field manufacture is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacture() {
    return this.manufacture != null;
  }

  public void setManufactureIsSet(boolean value) {
    if (!value) {
      this.manufacture = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeviceModel() {
    return this.deviceModel;
  }

  public ActivationParam setDeviceModel(@org.apache.thrift.annotation.Nullable java.lang.String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  public void unsetDeviceModel() {
    this.deviceModel = null;
  }

  /** Returns true if field deviceModel is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceModel() {
    return this.deviceModel != null;
  }

  public void setDeviceModelIsSet(boolean value) {
    if (!value) {
      this.deviceModel = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeviceName() {
    return this.deviceName;
  }

  public ActivationParam setDeviceName(@org.apache.thrift.annotation.Nullable java.lang.String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public byte[] getPublicKey() {
    setPublicKey(org.apache.thrift.TBaseHelper.rightSize(publicKey));
    return publicKey == null ? null : publicKey.array();
  }

  public java.nio.ByteBuffer bufferForPublicKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(publicKey);
  }

  public ActivationParam setPublicKey(byte[] publicKey) {
    this.publicKey = publicKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(publicKey.clone());
    return this;
  }

  public ActivationParam setPublicKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer publicKey) {
    this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(publicKey);
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public byte[] getSignature() {
    setSignature(org.apache.thrift.TBaseHelper.rightSize(signature));
    return signature == null ? null : signature.array();
  }

  public java.nio.ByteBuffer bufferForSignature() {
    return org.apache.thrift.TBaseHelper.copyBinary(signature);
  }

  public ActivationParam setSignature(byte[] signature) {
    this.signature = signature == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(signature.clone());
    return this;
  }

  public ActivationParam setSignature(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signature) {
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.ClientType
   */
  @org.apache.thrift.annotation.Nullable
  public com.doubleclue.comm.thrift.ClientType getClientType() {
    return this.clientType;
  }

  /**
   * 
   * @see com.doubleclue.comm.thrift.ClientType
   */
  public ActivationParam setClientType(@org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ClientType clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public byte[] getDigest() {
    setDigest(org.apache.thrift.TBaseHelper.rightSize(digest));
    return digest == null ? null : digest.array();
  }

  public java.nio.ByteBuffer bufferForDigest() {
    return org.apache.thrift.TBaseHelper.copyBinary(digest);
  }

  public ActivationParam setDigest(byte[] digest) {
    this.digest = digest == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(digest.clone());
    return this;
  }

  public ActivationParam setDigest(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer digest) {
    this.digest = org.apache.thrift.TBaseHelper.copyBinary(digest);
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public byte[] getRisk() {
    setRisk(org.apache.thrift.TBaseHelper.rightSize(risk));
    return risk == null ? null : risk.array();
  }

  public java.nio.ByteBuffer bufferForRisk() {
    return org.apache.thrift.TBaseHelper.copyBinary(risk);
  }

  public ActivationParam setRisk(byte[] risk) {
    this.risk = risk == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(risk.clone());
    return this;
  }

  public ActivationParam setRisk(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer risk) {
    this.risk = org.apache.thrift.TBaseHelper.copyBinary(risk);
    return this;
  }

  public void unsetRisk() {
    this.risk = null;
  }

  /** Returns true if field risk is set (has been assigned a value) and false otherwise */
  public boolean isSetRisk() {
    return this.risk != null;
  }

  public void setRiskIsSet(boolean value) {
    if (!value) {
      this.risk = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ACTIVATION_CODE:
      if (value == null) {
        unsetActivationCode();
      } else {
        setActivationCode((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case UDID:
      if (value == null) {
        unsetUdid();
      } else {
        if (value instanceof byte[]) {
          setUdid((byte[])value);
        } else {
          setUdid((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ENC_PASSWORD:
      if (value == null) {
        unsetEncPassword();
      } else {
        if (value instanceof byte[]) {
          setEncPassword((byte[])value);
        } else {
          setEncPassword((java.nio.ByteBuffer)value);
        }
      }
      break;

    case CPU_ARCH:
      if (value == null) {
        unsetCpuArch();
      } else {
        setCpuArch((com.doubleclue.comm.thrift.CpuArch)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((java.lang.String)value);
      }
      break;

    case LOCALE:
      if (value == null) {
        unsetLocale();
      } else {
        setLocale((java.lang.String)value);
      }
      break;

    case MANUFACTURE:
      if (value == null) {
        unsetManufacture();
      } else {
        setManufacture((java.lang.String)value);
      }
      break;

    case DEVICE_MODEL:
      if (value == null) {
        unsetDeviceModel();
      } else {
        setDeviceModel((java.lang.String)value);
      }
      break;

    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((java.lang.String)value);
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        if (value instanceof byte[]) {
          setPublicKey((byte[])value);
        } else {
          setPublicKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        if (value instanceof byte[]) {
          setSignature((byte[])value);
        } else {
          setSignature((java.nio.ByteBuffer)value);
        }
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((com.doubleclue.comm.thrift.ClientType)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        if (value instanceof byte[]) {
          setDigest((byte[])value);
        } else {
          setDigest((java.nio.ByteBuffer)value);
        }
      }
      break;

    case RISK:
      if (value == null) {
        unsetRisk();
      } else {
        if (value instanceof byte[]) {
          setRisk((byte[])value);
        } else {
          setRisk((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVATION_CODE:
      return getActivationCode();

    case USER_ID:
      return getUserId();

    case UDID:
      return getUdid();

    case ENC_PASSWORD:
      return getEncPassword();

    case CPU_ARCH:
      return getCpuArch();

    case OS_VERSION:
      return getOsVersion();

    case LOCALE:
      return getLocale();

    case MANUFACTURE:
      return getManufacture();

    case DEVICE_MODEL:
      return getDeviceModel();

    case DEVICE_NAME:
      return getDeviceName();

    case PUBLIC_KEY:
      return getPublicKey();

    case SIGNATURE:
      return getSignature();

    case CLIENT_TYPE:
      return getClientType();

    case DIGEST:
      return getDigest();

    case RISK:
      return getRisk();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTIVATION_CODE:
      return isSetActivationCode();
    case USER_ID:
      return isSetUserId();
    case UDID:
      return isSetUdid();
    case ENC_PASSWORD:
      return isSetEncPassword();
    case CPU_ARCH:
      return isSetCpuArch();
    case OS_VERSION:
      return isSetOsVersion();
    case LOCALE:
      return isSetLocale();
    case MANUFACTURE:
      return isSetManufacture();
    case DEVICE_MODEL:
      return isSetDeviceModel();
    case DEVICE_NAME:
      return isSetDeviceName();
    case PUBLIC_KEY:
      return isSetPublicKey();
    case SIGNATURE:
      return isSetSignature();
    case CLIENT_TYPE:
      return isSetClientType();
    case DIGEST:
      return isSetDigest();
    case RISK:
      return isSetRisk();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivationParam)
      return this.equals((ActivationParam)that);
    return false;
  }

  public boolean equals(ActivationParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_activationCode = true && this.isSetActivationCode();
    boolean that_present_activationCode = true && that.isSetActivationCode();
    if (this_present_activationCode || that_present_activationCode) {
      if (!(this_present_activationCode && that_present_activationCode))
        return false;
      if (!this.activationCode.equals(that.activationCode))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_udid = true && this.isSetUdid();
    boolean that_present_udid = true && that.isSetUdid();
    if (this_present_udid || that_present_udid) {
      if (!(this_present_udid && that_present_udid))
        return false;
      if (!this.udid.equals(that.udid))
        return false;
    }

    boolean this_present_encPassword = true && this.isSetEncPassword();
    boolean that_present_encPassword = true && that.isSetEncPassword();
    if (this_present_encPassword || that_present_encPassword) {
      if (!(this_present_encPassword && that_present_encPassword))
        return false;
      if (!this.encPassword.equals(that.encPassword))
        return false;
    }

    boolean this_present_cpuArch = true && this.isSetCpuArch();
    boolean that_present_cpuArch = true && that.isSetCpuArch();
    if (this_present_cpuArch || that_present_cpuArch) {
      if (!(this_present_cpuArch && that_present_cpuArch))
        return false;
      if (!this.cpuArch.equals(that.cpuArch))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_locale = true && this.isSetLocale();
    boolean that_present_locale = true && that.isSetLocale();
    if (this_present_locale || that_present_locale) {
      if (!(this_present_locale && that_present_locale))
        return false;
      if (!this.locale.equals(that.locale))
        return false;
    }

    boolean this_present_manufacture = true && this.isSetManufacture();
    boolean that_present_manufacture = true && that.isSetManufacture();
    if (this_present_manufacture || that_present_manufacture) {
      if (!(this_present_manufacture && that_present_manufacture))
        return false;
      if (!this.manufacture.equals(that.manufacture))
        return false;
    }

    boolean this_present_deviceModel = true && this.isSetDeviceModel();
    boolean that_present_deviceModel = true && that.isSetDeviceModel();
    if (this_present_deviceModel || that_present_deviceModel) {
      if (!(this_present_deviceModel && that_present_deviceModel))
        return false;
      if (!this.deviceModel.equals(that.deviceModel))
        return false;
    }

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_risk = true && this.isSetRisk();
    boolean that_present_risk = true && that.isSetRisk();
    if (this_present_risk || that_present_risk) {
      if (!(this_present_risk && that_present_risk))
        return false;
      if (!this.risk.equals(that.risk))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActivationCode()) ? 131071 : 524287);
    if (isSetActivationCode())
      hashCode = hashCode * 8191 + activationCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUdid()) ? 131071 : 524287);
    if (isSetUdid())
      hashCode = hashCode * 8191 + udid.hashCode();

    hashCode = hashCode * 8191 + ((isSetEncPassword()) ? 131071 : 524287);
    if (isSetEncPassword())
      hashCode = hashCode * 8191 + encPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpuArch()) ? 131071 : 524287);
    if (isSetCpuArch())
      hashCode = hashCode * 8191 + cpuArch.getValue();

    hashCode = hashCode * 8191 + ((isSetOsVersion()) ? 131071 : 524287);
    if (isSetOsVersion())
      hashCode = hashCode * 8191 + osVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
    if (isSetLocale())
      hashCode = hashCode * 8191 + locale.hashCode();

    hashCode = hashCode * 8191 + ((isSetManufacture()) ? 131071 : 524287);
    if (isSetManufacture())
      hashCode = hashCode * 8191 + manufacture.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceModel()) ? 131071 : 524287);
    if (isSetDeviceModel())
      hashCode = hashCode * 8191 + deviceModel.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceName()) ? 131071 : 524287);
    if (isSetDeviceName())
      hashCode = hashCode * 8191 + deviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
    if (isSetPublicKey())
      hashCode = hashCode * 8191 + publicKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientType()) ? 131071 : 524287);
    if (isSetClientType())
      hashCode = hashCode * 8191 + clientType.getValue();

    hashCode = hashCode * 8191 + ((isSetDigest()) ? 131071 : 524287);
    if (isSetDigest())
      hashCode = hashCode * 8191 + digest.hashCode();

    hashCode = hashCode * 8191 + ((isSetRisk()) ? 131071 : 524287);
    if (isSetRisk())
      hashCode = hashCode * 8191 + risk.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ActivationParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActivationCode()).compareTo(other.isSetActivationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activationCode, other.activationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUdid()).compareTo(other.isSetUdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udid, other.udid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncPassword()).compareTo(other.isSetEncPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encPassword, other.encPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuArch()).compareTo(other.isSetCpuArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuArch, other.cpuArch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsVersion()).compareTo(other.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, other.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManufacture()).compareTo(other.isSetManufacture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacture, other.manufacture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceModel()).compareTo(other.isSetDeviceModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceModel, other.deviceModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublicKey()).compareTo(other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRisk()).compareTo(other.isSetRisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.risk, other.risk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ActivationParam(");
    boolean first = true;

    sb.append("activationCode:");
    if (this.activationCode == null) {
      sb.append("null");
    } else {
      sb.append(this.activationCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("udid:");
    if (this.udid == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.udid, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encPassword:");
    if (this.encPassword == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.encPassword, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuArch:");
    if (this.cpuArch == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuArch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locale:");
    if (this.locale == null) {
      sb.append("null");
    } else {
      sb.append(this.locale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacture:");
    if (this.manufacture == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceModel:");
    if (this.deviceModel == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.publicKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.signature, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientType:");
    if (this.clientType == null) {
      sb.append("null");
    } else {
      sb.append(this.clientType);
    }
    first = false;
    if (isSetDigest()) {
      if (!first) sb.append(", ");
      sb.append("digest:");
      if (this.digest == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.digest, sb);
      }
      first = false;
    }
    if (isSetRisk()) {
      if (!first) sb.append(", ");
      sb.append("risk:");
      if (this.risk == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.risk, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivationParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActivationParamStandardScheme getScheme() {
      return new ActivationParamStandardScheme();
    }
  }

  private static class ActivationParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<ActivationParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivationParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activationCode = iprot.readString();
              struct.setActivationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UDID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udid = iprot.readBinary();
              struct.setUdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENC_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encPassword = iprot.readBinary();
              struct.setEncPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CPU_ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuArch = com.doubleclue.comm.thrift.CpuArch.findByValue(iprot.readI32());
              struct.setCpuArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locale = iprot.readString();
              struct.setLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MANUFACTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacture = iprot.readString();
              struct.setManufactureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEVICE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceModel = iprot.readString();
              struct.setDeviceModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicKey = iprot.readBinary();
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readBinary();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clientType = com.doubleclue.comm.thrift.ClientType.findByValue(iprot.readI32());
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readBinary();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RISK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.risk = iprot.readBinary();
              struct.setRiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivationParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.activationCode != null) {
        oprot.writeFieldBegin(ACTIVATION_CODE_FIELD_DESC);
        oprot.writeString(struct.activationCode);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.udid != null) {
        oprot.writeFieldBegin(UDID_FIELD_DESC);
        oprot.writeBinary(struct.udid);
        oprot.writeFieldEnd();
      }
      if (struct.encPassword != null) {
        oprot.writeFieldBegin(ENC_PASSWORD_FIELD_DESC);
        oprot.writeBinary(struct.encPassword);
        oprot.writeFieldEnd();
      }
      if (struct.cpuArch != null) {
        oprot.writeFieldBegin(CPU_ARCH_FIELD_DESC);
        oprot.writeI32(struct.cpuArch.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(struct.locale);
        oprot.writeFieldEnd();
      }
      if (struct.manufacture != null) {
        oprot.writeFieldBegin(MANUFACTURE_FIELD_DESC);
        oprot.writeString(struct.manufacture);
        oprot.writeFieldEnd();
      }
      if (struct.deviceModel != null) {
        oprot.writeFieldBegin(DEVICE_MODEL_FIELD_DESC);
        oprot.writeString(struct.deviceModel);
        oprot.writeFieldEnd();
      }
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.publicKey);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeBinary(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.clientType != null) {
        oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.clientType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.digest != null) {
        if (struct.isSetDigest()) {
          oprot.writeFieldBegin(DIGEST_FIELD_DESC);
          oprot.writeBinary(struct.digest);
          oprot.writeFieldEnd();
        }
      }
      if (struct.risk != null) {
        if (struct.isSetRisk()) {
          oprot.writeFieldBegin(RISK_FIELD_DESC);
          oprot.writeBinary(struct.risk);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivationParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ActivationParamTupleScheme getScheme() {
      return new ActivationParamTupleScheme();
    }
  }

  private static class ActivationParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<ActivationParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivationParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActivationCode()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetUdid()) {
        optionals.set(2);
      }
      if (struct.isSetEncPassword()) {
        optionals.set(3);
      }
      if (struct.isSetCpuArch()) {
        optionals.set(4);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(5);
      }
      if (struct.isSetLocale()) {
        optionals.set(6);
      }
      if (struct.isSetManufacture()) {
        optionals.set(7);
      }
      if (struct.isSetDeviceModel()) {
        optionals.set(8);
      }
      if (struct.isSetDeviceName()) {
        optionals.set(9);
      }
      if (struct.isSetPublicKey()) {
        optionals.set(10);
      }
      if (struct.isSetSignature()) {
        optionals.set(11);
      }
      if (struct.isSetClientType()) {
        optionals.set(12);
      }
      if (struct.isSetDigest()) {
        optionals.set(13);
      }
      if (struct.isSetRisk()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetActivationCode()) {
        oprot.writeString(struct.activationCode);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetUdid()) {
        oprot.writeBinary(struct.udid);
      }
      if (struct.isSetEncPassword()) {
        oprot.writeBinary(struct.encPassword);
      }
      if (struct.isSetCpuArch()) {
        oprot.writeI32(struct.cpuArch.getValue());
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetLocale()) {
        oprot.writeString(struct.locale);
      }
      if (struct.isSetManufacture()) {
        oprot.writeString(struct.manufacture);
      }
      if (struct.isSetDeviceModel()) {
        oprot.writeString(struct.deviceModel);
      }
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
      if (struct.isSetPublicKey()) {
        oprot.writeBinary(struct.publicKey);
      }
      if (struct.isSetSignature()) {
        oprot.writeBinary(struct.signature);
      }
      if (struct.isSetClientType()) {
        oprot.writeI32(struct.clientType.getValue());
      }
      if (struct.isSetDigest()) {
        oprot.writeBinary(struct.digest);
      }
      if (struct.isSetRisk()) {
        oprot.writeBinary(struct.risk);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivationParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.activationCode = iprot.readString();
        struct.setActivationCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.udid = iprot.readBinary();
        struct.setUdidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.encPassword = iprot.readBinary();
        struct.setEncPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpuArch = com.doubleclue.comm.thrift.CpuArch.findByValue(iprot.readI32());
        struct.setCpuArchIsSet(true);
      }
      if (incoming.get(5)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.locale = iprot.readString();
        struct.setLocaleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.manufacture = iprot.readString();
        struct.setManufactureIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deviceModel = iprot.readString();
        struct.setDeviceModelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.publicKey = iprot.readBinary();
        struct.setPublicKeyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.signature = iprot.readBinary();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(12)) {
        struct.clientType = com.doubleclue.comm.thrift.ClientType.findByValue(iprot.readI32());
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.digest = iprot.readBinary();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(14)) {
        struct.risk = iprot.readBinary();
        struct.setRiskIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

