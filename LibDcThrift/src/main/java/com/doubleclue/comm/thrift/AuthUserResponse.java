/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class AuthUserResponse implements org.apache.thrift.TBase<AuthUserResponse, AuthUserResponse._Fields>, java.io.Serializable, Cloneable, Comparable<AuthUserResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthUserResponse");

  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField AUTH_METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField("authMethods", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField USER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userKey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookie", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_EXPIRES_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookieExpiresOn", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SECURE_MSG_RANDOM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("secureMsgRandomCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FQ_USER_LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fqUserLoginId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FIDO_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("fidoResponse", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LDAP_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ldapDomain", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthUserResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthUserResponseTupleSchemeFactory();

  public boolean success; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<com.doubleclue.comm.thrift.ThriftAuthMethod> authMethods; // optional
  public int responseTime; // required
  public long msgId; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer userKey; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sessionCookie; // optional
  public int sessionCookieExpiresOn; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String secureMsgRandomCode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String phoneNumber; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fqUserLoginId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fidoResponse; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ldapDomain; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUCCESS((short)1, "success"),
    AUTH_METHODS((short)2, "authMethods"),
    RESPONSE_TIME((short)3, "responseTime"),
    MSG_ID((short)4, "msgId"),
    USER_KEY((short)5, "userKey"),
    SESSION_COOKIE((short)6, "sessionCookie"),
    SESSION_COOKIE_EXPIRES_ON((short)7, "sessionCookieExpiresOn"),
    SECURE_MSG_RANDOM_CODE((short)8, "secureMsgRandomCode"),
    PHONE_NUMBER((short)9, "phoneNumber"),
    FQ_USER_LOGIN_ID((short)10, "fqUserLoginId"),
    FIDO_RESPONSE((short)11, "fidoResponse"),
    LDAP_DOMAIN((short)12, "ldapDomain");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUCCESS
          return SUCCESS;
        case 2: // AUTH_METHODS
          return AUTH_METHODS;
        case 3: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 4: // MSG_ID
          return MSG_ID;
        case 5: // USER_KEY
          return USER_KEY;
        case 6: // SESSION_COOKIE
          return SESSION_COOKIE;
        case 7: // SESSION_COOKIE_EXPIRES_ON
          return SESSION_COOKIE_EXPIRES_ON;
        case 8: // SECURE_MSG_RANDOM_CODE
          return SECURE_MSG_RANDOM_CODE;
        case 9: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 10: // FQ_USER_LOGIN_ID
          return FQ_USER_LOGIN_ID;
        case 11: // FIDO_RESPONSE
          return FIDO_RESPONSE;
        case 12: // LDAP_DOMAIN
          return LDAP_DOMAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_ISSET_ID = 0;
  private static final int __RESPONSETIME_ISSET_ID = 1;
  private static final int __MSGID_ISSET_ID = 2;
  private static final int __SESSIONCOOKIEEXPIRESON_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AUTH_METHODS,_Fields.USER_KEY,_Fields.SESSION_COOKIE,_Fields.SESSION_COOKIE_EXPIRES_ON,_Fields.SECURE_MSG_RANDOM_CODE,_Fields.PHONE_NUMBER,_Fields.FQ_USER_LOGIN_ID,_Fields.FIDO_RESPONSE,_Fields.LDAP_DOMAIN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTH_METHODS, new org.apache.thrift.meta_data.FieldMetaData("authMethods", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.doubleclue.comm.thrift.ThriftAuthMethod.class))));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_KEY, new org.apache.thrift.meta_data.FieldMetaData("userKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SESSION_COOKIE, new org.apache.thrift.meta_data.FieldMetaData("sessionCookie", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_COOKIE_EXPIRES_ON, new org.apache.thrift.meta_data.FieldMetaData("sessionCookieExpiresOn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECURE_MSG_RANDOM_CODE, new org.apache.thrift.meta_data.FieldMetaData("secureMsgRandomCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FQ_USER_LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("fqUserLoginId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIDO_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("fidoResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LDAP_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("ldapDomain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthUserResponse.class, metaDataMap);
  }

  public AuthUserResponse() {
  }

  public AuthUserResponse(
    boolean success,
    int responseTime,
    long msgId)
  {
    this();
    this.success = success;
    setSuccessIsSet(true);
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    this.msgId = msgId;
    setMsgIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthUserResponse(AuthUserResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.success = other.success;
    if (other.isSetAuthMethods()) {
      java.util.List<com.doubleclue.comm.thrift.ThriftAuthMethod> __this__authMethods = new java.util.ArrayList<com.doubleclue.comm.thrift.ThriftAuthMethod>(other.authMethods.size());
      for (com.doubleclue.comm.thrift.ThriftAuthMethod other_element : other.authMethods) {
        __this__authMethods.add(other_element);
      }
      this.authMethods = __this__authMethods;
    }
    this.responseTime = other.responseTime;
    this.msgId = other.msgId;
    if (other.isSetUserKey()) {
      this.userKey = org.apache.thrift.TBaseHelper.copyBinary(other.userKey);
    }
    if (other.isSetSessionCookie()) {
      this.sessionCookie = other.sessionCookie;
    }
    this.sessionCookieExpiresOn = other.sessionCookieExpiresOn;
    if (other.isSetSecureMsgRandomCode()) {
      this.secureMsgRandomCode = other.secureMsgRandomCode;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetFqUserLoginId()) {
      this.fqUserLoginId = other.fqUserLoginId;
    }
    if (other.isSetFidoResponse()) {
      this.fidoResponse = other.fidoResponse;
    }
    if (other.isSetLdapDomain()) {
      this.ldapDomain = other.ldapDomain;
    }
  }

  public AuthUserResponse deepCopy() {
    return new AuthUserResponse(this);
  }

  @Override
  public void clear() {
    setSuccessIsSet(false);
    this.success = false;
    this.authMethods = null;
    setResponseTimeIsSet(false);
    this.responseTime = 0;
    setMsgIdIsSet(false);
    this.msgId = 0;
    this.userKey = null;
    this.sessionCookie = null;
    setSessionCookieExpiresOnIsSet(false);
    this.sessionCookieExpiresOn = 0;
    this.secureMsgRandomCode = null;
    this.phoneNumber = null;
    this.fqUserLoginId = null;
    this.fidoResponse = null;
    this.ldapDomain = null;
  }

  public boolean isSuccess() {
    return this.success;
  }

  public AuthUserResponse setSuccess(boolean success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public int getAuthMethodsSize() {
    return (this.authMethods == null) ? 0 : this.authMethods.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.doubleclue.comm.thrift.ThriftAuthMethod> getAuthMethodsIterator() {
    return (this.authMethods == null) ? null : this.authMethods.iterator();
  }

  public void addToAuthMethods(com.doubleclue.comm.thrift.ThriftAuthMethod elem) {
    if (this.authMethods == null) {
      this.authMethods = new java.util.ArrayList<com.doubleclue.comm.thrift.ThriftAuthMethod>();
    }
    this.authMethods.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.doubleclue.comm.thrift.ThriftAuthMethod> getAuthMethods() {
    return this.authMethods;
  }

  public AuthUserResponse setAuthMethods(@org.apache.thrift.annotation.Nullable java.util.List<com.doubleclue.comm.thrift.ThriftAuthMethod> authMethods) {
    this.authMethods = authMethods;
    return this;
  }

  public void unsetAuthMethods() {
    this.authMethods = null;
  }

  /** Returns true if field authMethods is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthMethods() {
    return this.authMethods != null;
  }

  public void setAuthMethodsIsSet(boolean value) {
    if (!value) {
      this.authMethods = null;
    }
  }

  public int getResponseTime() {
    return this.responseTime;
  }

  public AuthUserResponse setResponseTime(int responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public long getMsgId() {
    return this.msgId;
  }

  public AuthUserResponse setMsgId(long msgId) {
    this.msgId = msgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public byte[] getUserKey() {
    setUserKey(org.apache.thrift.TBaseHelper.rightSize(userKey));
    return userKey == null ? null : userKey.array();
  }

  public java.nio.ByteBuffer bufferForUserKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(userKey);
  }

  public AuthUserResponse setUserKey(byte[] userKey) {
    this.userKey = userKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(userKey.clone());
    return this;
  }

  public AuthUserResponse setUserKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer userKey) {
    this.userKey = org.apache.thrift.TBaseHelper.copyBinary(userKey);
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSessionCookie() {
    return this.sessionCookie;
  }

  public AuthUserResponse setSessionCookie(@org.apache.thrift.annotation.Nullable java.lang.String sessionCookie) {
    this.sessionCookie = sessionCookie;
    return this;
  }

  public void unsetSessionCookie() {
    this.sessionCookie = null;
  }

  /** Returns true if field sessionCookie is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookie() {
    return this.sessionCookie != null;
  }

  public void setSessionCookieIsSet(boolean value) {
    if (!value) {
      this.sessionCookie = null;
    }
  }

  public int getSessionCookieExpiresOn() {
    return this.sessionCookieExpiresOn;
  }

  public AuthUserResponse setSessionCookieExpiresOn(int sessionCookieExpiresOn) {
    this.sessionCookieExpiresOn = sessionCookieExpiresOn;
    setSessionCookieExpiresOnIsSet(true);
    return this;
  }

  public void unsetSessionCookieExpiresOn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  /** Returns true if field sessionCookieExpiresOn is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookieExpiresOn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  public void setSessionCookieExpiresOnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecureMsgRandomCode() {
    return this.secureMsgRandomCode;
  }

  public AuthUserResponse setSecureMsgRandomCode(@org.apache.thrift.annotation.Nullable java.lang.String secureMsgRandomCode) {
    this.secureMsgRandomCode = secureMsgRandomCode;
    return this;
  }

  public void unsetSecureMsgRandomCode() {
    this.secureMsgRandomCode = null;
  }

  /** Returns true if field secureMsgRandomCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSecureMsgRandomCode() {
    return this.secureMsgRandomCode != null;
  }

  public void setSecureMsgRandomCodeIsSet(boolean value) {
    if (!value) {
      this.secureMsgRandomCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPhoneNumber() {
    return this.phoneNumber;
  }

  public AuthUserResponse setPhoneNumber(@org.apache.thrift.annotation.Nullable java.lang.String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFqUserLoginId() {
    return this.fqUserLoginId;
  }

  public AuthUserResponse setFqUserLoginId(@org.apache.thrift.annotation.Nullable java.lang.String fqUserLoginId) {
    this.fqUserLoginId = fqUserLoginId;
    return this;
  }

  public void unsetFqUserLoginId() {
    this.fqUserLoginId = null;
  }

  /** Returns true if field fqUserLoginId is set (has been assigned a value) and false otherwise */
  public boolean isSetFqUserLoginId() {
    return this.fqUserLoginId != null;
  }

  public void setFqUserLoginIdIsSet(boolean value) {
    if (!value) {
      this.fqUserLoginId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFidoResponse() {
    return this.fidoResponse;
  }

  public AuthUserResponse setFidoResponse(@org.apache.thrift.annotation.Nullable java.lang.String fidoResponse) {
    this.fidoResponse = fidoResponse;
    return this;
  }

  public void unsetFidoResponse() {
    this.fidoResponse = null;
  }

  /** Returns true if field fidoResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetFidoResponse() {
    return this.fidoResponse != null;
  }

  public void setFidoResponseIsSet(boolean value) {
    if (!value) {
      this.fidoResponse = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLdapDomain() {
    return this.ldapDomain;
  }

  public AuthUserResponse setLdapDomain(@org.apache.thrift.annotation.Nullable java.lang.String ldapDomain) {
    this.ldapDomain = ldapDomain;
    return this;
  }

  public void unsetLdapDomain() {
    this.ldapDomain = null;
  }

  /** Returns true if field ldapDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetLdapDomain() {
    return this.ldapDomain != null;
  }

  public void setLdapDomainIsSet(boolean value) {
    if (!value) {
      this.ldapDomain = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((java.lang.Boolean)value);
      }
      break;

    case AUTH_METHODS:
      if (value == null) {
        unsetAuthMethods();
      } else {
        setAuthMethods((java.util.List<com.doubleclue.comm.thrift.ThriftAuthMethod>)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((java.lang.Integer)value);
      }
      break;

    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((java.lang.Long)value);
      }
      break;

    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        if (value instanceof byte[]) {
          setUserKey((byte[])value);
        } else {
          setUserKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SESSION_COOKIE:
      if (value == null) {
        unsetSessionCookie();
      } else {
        setSessionCookie((java.lang.String)value);
      }
      break;

    case SESSION_COOKIE_EXPIRES_ON:
      if (value == null) {
        unsetSessionCookieExpiresOn();
      } else {
        setSessionCookieExpiresOn((java.lang.Integer)value);
      }
      break;

    case SECURE_MSG_RANDOM_CODE:
      if (value == null) {
        unsetSecureMsgRandomCode();
      } else {
        setSecureMsgRandomCode((java.lang.String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((java.lang.String)value);
      }
      break;

    case FQ_USER_LOGIN_ID:
      if (value == null) {
        unsetFqUserLoginId();
      } else {
        setFqUserLoginId((java.lang.String)value);
      }
      break;

    case FIDO_RESPONSE:
      if (value == null) {
        unsetFidoResponse();
      } else {
        setFidoResponse((java.lang.String)value);
      }
      break;

    case LDAP_DOMAIN:
      if (value == null) {
        unsetLdapDomain();
      } else {
        setLdapDomain((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return isSuccess();

    case AUTH_METHODS:
      return getAuthMethods();

    case RESPONSE_TIME:
      return getResponseTime();

    case MSG_ID:
      return getMsgId();

    case USER_KEY:
      return getUserKey();

    case SESSION_COOKIE:
      return getSessionCookie();

    case SESSION_COOKIE_EXPIRES_ON:
      return getSessionCookieExpiresOn();

    case SECURE_MSG_RANDOM_CODE:
      return getSecureMsgRandomCode();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case FQ_USER_LOGIN_ID:
      return getFqUserLoginId();

    case FIDO_RESPONSE:
      return getFidoResponse();

    case LDAP_DOMAIN:
      return getLdapDomain();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    case AUTH_METHODS:
      return isSetAuthMethods();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case MSG_ID:
      return isSetMsgId();
    case USER_KEY:
      return isSetUserKey();
    case SESSION_COOKIE:
      return isSetSessionCookie();
    case SESSION_COOKIE_EXPIRES_ON:
      return isSetSessionCookieExpiresOn();
    case SECURE_MSG_RANDOM_CODE:
      return isSetSecureMsgRandomCode();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case FQ_USER_LOGIN_ID:
      return isSetFqUserLoginId();
    case FIDO_RESPONSE:
      return isSetFidoResponse();
    case LDAP_DOMAIN:
      return isSetLdapDomain();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthUserResponse)
      return this.equals((AuthUserResponse)that);
    return false;
  }

  public boolean equals(AuthUserResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_authMethods = true && this.isSetAuthMethods();
    boolean that_present_authMethods = true && that.isSetAuthMethods();
    if (this_present_authMethods || that_present_authMethods) {
      if (!(this_present_authMethods && that_present_authMethods))
        return false;
      if (!this.authMethods.equals(that.authMethods))
        return false;
    }

    boolean this_present_responseTime = true;
    boolean that_present_responseTime = true;
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_msgId = true;
    boolean that_present_msgId = true;
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (this.msgId != that.msgId)
        return false;
    }

    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }

    boolean this_present_sessionCookie = true && this.isSetSessionCookie();
    boolean that_present_sessionCookie = true && that.isSetSessionCookie();
    if (this_present_sessionCookie || that_present_sessionCookie) {
      if (!(this_present_sessionCookie && that_present_sessionCookie))
        return false;
      if (!this.sessionCookie.equals(that.sessionCookie))
        return false;
    }

    boolean this_present_sessionCookieExpiresOn = true && this.isSetSessionCookieExpiresOn();
    boolean that_present_sessionCookieExpiresOn = true && that.isSetSessionCookieExpiresOn();
    if (this_present_sessionCookieExpiresOn || that_present_sessionCookieExpiresOn) {
      if (!(this_present_sessionCookieExpiresOn && that_present_sessionCookieExpiresOn))
        return false;
      if (this.sessionCookieExpiresOn != that.sessionCookieExpiresOn)
        return false;
    }

    boolean this_present_secureMsgRandomCode = true && this.isSetSecureMsgRandomCode();
    boolean that_present_secureMsgRandomCode = true && that.isSetSecureMsgRandomCode();
    if (this_present_secureMsgRandomCode || that_present_secureMsgRandomCode) {
      if (!(this_present_secureMsgRandomCode && that_present_secureMsgRandomCode))
        return false;
      if (!this.secureMsgRandomCode.equals(that.secureMsgRandomCode))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_fqUserLoginId = true && this.isSetFqUserLoginId();
    boolean that_present_fqUserLoginId = true && that.isSetFqUserLoginId();
    if (this_present_fqUserLoginId || that_present_fqUserLoginId) {
      if (!(this_present_fqUserLoginId && that_present_fqUserLoginId))
        return false;
      if (!this.fqUserLoginId.equals(that.fqUserLoginId))
        return false;
    }

    boolean this_present_fidoResponse = true && this.isSetFidoResponse();
    boolean that_present_fidoResponse = true && that.isSetFidoResponse();
    if (this_present_fidoResponse || that_present_fidoResponse) {
      if (!(this_present_fidoResponse && that_present_fidoResponse))
        return false;
      if (!this.fidoResponse.equals(that.fidoResponse))
        return false;
    }

    boolean this_present_ldapDomain = true && this.isSetLdapDomain();
    boolean that_present_ldapDomain = true && that.isSetLdapDomain();
    if (this_present_ldapDomain || that_present_ldapDomain) {
      if (!(this_present_ldapDomain && that_present_ldapDomain))
        return false;
      if (!this.ldapDomain.equals(that.ldapDomain))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAuthMethods()) ? 131071 : 524287);
    if (isSetAuthMethods())
      hashCode = hashCode * 8191 + authMethods.hashCode();

    hashCode = hashCode * 8191 + responseTime;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(msgId);

    hashCode = hashCode * 8191 + ((isSetUserKey()) ? 131071 : 524287);
    if (isSetUserKey())
      hashCode = hashCode * 8191 + userKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionCookie()) ? 131071 : 524287);
    if (isSetSessionCookie())
      hashCode = hashCode * 8191 + sessionCookie.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionCookieExpiresOn()) ? 131071 : 524287);
    if (isSetSessionCookieExpiresOn())
      hashCode = hashCode * 8191 + sessionCookieExpiresOn;

    hashCode = hashCode * 8191 + ((isSetSecureMsgRandomCode()) ? 131071 : 524287);
    if (isSetSecureMsgRandomCode())
      hashCode = hashCode * 8191 + secureMsgRandomCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhoneNumber()) ? 131071 : 524287);
    if (isSetPhoneNumber())
      hashCode = hashCode * 8191 + phoneNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetFqUserLoginId()) ? 131071 : 524287);
    if (isSetFqUserLoginId())
      hashCode = hashCode * 8191 + fqUserLoginId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFidoResponse()) ? 131071 : 524287);
    if (isSetFidoResponse())
      hashCode = hashCode * 8191 + fidoResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetLdapDomain()) ? 131071 : 524287);
    if (isSetLdapDomain())
      hashCode = hashCode * 8191 + ldapDomain.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AuthUserResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthMethods()).compareTo(other.isSetAuthMethods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthMethods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authMethods, other.authMethods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseTime()).compareTo(other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserKey()).compareTo(other.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userKey, other.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookie()).compareTo(other.isSetSessionCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookie, other.sessionCookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookieExpiresOn()).compareTo(other.isSetSessionCookieExpiresOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookieExpiresOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookieExpiresOn, other.sessionCookieExpiresOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecureMsgRandomCode()).compareTo(other.isSetSecureMsgRandomCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecureMsgRandomCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secureMsgRandomCode, other.secureMsgRandomCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhoneNumber()).compareTo(other.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFqUserLoginId()).compareTo(other.isSetFqUserLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFqUserLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fqUserLoginId, other.fqUserLoginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFidoResponse()).compareTo(other.isSetFidoResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFidoResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fidoResponse, other.fidoResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLdapDomain()).compareTo(other.isSetLdapDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLdapDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ldapDomain, other.ldapDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthUserResponse(");
    boolean first = true;

    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (isSetAuthMethods()) {
      if (!first) sb.append(", ");
      sb.append("authMethods:");
      if (this.authMethods == null) {
        sb.append("null");
      } else {
        sb.append(this.authMethods);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("responseTime:");
    sb.append(this.responseTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgId:");
    sb.append(this.msgId);
    first = false;
    if (isSetUserKey()) {
      if (!first) sb.append(", ");
      sb.append("userKey:");
      if (this.userKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.userKey, sb);
      }
      first = false;
    }
    if (isSetSessionCookie()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookie:");
      if (this.sessionCookie == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionCookie);
      }
      first = false;
    }
    if (isSetSessionCookieExpiresOn()) {
      if (!first) sb.append(", ");
      sb.append("sessionCookieExpiresOn:");
      sb.append(this.sessionCookieExpiresOn);
      first = false;
    }
    if (isSetSecureMsgRandomCode()) {
      if (!first) sb.append(", ");
      sb.append("secureMsgRandomCode:");
      if (this.secureMsgRandomCode == null) {
        sb.append("null");
      } else {
        sb.append(this.secureMsgRandomCode);
      }
      first = false;
    }
    if (isSetPhoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
    }
    if (isSetFqUserLoginId()) {
      if (!first) sb.append(", ");
      sb.append("fqUserLoginId:");
      if (this.fqUserLoginId == null) {
        sb.append("null");
      } else {
        sb.append(this.fqUserLoginId);
      }
      first = false;
    }
    if (isSetFidoResponse()) {
      if (!first) sb.append(", ");
      sb.append("fidoResponse:");
      if (this.fidoResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.fidoResponse);
      }
      first = false;
    }
    if (isSetLdapDomain()) {
      if (!first) sb.append(", ");
      sb.append("ldapDomain:");
      if (this.ldapDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.ldapDomain);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthUserResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthUserResponseStandardScheme getScheme() {
      return new AuthUserResponseStandardScheme();
    }
  }

  private static class AuthUserResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthUserResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthUserResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.success = iprot.readBool();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTH_METHODS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.authMethods = new java.util.ArrayList<com.doubleclue.comm.thrift.ThriftAuthMethod>(_list10.size);
                @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ThriftAuthMethod _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = com.doubleclue.comm.thrift.ThriftAuthMethod.findByValue(iprot.readI32());
                  if (_elem11 != null)
                  {
                    struct.authMethods.add(_elem11);
                  }
                }
                iprot.readListEnd();
              }
              struct.setAuthMethodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseTime = iprot.readI32();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userKey = iprot.readBinary();
              struct.setUserKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SESSION_COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionCookie = iprot.readString();
              struct.setSessionCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SESSION_COOKIE_EXPIRES_ON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionCookieExpiresOn = iprot.readI32();
              struct.setSessionCookieExpiresOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SECURE_MSG_RANDOM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secureMsgRandomCode = iprot.readString();
              struct.setSecureMsgRandomCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FQ_USER_LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fqUserLoginId = iprot.readString();
              struct.setFqUserLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIDO_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fidoResponse = iprot.readString();
              struct.setFidoResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LDAP_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ldapDomain = iprot.readString();
              struct.setLdapDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthUserResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.success);
      oprot.writeFieldEnd();
      if (struct.authMethods != null) {
        if (struct.isSetAuthMethods()) {
          oprot.writeFieldBegin(AUTH_METHODS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.authMethods.size()));
            for (com.doubleclue.comm.thrift.ThriftAuthMethod _iter13 : struct.authMethods)
            {
              oprot.writeI32(_iter13.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
      oprot.writeI32(struct.responseTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msgId);
      oprot.writeFieldEnd();
      if (struct.userKey != null) {
        if (struct.isSetUserKey()) {
          oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
          oprot.writeBinary(struct.userKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionCookie != null) {
        if (struct.isSetSessionCookie()) {
          oprot.writeFieldBegin(SESSION_COOKIE_FIELD_DESC);
          oprot.writeString(struct.sessionCookie);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeFieldBegin(SESSION_COOKIE_EXPIRES_ON_FIELD_DESC);
        oprot.writeI32(struct.sessionCookieExpiresOn);
        oprot.writeFieldEnd();
      }
      if (struct.secureMsgRandomCode != null) {
        if (struct.isSetSecureMsgRandomCode()) {
          oprot.writeFieldBegin(SECURE_MSG_RANDOM_CODE_FIELD_DESC);
          oprot.writeString(struct.secureMsgRandomCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phoneNumber != null) {
        if (struct.isSetPhoneNumber()) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fqUserLoginId != null) {
        if (struct.isSetFqUserLoginId()) {
          oprot.writeFieldBegin(FQ_USER_LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.fqUserLoginId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fidoResponse != null) {
        if (struct.isSetFidoResponse()) {
          oprot.writeFieldBegin(FIDO_RESPONSE_FIELD_DESC);
          oprot.writeString(struct.fidoResponse);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ldapDomain != null) {
        if (struct.isSetLdapDomain()) {
          oprot.writeFieldBegin(LDAP_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.ldapDomain);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthUserResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthUserResponseTupleScheme getScheme() {
      return new AuthUserResponseTupleScheme();
    }
  }

  private static class AuthUserResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthUserResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthUserResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSuccess()) {
        optionals.set(0);
      }
      if (struct.isSetAuthMethods()) {
        optionals.set(1);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(2);
      }
      if (struct.isSetMsgId()) {
        optionals.set(3);
      }
      if (struct.isSetUserKey()) {
        optionals.set(4);
      }
      if (struct.isSetSessionCookie()) {
        optionals.set(5);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        optionals.set(6);
      }
      if (struct.isSetSecureMsgRandomCode()) {
        optionals.set(7);
      }
      if (struct.isSetPhoneNumber()) {
        optionals.set(8);
      }
      if (struct.isSetFqUserLoginId()) {
        optionals.set(9);
      }
      if (struct.isSetFidoResponse()) {
        optionals.set(10);
      }
      if (struct.isSetLdapDomain()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSuccess()) {
        oprot.writeBool(struct.success);
      }
      if (struct.isSetAuthMethods()) {
        {
          oprot.writeI32(struct.authMethods.size());
          for (com.doubleclue.comm.thrift.ThriftAuthMethod _iter14 : struct.authMethods)
          {
            oprot.writeI32(_iter14.getValue());
          }
        }
      }
      if (struct.isSetResponseTime()) {
        oprot.writeI32(struct.responseTime);
      }
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.msgId);
      }
      if (struct.isSetUserKey()) {
        oprot.writeBinary(struct.userKey);
      }
      if (struct.isSetSessionCookie()) {
        oprot.writeString(struct.sessionCookie);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeI32(struct.sessionCookieExpiresOn);
      }
      if (struct.isSetSecureMsgRandomCode()) {
        oprot.writeString(struct.secureMsgRandomCode);
      }
      if (struct.isSetPhoneNumber()) {
        oprot.writeString(struct.phoneNumber);
      }
      if (struct.isSetFqUserLoginId()) {
        oprot.writeString(struct.fqUserLoginId);
      }
      if (struct.isSetFidoResponse()) {
        oprot.writeString(struct.fidoResponse);
      }
      if (struct.isSetLdapDomain()) {
        oprot.writeString(struct.ldapDomain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthUserResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.success = iprot.readBool();
        struct.setSuccessIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.authMethods = new java.util.ArrayList<com.doubleclue.comm.thrift.ThriftAuthMethod>(_list15.size);
          @org.apache.thrift.annotation.Nullable com.doubleclue.comm.thrift.ThriftAuthMethod _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = com.doubleclue.comm.thrift.ThriftAuthMethod.findByValue(iprot.readI32());
            if (_elem16 != null)
            {
              struct.authMethods.add(_elem16);
            }
          }
        }
        struct.setAuthMethodsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.responseTime = iprot.readI32();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userKey = iprot.readBinary();
        struct.setUserKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sessionCookie = iprot.readString();
        struct.setSessionCookieIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sessionCookieExpiresOn = iprot.readI32();
        struct.setSessionCookieExpiresOnIsSet(true);
      }
      if (incoming.get(7)) {
        struct.secureMsgRandomCode = iprot.readString();
        struct.setSecureMsgRandomCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phoneNumber = iprot.readString();
        struct.setPhoneNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fqUserLoginId = iprot.readString();
        struct.setFqUserLoginIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fidoResponse = iprot.readString();
        struct.setFidoResponseIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ldapDomain = iprot.readString();
        struct.setLdapDomainIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

