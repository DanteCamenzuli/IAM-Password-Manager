/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.doubleclue.comm.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-10-21")
public class SdkSettings implements org.apache.thrift.TBase<SdkSettings, SdkSettings._Fields>, java.io.Serializable, Cloneable, Comparable<SdkSettings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SdkSettings");

  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRIVATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("privateKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OFFLINE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineKey", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PASSCODE_VALID_FOR_FIELD_DESC = new org.apache.thrift.protocol.TField("passcodeValidFor", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SAFE_FIELD_DESC = new org.apache.thrift.protocol.TField("safe", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookie", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SESSION_COOKIE_EXPIRES_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionCookieExpiresOn", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SdkSettingsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SdkSettingsTupleSchemeFactory();

  public int deviceId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String userId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String deviceName; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer privateKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer publicKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer offlineKey; // required
  public int passcodeValidFor; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> safe; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sessionCookie; // required
  public int sessionCookieExpiresOn; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_ID((short)1, "deviceId"),
    USER_ID((short)2, "userId"),
    DEVICE_NAME((short)3, "deviceName"),
    PRIVATE_KEY((short)4, "privateKey"),
    PUBLIC_KEY((short)5, "publicKey"),
    OFFLINE_KEY((short)6, "offlineKey"),
    PASSCODE_VALID_FOR((short)7, "passcodeValidFor"),
    SAFE((short)8, "safe"),
    SESSION_COOKIE((short)9, "sessionCookie"),
    SESSION_COOKIE_EXPIRES_ON((short)10, "sessionCookieExpiresOn");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_ID
          return DEVICE_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // DEVICE_NAME
          return DEVICE_NAME;
        case 4: // PRIVATE_KEY
          return PRIVATE_KEY;
        case 5: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 6: // OFFLINE_KEY
          return OFFLINE_KEY;
        case 7: // PASSCODE_VALID_FOR
          return PASSCODE_VALID_FOR;
        case 8: // SAFE
          return SAFE;
        case 9: // SESSION_COOKIE
          return SESSION_COOKIE;
        case 10: // SESSION_COOKIE_EXPIRES_ON
          return SESSION_COOKIE_EXPIRES_ON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEVICEID_ISSET_ID = 0;
  private static final int __PASSCODEVALIDFOR_ISSET_ID = 1;
  private static final int __SESSIONCOOKIEEXPIRESON_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("deviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("privateKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OFFLINE_KEY, new org.apache.thrift.meta_data.FieldMetaData("offlineKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PASSCODE_VALID_FOR, new org.apache.thrift.meta_data.FieldMetaData("passcodeValidFor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAFE, new org.apache.thrift.meta_data.FieldMetaData("safe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SESSION_COOKIE, new org.apache.thrift.meta_data.FieldMetaData("sessionCookie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SESSION_COOKIE_EXPIRES_ON, new org.apache.thrift.meta_data.FieldMetaData("sessionCookieExpiresOn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SdkSettings.class, metaDataMap);
  }

  public SdkSettings() {
  }

  public SdkSettings(
    int deviceId,
    java.lang.String userId,
    java.lang.String deviceName,
    java.nio.ByteBuffer privateKey,
    java.nio.ByteBuffer publicKey,
    java.nio.ByteBuffer offlineKey,
    int passcodeValidFor,
    java.util.Map<java.lang.String,java.lang.String> safe,
    java.nio.ByteBuffer sessionCookie,
    int sessionCookieExpiresOn)
  {
    this();
    this.deviceId = deviceId;
    setDeviceIdIsSet(true);
    this.userId = userId;
    this.deviceName = deviceName;
    this.privateKey = org.apache.thrift.TBaseHelper.copyBinary(privateKey);
    this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(publicKey);
    this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
    this.passcodeValidFor = passcodeValidFor;
    setPasscodeValidForIsSet(true);
    this.safe = safe;
    this.sessionCookie = org.apache.thrift.TBaseHelper.copyBinary(sessionCookie);
    this.sessionCookieExpiresOn = sessionCookieExpiresOn;
    setSessionCookieExpiresOnIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SdkSettings(SdkSettings other) {
    __isset_bitfield = other.__isset_bitfield;
    this.deviceId = other.deviceId;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetDeviceName()) {
      this.deviceName = other.deviceName;
    }
    if (other.isSetPrivateKey()) {
      this.privateKey = org.apache.thrift.TBaseHelper.copyBinary(other.privateKey);
    }
    if (other.isSetPublicKey()) {
      this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(other.publicKey);
    }
    if (other.isSetOfflineKey()) {
      this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(other.offlineKey);
    }
    this.passcodeValidFor = other.passcodeValidFor;
    if (other.isSetSafe()) {
      java.util.Map<java.lang.String,java.lang.String> __this__safe = new java.util.HashMap<java.lang.String,java.lang.String>(other.safe);
      this.safe = __this__safe;
    }
    if (other.isSetSessionCookie()) {
      this.sessionCookie = org.apache.thrift.TBaseHelper.copyBinary(other.sessionCookie);
    }
    this.sessionCookieExpiresOn = other.sessionCookieExpiresOn;
  }

  public SdkSettings deepCopy() {
    return new SdkSettings(this);
  }

  @Override
  public void clear() {
    setDeviceIdIsSet(false);
    this.deviceId = 0;
    this.userId = null;
    this.deviceName = null;
    this.privateKey = null;
    this.publicKey = null;
    this.offlineKey = null;
    setPasscodeValidForIsSet(false);
    this.passcodeValidFor = 0;
    this.safe = null;
    this.sessionCookie = null;
    setSessionCookieExpiresOnIsSet(false);
    this.sessionCookieExpiresOn = 0;
  }

  public int getDeviceId() {
    return this.deviceId;
  }

  public SdkSettings setDeviceId(int deviceId) {
    this.deviceId = deviceId;
    setDeviceIdIsSet(true);
    return this;
  }

  public void unsetDeviceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEVICEID_ISSET_ID);
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEVICEID_ISSET_ID);
  }

  public void setDeviceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEVICEID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserId() {
    return this.userId;
  }

  public SdkSettings setUserId(@org.apache.thrift.annotation.Nullable java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeviceName() {
    return this.deviceName;
  }

  public SdkSettings setDeviceName(@org.apache.thrift.annotation.Nullable java.lang.String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  public void unsetDeviceName() {
    this.deviceName = null;
  }

  /** Returns true if field deviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceName() {
    return this.deviceName != null;
  }

  public void setDeviceNameIsSet(boolean value) {
    if (!value) {
      this.deviceName = null;
    }
  }

  public byte[] getPrivateKey() {
    setPrivateKey(org.apache.thrift.TBaseHelper.rightSize(privateKey));
    return privateKey == null ? null : privateKey.array();
  }

  public java.nio.ByteBuffer bufferForPrivateKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(privateKey);
  }

  public SdkSettings setPrivateKey(byte[] privateKey) {
    this.privateKey = privateKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(privateKey.clone());
    return this;
  }

  public SdkSettings setPrivateKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer privateKey) {
    this.privateKey = org.apache.thrift.TBaseHelper.copyBinary(privateKey);
    return this;
  }

  public void unsetPrivateKey() {
    this.privateKey = null;
  }

  /** Returns true if field privateKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivateKey() {
    return this.privateKey != null;
  }

  public void setPrivateKeyIsSet(boolean value) {
    if (!value) {
      this.privateKey = null;
    }
  }

  public byte[] getPublicKey() {
    setPublicKey(org.apache.thrift.TBaseHelper.rightSize(publicKey));
    return publicKey == null ? null : publicKey.array();
  }

  public java.nio.ByteBuffer bufferForPublicKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(publicKey);
  }

  public SdkSettings setPublicKey(byte[] publicKey) {
    this.publicKey = publicKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(publicKey.clone());
    return this;
  }

  public SdkSettings setPublicKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer publicKey) {
    this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(publicKey);
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public byte[] getOfflineKey() {
    setOfflineKey(org.apache.thrift.TBaseHelper.rightSize(offlineKey));
    return offlineKey == null ? null : offlineKey.array();
  }

  public java.nio.ByteBuffer bufferForOfflineKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
  }

  public SdkSettings setOfflineKey(byte[] offlineKey) {
    this.offlineKey = offlineKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(offlineKey.clone());
    return this;
  }

  public SdkSettings setOfflineKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer offlineKey) {
    this.offlineKey = org.apache.thrift.TBaseHelper.copyBinary(offlineKey);
    return this;
  }

  public void unsetOfflineKey() {
    this.offlineKey = null;
  }

  /** Returns true if field offlineKey is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineKey() {
    return this.offlineKey != null;
  }

  public void setOfflineKeyIsSet(boolean value) {
    if (!value) {
      this.offlineKey = null;
    }
  }

  public int getPasscodeValidFor() {
    return this.passcodeValidFor;
  }

  public SdkSettings setPasscodeValidFor(int passcodeValidFor) {
    this.passcodeValidFor = passcodeValidFor;
    setPasscodeValidForIsSet(true);
    return this;
  }

  public void unsetPasscodeValidFor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PASSCODEVALIDFOR_ISSET_ID);
  }

  /** Returns true if field passcodeValidFor is set (has been assigned a value) and false otherwise */
  public boolean isSetPasscodeValidFor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PASSCODEVALIDFOR_ISSET_ID);
  }

  public void setPasscodeValidForIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PASSCODEVALIDFOR_ISSET_ID, value);
  }

  public int getSafeSize() {
    return (this.safe == null) ? 0 : this.safe.size();
  }

  public void putToSafe(java.lang.String key, java.lang.String val) {
    if (this.safe == null) {
      this.safe = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.safe.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getSafe() {
    return this.safe;
  }

  public SdkSettings setSafe(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> safe) {
    this.safe = safe;
    return this;
  }

  public void unsetSafe() {
    this.safe = null;
  }

  /** Returns true if field safe is set (has been assigned a value) and false otherwise */
  public boolean isSetSafe() {
    return this.safe != null;
  }

  public void setSafeIsSet(boolean value) {
    if (!value) {
      this.safe = null;
    }
  }

  public byte[] getSessionCookie() {
    setSessionCookie(org.apache.thrift.TBaseHelper.rightSize(sessionCookie));
    return sessionCookie == null ? null : sessionCookie.array();
  }

  public java.nio.ByteBuffer bufferForSessionCookie() {
    return org.apache.thrift.TBaseHelper.copyBinary(sessionCookie);
  }

  public SdkSettings setSessionCookie(byte[] sessionCookie) {
    this.sessionCookie = sessionCookie == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(sessionCookie.clone());
    return this;
  }

  public SdkSettings setSessionCookie(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer sessionCookie) {
    this.sessionCookie = org.apache.thrift.TBaseHelper.copyBinary(sessionCookie);
    return this;
  }

  public void unsetSessionCookie() {
    this.sessionCookie = null;
  }

  /** Returns true if field sessionCookie is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookie() {
    return this.sessionCookie != null;
  }

  public void setSessionCookieIsSet(boolean value) {
    if (!value) {
      this.sessionCookie = null;
    }
  }

  public int getSessionCookieExpiresOn() {
    return this.sessionCookieExpiresOn;
  }

  public SdkSettings setSessionCookieExpiresOn(int sessionCookieExpiresOn) {
    this.sessionCookieExpiresOn = sessionCookieExpiresOn;
    setSessionCookieExpiresOnIsSet(true);
    return this;
  }

  public void unsetSessionCookieExpiresOn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  /** Returns true if field sessionCookieExpiresOn is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionCookieExpiresOn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID);
  }

  public void setSessionCookieExpiresOnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONCOOKIEEXPIRESON_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((java.lang.Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case DEVICE_NAME:
      if (value == null) {
        unsetDeviceName();
      } else {
        setDeviceName((java.lang.String)value);
      }
      break;

    case PRIVATE_KEY:
      if (value == null) {
        unsetPrivateKey();
      } else {
        if (value instanceof byte[]) {
          setPrivateKey((byte[])value);
        } else {
          setPrivateKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        if (value instanceof byte[]) {
          setPublicKey((byte[])value);
        } else {
          setPublicKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OFFLINE_KEY:
      if (value == null) {
        unsetOfflineKey();
      } else {
        if (value instanceof byte[]) {
          setOfflineKey((byte[])value);
        } else {
          setOfflineKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PASSCODE_VALID_FOR:
      if (value == null) {
        unsetPasscodeValidFor();
      } else {
        setPasscodeValidFor((java.lang.Integer)value);
      }
      break;

    case SAFE:
      if (value == null) {
        unsetSafe();
      } else {
        setSafe((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case SESSION_COOKIE:
      if (value == null) {
        unsetSessionCookie();
      } else {
        if (value instanceof byte[]) {
          setSessionCookie((byte[])value);
        } else {
          setSessionCookie((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SESSION_COOKIE_EXPIRES_ON:
      if (value == null) {
        unsetSessionCookieExpiresOn();
      } else {
        setSessionCookieExpiresOn((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_ID:
      return getDeviceId();

    case USER_ID:
      return getUserId();

    case DEVICE_NAME:
      return getDeviceName();

    case PRIVATE_KEY:
      return getPrivateKey();

    case PUBLIC_KEY:
      return getPublicKey();

    case OFFLINE_KEY:
      return getOfflineKey();

    case PASSCODE_VALID_FOR:
      return getPasscodeValidFor();

    case SAFE:
      return getSafe();

    case SESSION_COOKIE:
      return getSessionCookie();

    case SESSION_COOKIE_EXPIRES_ON:
      return getSessionCookieExpiresOn();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_ID:
      return isSetDeviceId();
    case USER_ID:
      return isSetUserId();
    case DEVICE_NAME:
      return isSetDeviceName();
    case PRIVATE_KEY:
      return isSetPrivateKey();
    case PUBLIC_KEY:
      return isSetPublicKey();
    case OFFLINE_KEY:
      return isSetOfflineKey();
    case PASSCODE_VALID_FOR:
      return isSetPasscodeValidFor();
    case SAFE:
      return isSetSafe();
    case SESSION_COOKIE:
      return isSetSessionCookie();
    case SESSION_COOKIE_EXPIRES_ON:
      return isSetSessionCookieExpiresOn();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SdkSettings)
      return this.equals((SdkSettings)that);
    return false;
  }

  public boolean equals(SdkSettings that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_deviceId = true;
    boolean that_present_deviceId = true;
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (this.deviceId != that.deviceId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_deviceName = true && this.isSetDeviceName();
    boolean that_present_deviceName = true && that.isSetDeviceName();
    if (this_present_deviceName || that_present_deviceName) {
      if (!(this_present_deviceName && that_present_deviceName))
        return false;
      if (!this.deviceName.equals(that.deviceName))
        return false;
    }

    boolean this_present_privateKey = true && this.isSetPrivateKey();
    boolean that_present_privateKey = true && that.isSetPrivateKey();
    if (this_present_privateKey || that_present_privateKey) {
      if (!(this_present_privateKey && that_present_privateKey))
        return false;
      if (!this.privateKey.equals(that.privateKey))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    boolean this_present_offlineKey = true && this.isSetOfflineKey();
    boolean that_present_offlineKey = true && that.isSetOfflineKey();
    if (this_present_offlineKey || that_present_offlineKey) {
      if (!(this_present_offlineKey && that_present_offlineKey))
        return false;
      if (!this.offlineKey.equals(that.offlineKey))
        return false;
    }

    boolean this_present_passcodeValidFor = true;
    boolean that_present_passcodeValidFor = true;
    if (this_present_passcodeValidFor || that_present_passcodeValidFor) {
      if (!(this_present_passcodeValidFor && that_present_passcodeValidFor))
        return false;
      if (this.passcodeValidFor != that.passcodeValidFor)
        return false;
    }

    boolean this_present_safe = true && this.isSetSafe();
    boolean that_present_safe = true && that.isSetSafe();
    if (this_present_safe || that_present_safe) {
      if (!(this_present_safe && that_present_safe))
        return false;
      if (!this.safe.equals(that.safe))
        return false;
    }

    boolean this_present_sessionCookie = true && this.isSetSessionCookie();
    boolean that_present_sessionCookie = true && that.isSetSessionCookie();
    if (this_present_sessionCookie || that_present_sessionCookie) {
      if (!(this_present_sessionCookie && that_present_sessionCookie))
        return false;
      if (!this.sessionCookie.equals(that.sessionCookie))
        return false;
    }

    boolean this_present_sessionCookieExpiresOn = true;
    boolean that_present_sessionCookieExpiresOn = true;
    if (this_present_sessionCookieExpiresOn || that_present_sessionCookieExpiresOn) {
      if (!(this_present_sessionCookieExpiresOn && that_present_sessionCookieExpiresOn))
        return false;
      if (this.sessionCookieExpiresOn != that.sessionCookieExpiresOn)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + deviceId;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceName()) ? 131071 : 524287);
    if (isSetDeviceName())
      hashCode = hashCode * 8191 + deviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrivateKey()) ? 131071 : 524287);
    if (isSetPrivateKey())
      hashCode = hashCode * 8191 + privateKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
    if (isSetPublicKey())
      hashCode = hashCode * 8191 + publicKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetOfflineKey()) ? 131071 : 524287);
    if (isSetOfflineKey())
      hashCode = hashCode * 8191 + offlineKey.hashCode();

    hashCode = hashCode * 8191 + passcodeValidFor;

    hashCode = hashCode * 8191 + ((isSetSafe()) ? 131071 : 524287);
    if (isSetSafe())
      hashCode = hashCode * 8191 + safe.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionCookie()) ? 131071 : 524287);
    if (isSetSessionCookie())
      hashCode = hashCode * 8191 + sessionCookie.hashCode();

    hashCode = hashCode * 8191 + sessionCookieExpiresOn;

    return hashCode;
  }

  @Override
  public int compareTo(SdkSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceName()).compareTo(other.isSetDeviceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceName, other.deviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivateKey()).compareTo(other.isSetPrivateKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivateKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateKey, other.privateKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublicKey()).compareTo(other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfflineKey()).compareTo(other.isSetOfflineKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineKey, other.offlineKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPasscodeValidFor()).compareTo(other.isSetPasscodeValidFor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasscodeValidFor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passcodeValidFor, other.passcodeValidFor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSafe()).compareTo(other.isSetSafe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.safe, other.safe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookie()).compareTo(other.isSetSessionCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookie, other.sessionCookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionCookieExpiresOn()).compareTo(other.isSetSessionCookieExpiresOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionCookieExpiresOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionCookieExpiresOn, other.sessionCookieExpiresOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SdkSettings(");
    boolean first = true;

    sb.append("deviceId:");
    sb.append(this.deviceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceName:");
    if (this.deviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privateKey:");
    if (this.privateKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.privateKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.publicKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offlineKey:");
    if (this.offlineKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.offlineKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passcodeValidFor:");
    sb.append(this.passcodeValidFor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("safe:");
    if (this.safe == null) {
      sb.append("null");
    } else {
      sb.append(this.safe);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionCookie:");
    if (this.sessionCookie == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.sessionCookie, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionCookieExpiresOn:");
    sb.append(this.sessionCookieExpiresOn);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SdkSettingsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SdkSettingsStandardScheme getScheme() {
      return new SdkSettingsStandardScheme();
    }
  }

  private static class SdkSettingsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SdkSettings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SdkSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceId = iprot.readI32();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceName = iprot.readString();
              struct.setDeviceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIVATE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privateKey = iprot.readBinary();
              struct.setPrivateKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicKey = iprot.readBinary();
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OFFLINE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offlineKey = iprot.readBinary();
              struct.setOfflineKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PASSCODE_VALID_FOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.passcodeValidFor = iprot.readI32();
              struct.setPasscodeValidForIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SAFE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.safe = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.safe.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setSafeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SESSION_COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionCookie = iprot.readBinary();
              struct.setSessionCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SESSION_COOKIE_EXPIRES_ON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionCookieExpiresOn = iprot.readI32();
              struct.setSessionCookieExpiresOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SdkSettings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
      oprot.writeI32(struct.deviceId);
      oprot.writeFieldEnd();
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceName != null) {
        oprot.writeFieldBegin(DEVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.deviceName);
        oprot.writeFieldEnd();
      }
      if (struct.privateKey != null) {
        oprot.writeFieldBegin(PRIVATE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.privateKey);
        oprot.writeFieldEnd();
      }
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.publicKey);
        oprot.writeFieldEnd();
      }
      if (struct.offlineKey != null) {
        oprot.writeFieldBegin(OFFLINE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.offlineKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PASSCODE_VALID_FOR_FIELD_DESC);
      oprot.writeI32(struct.passcodeValidFor);
      oprot.writeFieldEnd();
      if (struct.safe != null) {
        oprot.writeFieldBegin(SAFE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.safe.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.safe.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sessionCookie != null) {
        oprot.writeFieldBegin(SESSION_COOKIE_FIELD_DESC);
        oprot.writeBinary(struct.sessionCookie);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_COOKIE_EXPIRES_ON_FIELD_DESC);
      oprot.writeI32(struct.sessionCookieExpiresOn);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SdkSettingsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SdkSettingsTupleScheme getScheme() {
      return new SdkSettingsTupleScheme();
    }
  }

  private static class SdkSettingsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SdkSettings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SdkSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeviceId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceName()) {
        optionals.set(2);
      }
      if (struct.isSetPrivateKey()) {
        optionals.set(3);
      }
      if (struct.isSetPublicKey()) {
        optionals.set(4);
      }
      if (struct.isSetOfflineKey()) {
        optionals.set(5);
      }
      if (struct.isSetPasscodeValidFor()) {
        optionals.set(6);
      }
      if (struct.isSetSafe()) {
        optionals.set(7);
      }
      if (struct.isSetSessionCookie()) {
        optionals.set(8);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDeviceId()) {
        oprot.writeI32(struct.deviceId);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetDeviceName()) {
        oprot.writeString(struct.deviceName);
      }
      if (struct.isSetPrivateKey()) {
        oprot.writeBinary(struct.privateKey);
      }
      if (struct.isSetPublicKey()) {
        oprot.writeBinary(struct.publicKey);
      }
      if (struct.isSetOfflineKey()) {
        oprot.writeBinary(struct.offlineKey);
      }
      if (struct.isSetPasscodeValidFor()) {
        oprot.writeI32(struct.passcodeValidFor);
      }
      if (struct.isSetSafe()) {
        {
          oprot.writeI32(struct.safe.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.safe.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetSessionCookie()) {
        oprot.writeBinary(struct.sessionCookie);
      }
      if (struct.isSetSessionCookieExpiresOn()) {
        oprot.writeI32(struct.sessionCookieExpiresOn);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SdkSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.deviceId = iprot.readI32();
        struct.setDeviceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceName = iprot.readString();
        struct.setDeviceNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.privateKey = iprot.readBinary();
        struct.setPrivateKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.publicKey = iprot.readBinary();
        struct.setPublicKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.offlineKey = iprot.readBinary();
        struct.setOfflineKeyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.passcodeValidFor = iprot.readI32();
        struct.setPasscodeValidForIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.safe = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.safe.put(_key7, _val8);
          }
        }
        struct.setSafeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sessionCookie = iprot.readBinary();
        struct.setSessionCookieIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sessionCookieExpiresOn = iprot.readI32();
        struct.setSessionCookieExpiresOnIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

