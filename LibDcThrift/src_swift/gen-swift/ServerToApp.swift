/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


/// Ahh, now onto the cool part, defining a service. Services just need a name
/// and can optionally inherit from another service using the extends keyword.
public protocol ServerToApp {

  ///
  /// - Throws: AppException
  func disconnect() throws

  ///
  /// - Parameters:
  ///   - appMessage: 
  /// - Returns: Bool
  /// - Throws: AppException
  func sendMessage(appMessage: AppMessage) throws -> Bool

  ///
  /// - Parameters:
  ///   - authAppMessageResponse: 
  /// - Throws: AppException
  func authAppMessageResponse(authAppMessageResponse: AuthAppMessageResponse) throws

  ///
  /// - Parameters:
  ///   - proxyOpenParam: 
  /// - Throws: AppException
  func proxyOpen(proxyOpenParam: ProxyOpenParam) throws

  ///
  /// - Parameters:
  ///   - handle: 
  ///   - data: 
  /// - Returns: Data
  /// - Throws: AppException
  func proxyData(handle: Int64, data: Data) throws -> Data

  ///
  /// - Parameters:
  ///   - handle: 
  /// - Throws: 
  func proxyClose(handle: Int64) throws

}

open class ServerToAppClient : TClient /* , ServerToApp */ {

}

open class ServerToAppProcessor /* ServerToApp */ {

  typealias ProcessorHandlerDictionary = [String: (Int32, TProtocol, TProtocol, ServerToApp) throws -> Void]

  public var service: ServerToApp

  public required init(service: ServerToApp) {
    self.service = service
  }

}


