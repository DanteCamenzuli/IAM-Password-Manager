//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Int64 = require('node-int64');


/**
 * Thrift also lets you define constants for use across languages. Complex
 * types and structs are specified using JSON notation.
 */
export declare class ServerSignatureParam {
  dataForSignature: string;
  appVersion: AppVersion;
  libVersion: AppVersion;
  domainName: string;
  iamDcem: boolean;
  commClientType: CommClientType;

    constructor(args?: { dataForSignature: string; appVersion: AppVersion; libVersion: AppVersion; domainName: string; iamDcem: boolean; commClientType: CommClientType; });
}

export declare class ServerSignatureResponse {
  serverSignature: string;
  serverVersion: AppVersion;
  isReverseProxy: boolean;
  isDispatched: boolean;
  challenge: string;

    constructor(args?: { serverSignature: string; serverVersion: AppVersion; isReverseProxy: boolean; isDispatched: boolean; challenge: string; });
}

export declare class DomainSdkConfigParam {
  domainName: string;
  activationCode: string;
  userId: string;
  dispatcherSignature: string;

    constructor(args?: { domainName: string; activationCode: string; userId: string; dispatcherSignature?: string; });
}

export declare class DomainSdkConfigResponse {
  sdkConfigDcem: string;

    constructor(args?: { sdkConfigDcem?: string; });
}

export declare class RegisterDispatcherParam {
  domainName: string;
  dispatcherSignature: string;
  pnKey: string;

    constructor(args?: { domainName: string; dispatcherSignature: string; pnKey: string; });
}

export declare class RegisterDispatcherResponse {
  clusterId: string;

    constructor(args?: { clusterId: string; });
}

export declare class ActivationParam {
  activationCode: string;
  userId: string;
  udid: string;
  encPassword: string;
  cpuArch: CpuArch;
  osVersion: string;
  locale: string;
  manufacture: string;
  deviceModel: string;
  deviceName: string;
  publicKey: string;
  signature: string;
  clientType: ClientType;
  digest: string;
  risk: string;

    constructor(args?: { activationCode: string; userId: string; udid: string; encPassword: string; cpuArch: CpuArch; osVersion: string; locale: string; manufacture: string; deviceModel: string; deviceName: string; publicKey: string; signature: string; clientType: ClientType; digest?: string; risk?: string; });
}

export declare class ActivationResponse {
  updateAvailable: boolean;
  deviceId: number;
  signedCertificate: string;
  deviceKey: string;
  offlineKey: string;
  deviceName: string;

    constructor(args?: { updateAvailable: boolean; deviceId: number; signedCertificate: string; deviceKey: string; offlineKey: string; deviceName: string; });
}

export declare class LoginParam {
  deviceId: number;
  udid: string;
  encPassword: string;
  osVersion: string;
  locale: string;
  hotpCounter: number;
  digest: string;
  risk: string;
  passwordLess: boolean;
  cpuArch: CpuArch;
  commClientType: CommClientType;

    constructor(args?: { deviceId: number; udid: string; encPassword: string; osVersion: string; locale: string; hotpCounter: number; digest?: string; risk?: string; passwordLess: boolean; cpuArch: CpuArch; commClientType: CommClientType; });
}

export declare class LoginResponse {
  deviceKey: string;
  oneTimePassword: string;
  updateAvailableTill: Int64;
  passcodeValidFor: number;
  updateInfo: string;
  licenceExpiresOn: Int64;
  testLicence: boolean;
  ldapUser: boolean;
  keepAliveSeconds: number;

    constructor(args?: { deviceKey: string; oneTimePassword: string; updateAvailableTill: Int64; passcodeValidFor: number; updateInfo?: string; licenceExpiresOn: Int64; testLicence: boolean; ldapUser: boolean; keepAliveSeconds: number; });
}

export declare class RequestActivationCodeResponse {
  activationCode: string;
  validTill: Int64;

    constructor(args?: { activationCode: string; validTill: Int64; });
}

export declare class AuthUserParam {
  authGatewayId: string;
  loginId: string;
  authMethod: ThriftAuthMethod;
  encPassword: string;
  encPasscode: string;
  sharedSecret: string;
  udid: string;
  workstationName: string;
  clientType: ClientType;
  propertyMap: { [k: string]: string; };

    constructor(args?: { authGatewayId: string; loginId: string; authMethod: ThriftAuthMethod; encPassword: string; encPasscode: string; sharedSecret: string; udid: string; workstationName: string; clientType: ClientType; propertyMap: { [k: string]: string; }; });
}

export declare class AuthUserResponse {
  success: boolean;
  authMethods: ThriftAuthMethod[];
  responseTime: number;
  msgId: Int64;
  userKey: string;
  sessionCookie: string;
  sessionCookieExpiresOn: number;
  secureMsgRandomCode: string;
  phoneNumber: string;
  fqUserLoginId: string;
  fidoResponse: string;
  ldapDomain: string;

    constructor(args?: { success: boolean; authMethods: ThriftAuthMethod[]; responseTime: number; msgId: Int64; userKey: string; sessionCookie: string; sessionCookieExpiresOn: number; secureMsgRandomCode: string; phoneNumber: string; fqUserLoginId: string; fidoResponse: string; ldapDomain: string; });
}

export declare class AuthConnectParam {
  authGatewayId: string;
  sharedSecret: string;
  workstationName: string;
  udid: string;

    constructor(args?: { authGatewayId: string; sharedSecret: string; workstationName: string; udid: string; });
}

export declare class AuthSelectParam {
  authGatewayId: string;
  loginId: string;
  sharedSecret: string;
  udid: string;
  workstationName: string;
  clientType: ClientType;

    constructor(args?: { authGatewayId: string; loginId: string; sharedSecret: string; udid: string; workstationName: string; clientType: ClientType; });
}

export declare class AuthSelectResponse {
  authMethods: ThriftAuthMethod[];

    constructor(args?: { authMethods: ThriftAuthMethod[]; });
}

export declare class QrCodeResponse {
  timeToLive: number;
  data: string;

    constructor(args?: { timeToLive: number; data: string; });
}

export declare class SignatureParam {
  clientSignature: string;
  appDigest: string;

    constructor(args?: { clientSignature: string; appDigest: string; });
}

export declare class SignatureResponse {
  reconnectTicket: string;
  keepAliveSeconds: number;

    constructor(args?: { reconnectTicket: string; keepAliveSeconds: number; });
}

export declare class DeviceOfflineKey {
  deviceId: number;
  udid: string;
  offlineKey: string;

    constructor(args?: { deviceId: number; udid: string; offlineKey: string; });
}

export declare class DeviceOfflineKeysResponse {
  window: number;
  validFor: number;
  deviceOfflineKeys: DeviceOfflineKey[];

    constructor(args?: { window: number; validFor: number; deviceOfflineKeys: DeviceOfflineKey[]; });
}
