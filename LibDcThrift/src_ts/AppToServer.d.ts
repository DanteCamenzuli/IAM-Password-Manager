//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { AppToServer } from "./AppToServer_types";


/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
export declare class AppToServerClient {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  serverSignature(serverSignatureParam: ServerSignatureParam): ServerSignatureResponse;

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  serverSignature(serverSignatureParam: ServerSignatureParam, callback?: (data: ServerSignatureResponse)=>void): void;

  getDomainSdkConfig(domainSdkConfigParam: DomainSdkConfigParam): DomainSdkConfigResponse;

  getDomainSdkConfig(domainSdkConfigParam: DomainSdkConfigParam, callback?: (data: DomainSdkConfigResponse)=>void): void;

  registerDispatcher(registerDispatcherParam: RegisterDispatcherParam): RegisterDispatcherResponse;

  registerDispatcher(registerDispatcherParam: RegisterDispatcherParam, callback?: (data: RegisterDispatcherResponse)=>void): void;

  activation(activationParam: ActivationParam): ActivationResponse;

  activation(activationParam: ActivationParam, callback?: (data: ActivationResponse)=>void): void;

  login(loginParam: LoginParam): LoginResponse;

  login(loginParam: LoginParam, callback?: (data: LoginResponse)=>void): void;

  clientSignature(signaturenParam: SignatureParam): SignatureResponse;

  clientSignature(signaturenParam: SignatureParam, callback?: (data: SignatureResponse)=>void): void;

  getTemplateFromId(id: number): Template;

  getTemplateFromId(id: number, callback?: (data: Template)=>void): void;

  sendMessage(appMessage: AppMessage): boolean;

  sendMessage(appMessage: AppMessage, callback?: (data: boolean)=>void): void;

  sendMessageResponse(appMessageResponse: AppMessageResponse): void;

  sendMessageResponse(appMessageResponse: AppMessageResponse, callback?: (data: void)=>void): void;

  sendLoginQrCode(data: string): void;

  sendLoginQrCode(data: string, callback?: (data: void)=>void): void;

  getLoginQrCode(operatorId: string, sessionId: string): QrCodeResponse;

  getLoginQrCode(operatorId: string, sessionId: string, callback?: (data: QrCodeResponse)=>void): void;

  changePassword(encPassword: string, newEncPassword: string): void;

  changePassword(encPassword: string, newEncPassword: string, callback?: (data: void)=>void): void;

  getCloudSafe(uniqueKey: SdkCloudSafeKey, userLoginId: string): SdkCloudSafe;

  getCloudSafe(uniqueKey: SdkCloudSafeKey, userLoginId: string, callback?: (data: SdkCloudSafe)=>void): void;

  setCloudSafe(sdkCloudSafe: SdkCloudSafe): Int64;

  setCloudSafe(sdkCloudSafe: SdkCloudSafe, callback?: (data: Int64)=>void): void;

  getCloudSafeList(nameFilter: string, includeShare: boolean, modifiedFromEpoch: Int64, owner: CloudSafeOwner): SdkCloudSafe[];

  getCloudSafeList(nameFilter: string, includeShare: boolean, modifiedFromEpoch: Int64, owner: CloudSafeOwner, callback?: (data: SdkCloudSafe[])=>void): void;

  disconnect(appErrorCodes: AppErrorCodes, message: string): void;

  disconnect(appErrorCodes: AppErrorCodes, message: string, callback?: (data: void)=>void): void;

  keepAlive(): void;

  keepAlive(callback?: (data: void)=>void): void;

  deactivate(): void;

  deactivate(callback?: (data: void)=>void): void;

  requestActivationCode(): RequestActivationCodeResponse;

  requestActivationCode(callback?: (data: RequestActivationCodeResponse)=>void): void;

  verifyPassword(encPassword: string): void;

  verifyPassword(encPassword: string, callback?: (data: void)=>void): void;

  authenticateUser(authUserParam: AuthUserParam): AuthUserResponse;

  authenticateUser(authUserParam: AuthUserParam, callback?: (data: AuthUserResponse)=>void): void;

  getAuthenticationMethods(authSelectParam: AuthSelectParam): AuthSelectResponse;

  getAuthenticationMethods(authSelectParam: AuthSelectParam, callback?: (data: AuthSelectResponse)=>void): void;

  getDeviceOfflineKeys(): DeviceOfflineKeysResponse;

  getDeviceOfflineKeys(callback?: (data: DeviceOfflineKeysResponse)=>void): void;

  authConnect(authUserParam: AuthConnectParam): number;

  authConnect(authUserParam: AuthConnectParam, callback?: (data: number)=>void): void;

  proxyData(handle: Int64, data: string): string;

  proxyData(handle: Int64, data: string, callback?: (data: string)=>void): void;

  proxyClose(handle: Int64): void;

  proxyClose(handle: Int64, callback?: (data: void)=>void): void;
}
