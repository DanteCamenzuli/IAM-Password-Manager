//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

AppToServer_serverSignature_args = function(args) {
  this.serverSignatureParam = null;
  if (args) {
    if (args.serverSignatureParam !== undefined && args.serverSignatureParam !== null) {
      this.serverSignatureParam = new ServerSignatureParam(args.serverSignatureParam);
    }
  }
};
AppToServer_serverSignature_args.prototype = {};
AppToServer_serverSignature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverSignatureParam = new ServerSignatureParam();
        this.serverSignatureParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_serverSignature_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_serverSignature_args');
  if (this.serverSignatureParam !== null && this.serverSignatureParam !== undefined) {
    output.writeFieldBegin('serverSignatureParam', Thrift.Type.STRUCT, 1);
    this.serverSignatureParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_serverSignature_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ServerSignatureResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_serverSignature_result.prototype = {};
AppToServer_serverSignature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ServerSignatureResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_serverSignature_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_serverSignature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getDomainSdkConfig_args = function(args) {
  this.domainSdkConfigParam = null;
  if (args) {
    if (args.domainSdkConfigParam !== undefined && args.domainSdkConfigParam !== null) {
      this.domainSdkConfigParam = new DomainSdkConfigParam(args.domainSdkConfigParam);
    }
  }
};
AppToServer_getDomainSdkConfig_args.prototype = {};
AppToServer_getDomainSdkConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.domainSdkConfigParam = new DomainSdkConfigParam();
        this.domainSdkConfigParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getDomainSdkConfig_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getDomainSdkConfig_args');
  if (this.domainSdkConfigParam !== null && this.domainSdkConfigParam !== undefined) {
    output.writeFieldBegin('domainSdkConfigParam', Thrift.Type.STRUCT, 1);
    this.domainSdkConfigParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getDomainSdkConfig_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DomainSdkConfigResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getDomainSdkConfig_result.prototype = {};
AppToServer_getDomainSdkConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DomainSdkConfigResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getDomainSdkConfig_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getDomainSdkConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_registerDispatcher_args = function(args) {
  this.registerDispatcherParam = null;
  if (args) {
    if (args.registerDispatcherParam !== undefined && args.registerDispatcherParam !== null) {
      this.registerDispatcherParam = new RegisterDispatcherParam(args.registerDispatcherParam);
    }
  }
};
AppToServer_registerDispatcher_args.prototype = {};
AppToServer_registerDispatcher_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.registerDispatcherParam = new RegisterDispatcherParam();
        this.registerDispatcherParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_registerDispatcher_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_registerDispatcher_args');
  if (this.registerDispatcherParam !== null && this.registerDispatcherParam !== undefined) {
    output.writeFieldBegin('registerDispatcherParam', Thrift.Type.STRUCT, 1);
    this.registerDispatcherParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_registerDispatcher_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RegisterDispatcherResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_registerDispatcher_result.prototype = {};
AppToServer_registerDispatcher_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RegisterDispatcherResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_registerDispatcher_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_registerDispatcher_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_activation_args = function(args) {
  this.activationParam = null;
  if (args) {
    if (args.activationParam !== undefined && args.activationParam !== null) {
      this.activationParam = new ActivationParam(args.activationParam);
    }
  }
};
AppToServer_activation_args.prototype = {};
AppToServer_activation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.activationParam = new ActivationParam();
        this.activationParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_activation_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_activation_args');
  if (this.activationParam !== null && this.activationParam !== undefined) {
    output.writeFieldBegin('activationParam', Thrift.Type.STRUCT, 1);
    this.activationParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_activation_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ActivationResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_activation_result.prototype = {};
AppToServer_activation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ActivationResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_activation_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_activation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_login_args = function(args) {
  this.loginParam = null;
  if (args) {
    if (args.loginParam !== undefined && args.loginParam !== null) {
      this.loginParam = new LoginParam(args.loginParam);
    }
  }
};
AppToServer_login_args.prototype = {};
AppToServer_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginParam = new LoginParam();
        this.loginParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_login_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_login_args');
  if (this.loginParam !== null && this.loginParam !== undefined) {
    output.writeFieldBegin('loginParam', Thrift.Type.STRUCT, 1);
    this.loginParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_login_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new LoginResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_login_result.prototype = {};
AppToServer_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new LoginResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_login_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_clientSignature_args = function(args) {
  this.signaturenParam = null;
  if (args) {
    if (args.signaturenParam !== undefined && args.signaturenParam !== null) {
      this.signaturenParam = new SignatureParam(args.signaturenParam);
    }
  }
};
AppToServer_clientSignature_args.prototype = {};
AppToServer_clientSignature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.signaturenParam = new SignatureParam();
        this.signaturenParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_clientSignature_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_clientSignature_args');
  if (this.signaturenParam !== null && this.signaturenParam !== undefined) {
    output.writeFieldBegin('signaturenParam', Thrift.Type.STRUCT, 1);
    this.signaturenParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_clientSignature_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SignatureResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_clientSignature_result.prototype = {};
AppToServer_clientSignature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SignatureResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_clientSignature_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_clientSignature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getTemplateFromId_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
AppToServer_getTemplateFromId_args.prototype = {};
AppToServer_getTemplateFromId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getTemplateFromId_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getTemplateFromId_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getTemplateFromId_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Template(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getTemplateFromId_result.prototype = {};
AppToServer_getTemplateFromId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Template();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getTemplateFromId_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getTemplateFromId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_sendMessage_args = function(args) {
  this.appMessage = null;
  if (args) {
    if (args.appMessage !== undefined && args.appMessage !== null) {
      this.appMessage = new AppMessage(args.appMessage);
    }
  }
};
AppToServer_sendMessage_args.prototype = {};
AppToServer_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.appMessage = new AppMessage();
        this.appMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_sendMessage_args');
  if (this.appMessage !== null && this.appMessage !== undefined) {
    output.writeFieldBegin('appMessage', Thrift.Type.STRUCT, 1);
    this.appMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_sendMessage_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_sendMessage_result.prototype = {};
AppToServer_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_sendMessageResponse_args = function(args) {
  this.appMessageResponse = null;
  if (args) {
    if (args.appMessageResponse !== undefined && args.appMessageResponse !== null) {
      this.appMessageResponse = new AppMessageResponse(args.appMessageResponse);
    }
  }
};
AppToServer_sendMessageResponse_args.prototype = {};
AppToServer_sendMessageResponse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.appMessageResponse = new AppMessageResponse();
        this.appMessageResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_sendMessageResponse_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_sendMessageResponse_args');
  if (this.appMessageResponse !== null && this.appMessageResponse !== undefined) {
    output.writeFieldBegin('appMessageResponse', Thrift.Type.STRUCT, 1);
    this.appMessageResponse.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_sendMessageResponse_result = function(args) {
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_sendMessageResponse_result.prototype = {};
AppToServer_sendMessageResponse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_sendMessageResponse_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_sendMessageResponse_result');
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_sendLoginQrCode_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
AppToServer_sendLoginQrCode_args.prototype = {};
AppToServer_sendLoginQrCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_sendLoginQrCode_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_sendLoginQrCode_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 1);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_sendLoginQrCode_result = function(args) {
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_sendLoginQrCode_result.prototype = {};
AppToServer_sendLoginQrCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_sendLoginQrCode_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_sendLoginQrCode_result');
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getLoginQrCode_args = function(args) {
  this.operatorId = null;
  this.sessionId = null;
  if (args) {
    if (args.operatorId !== undefined && args.operatorId !== null) {
      this.operatorId = args.operatorId;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
AppToServer_getLoginQrCode_args.prototype = {};
AppToServer_getLoginQrCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.operatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getLoginQrCode_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getLoginQrCode_args');
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.STRING, 1);
    output.writeString(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getLoginQrCode_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new QrCodeResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getLoginQrCode_result.prototype = {};
AppToServer_getLoginQrCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new QrCodeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getLoginQrCode_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getLoginQrCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_changePassword_args = function(args) {
  this.encPassword = null;
  this.newEncPassword = null;
  if (args) {
    if (args.encPassword !== undefined && args.encPassword !== null) {
      this.encPassword = args.encPassword;
    }
    if (args.newEncPassword !== undefined && args.newEncPassword !== null) {
      this.newEncPassword = args.newEncPassword;
    }
  }
};
AppToServer_changePassword_args.prototype = {};
AppToServer_changePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encPassword = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newEncPassword = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_changePassword_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_changePassword_args');
  if (this.encPassword !== null && this.encPassword !== undefined) {
    output.writeFieldBegin('encPassword', Thrift.Type.STRING, 1);
    output.writeBinary(this.encPassword);
    output.writeFieldEnd();
  }
  if (this.newEncPassword !== null && this.newEncPassword !== undefined) {
    output.writeFieldBegin('newEncPassword', Thrift.Type.STRING, 2);
    output.writeBinary(this.newEncPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_changePassword_result = function(args) {
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_changePassword_result.prototype = {};
AppToServer_changePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_changePassword_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_changePassword_result');
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getCloudSafe_args = function(args) {
  this.uniqueKey = null;
  this.userLoginId = null;
  if (args) {
    if (args.uniqueKey !== undefined && args.uniqueKey !== null) {
      this.uniqueKey = new SdkCloudSafeKey(args.uniqueKey);
    }
    if (args.userLoginId !== undefined && args.userLoginId !== null) {
      this.userLoginId = args.userLoginId;
    }
  }
};
AppToServer_getCloudSafe_args.prototype = {};
AppToServer_getCloudSafe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uniqueKey = new SdkCloudSafeKey();
        this.uniqueKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userLoginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getCloudSafe_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getCloudSafe_args');
  if (this.uniqueKey !== null && this.uniqueKey !== undefined) {
    output.writeFieldBegin('uniqueKey', Thrift.Type.STRUCT, 1);
    this.uniqueKey.write(output);
    output.writeFieldEnd();
  }
  if (this.userLoginId !== null && this.userLoginId !== undefined) {
    output.writeFieldBegin('userLoginId', Thrift.Type.STRING, 2);
    output.writeString(this.userLoginId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getCloudSafe_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SdkCloudSafe(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getCloudSafe_result.prototype = {};
AppToServer_getCloudSafe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SdkCloudSafe();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getCloudSafe_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getCloudSafe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_setCloudSafe_args = function(args) {
  this.sdkCloudSafe = null;
  if (args) {
    if (args.sdkCloudSafe !== undefined && args.sdkCloudSafe !== null) {
      this.sdkCloudSafe = new SdkCloudSafe(args.sdkCloudSafe);
    }
  }
};
AppToServer_setCloudSafe_args.prototype = {};
AppToServer_setCloudSafe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sdkCloudSafe = new SdkCloudSafe();
        this.sdkCloudSafe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_setCloudSafe_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_setCloudSafe_args');
  if (this.sdkCloudSafe !== null && this.sdkCloudSafe !== undefined) {
    output.writeFieldBegin('sdkCloudSafe', Thrift.Type.STRUCT, 1);
    this.sdkCloudSafe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_setCloudSafe_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_setCloudSafe_result.prototype = {};
AppToServer_setCloudSafe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_setCloudSafe_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_setCloudSafe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getCloudSafeList_args = function(args) {
  this.nameFilter = null;
  this.includeShare = null;
  this.modifiedFromEpoch = null;
  this.owner = null;
  if (args) {
    if (args.nameFilter !== undefined && args.nameFilter !== null) {
      this.nameFilter = args.nameFilter;
    }
    if (args.includeShare !== undefined && args.includeShare !== null) {
      this.includeShare = args.includeShare;
    }
    if (args.modifiedFromEpoch !== undefined && args.modifiedFromEpoch !== null) {
      this.modifiedFromEpoch = args.modifiedFromEpoch;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
  }
};
AppToServer_getCloudSafeList_args.prototype = {};
AppToServer_getCloudSafeList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nameFilter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeShare = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.modifiedFromEpoch = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.owner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getCloudSafeList_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getCloudSafeList_args');
  if (this.nameFilter !== null && this.nameFilter !== undefined) {
    output.writeFieldBegin('nameFilter', Thrift.Type.STRING, 1);
    output.writeString(this.nameFilter);
    output.writeFieldEnd();
  }
  if (this.includeShare !== null && this.includeShare !== undefined) {
    output.writeFieldBegin('includeShare', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeShare);
    output.writeFieldEnd();
  }
  if (this.modifiedFromEpoch !== null && this.modifiedFromEpoch !== undefined) {
    output.writeFieldBegin('modifiedFromEpoch', Thrift.Type.I64, 3);
    output.writeI64(this.modifiedFromEpoch);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.I32, 4);
    output.writeI32(this.owner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getCloudSafeList_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SdkCloudSafe]);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getCloudSafeList_result.prototype = {};
AppToServer_getCloudSafeList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp323 = input.readListBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var elem25 = null;
          elem25 = new SdkCloudSafe();
          elem25.read(input);
          this.success.push(elem25);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getCloudSafeList_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getCloudSafeList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter26 in this.success) {
      if (this.success.hasOwnProperty(iter26)) {
        iter26 = this.success[iter26];
        iter26.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_disconnect_args = function(args) {
  this.appErrorCodes = null;
  this.message = null;
  if (args) {
    if (args.appErrorCodes !== undefined && args.appErrorCodes !== null) {
      this.appErrorCodes = args.appErrorCodes;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
AppToServer_disconnect_args.prototype = {};
AppToServer_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appErrorCodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_disconnect_args');
  if (this.appErrorCodes !== null && this.appErrorCodes !== undefined) {
    output.writeFieldBegin('appErrorCodes', Thrift.Type.I32, 1);
    output.writeI32(this.appErrorCodes);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_disconnect_result = function(args) {
};
AppToServer_disconnect_result.prototype = {};
AppToServer_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_disconnect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_keepAlive_args = function(args) {
};
AppToServer_keepAlive_args.prototype = {};
AppToServer_keepAlive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_keepAlive_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_keepAlive_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_keepAlive_result = function(args) {
};
AppToServer_keepAlive_result.prototype = {};
AppToServer_keepAlive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_keepAlive_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_keepAlive_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_deactivate_args = function(args) {
};
AppToServer_deactivate_args.prototype = {};
AppToServer_deactivate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_deactivate_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_deactivate_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_deactivate_result = function(args) {
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_deactivate_result.prototype = {};
AppToServer_deactivate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_deactivate_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_deactivate_result');
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_requestActivationCode_args = function(args) {
};
AppToServer_requestActivationCode_args.prototype = {};
AppToServer_requestActivationCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_requestActivationCode_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_requestActivationCode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_requestActivationCode_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RequestActivationCodeResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_requestActivationCode_result.prototype = {};
AppToServer_requestActivationCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RequestActivationCodeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_requestActivationCode_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_requestActivationCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_verifyPassword_args = function(args) {
  this.encPassword = null;
  if (args) {
    if (args.encPassword !== undefined && args.encPassword !== null) {
      this.encPassword = args.encPassword;
    }
  }
};
AppToServer_verifyPassword_args.prototype = {};
AppToServer_verifyPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.encPassword = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_verifyPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_verifyPassword_args');
  if (this.encPassword !== null && this.encPassword !== undefined) {
    output.writeFieldBegin('encPassword', Thrift.Type.STRING, 1);
    output.writeBinary(this.encPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_verifyPassword_result = function(args) {
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_verifyPassword_result.prototype = {};
AppToServer_verifyPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_verifyPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_verifyPassword_result');
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_authenticateUser_args = function(args) {
  this.authUserParam = null;
  if (args) {
    if (args.authUserParam !== undefined && args.authUserParam !== null) {
      this.authUserParam = new AuthUserParam(args.authUserParam);
    }
  }
};
AppToServer_authenticateUser_args.prototype = {};
AppToServer_authenticateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authUserParam = new AuthUserParam();
        this.authUserParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_authenticateUser_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_authenticateUser_args');
  if (this.authUserParam !== null && this.authUserParam !== undefined) {
    output.writeFieldBegin('authUserParam', Thrift.Type.STRUCT, 1);
    this.authUserParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_authenticateUser_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AuthUserResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_authenticateUser_result.prototype = {};
AppToServer_authenticateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthUserResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_authenticateUser_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_authenticateUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getAuthenticationMethods_args = function(args) {
  this.authSelectParam = null;
  if (args) {
    if (args.authSelectParam !== undefined && args.authSelectParam !== null) {
      this.authSelectParam = new AuthSelectParam(args.authSelectParam);
    }
  }
};
AppToServer_getAuthenticationMethods_args.prototype = {};
AppToServer_getAuthenticationMethods_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authSelectParam = new AuthSelectParam();
        this.authSelectParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getAuthenticationMethods_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getAuthenticationMethods_args');
  if (this.authSelectParam !== null && this.authSelectParam !== undefined) {
    output.writeFieldBegin('authSelectParam', Thrift.Type.STRUCT, 1);
    this.authSelectParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getAuthenticationMethods_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AuthSelectResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getAuthenticationMethods_result.prototype = {};
AppToServer_getAuthenticationMethods_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthSelectResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getAuthenticationMethods_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getAuthenticationMethods_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getDeviceOfflineKeys_args = function(args) {
};
AppToServer_getDeviceOfflineKeys_args.prototype = {};
AppToServer_getDeviceOfflineKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getDeviceOfflineKeys_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getDeviceOfflineKeys_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_getDeviceOfflineKeys_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceOfflineKeysResponse(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_getDeviceOfflineKeys_result.prototype = {};
AppToServer_getDeviceOfflineKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceOfflineKeysResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_getDeviceOfflineKeys_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_getDeviceOfflineKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_authConnect_args = function(args) {
  this.authUserParam = null;
  if (args) {
    if (args.authUserParam !== undefined && args.authUserParam !== null) {
      this.authUserParam = new AuthConnectParam(args.authUserParam);
    }
  }
};
AppToServer_authConnect_args.prototype = {};
AppToServer_authConnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authUserParam = new AuthConnectParam();
        this.authUserParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_authConnect_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_authConnect_args');
  if (this.authUserParam !== null && this.authUserParam !== undefined) {
    output.writeFieldBegin('authUserParam', Thrift.Type.STRUCT, 1);
    this.authUserParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_authConnect_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_authConnect_result.prototype = {};
AppToServer_authConnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_authConnect_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_authConnect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_proxyData_args = function(args) {
  this.handle = null;
  this.data = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = args.handle;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
AppToServer_proxyData_args.prototype = {};
AppToServer_proxyData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.handle = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_proxyData_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_proxyData_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I64, 1);
    output.writeI64(this.handle);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_proxyData_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof AppException) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
AppToServer_proxyData_result.prototype = {};
AppToServer_proxyData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new AppException();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_proxyData_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_proxyData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_proxyClose_args = function(args) {
  this.handle = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = args.handle;
    }
  }
};
AppToServer_proxyClose_args.prototype = {};
AppToServer_proxyClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.handle = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_proxyClose_args.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_proxyClose_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I64, 1);
    output.writeI64(this.handle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServer_proxyClose_result = function(args) {
};
AppToServer_proxyClose_result.prototype = {};
AppToServer_proxyClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppToServer_proxyClose_result.prototype.write = function(output) {
  output.writeStructBegin('AppToServer_proxyClose_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppToServerClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
AppToServerClient.prototype = {};

AppToServerClient.prototype.serverSignature = function(serverSignatureParam, callback) {
  this.send_serverSignature(serverSignatureParam, callback); 
  if (!callback) {
    return this.recv_serverSignature();
  }
};

AppToServerClient.prototype.send_serverSignature = function(serverSignatureParam, callback) {
  var params = {
    serverSignatureParam: serverSignatureParam
  };
  var args = new AppToServer_serverSignature_args(params);
  try {
    this.output.writeMessageBegin('serverSignature', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_serverSignature();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_serverSignature = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_serverSignature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'serverSignature failed: unknown result';
};

AppToServerClient.prototype.getDomainSdkConfig = function(domainSdkConfigParam, callback) {
  this.send_getDomainSdkConfig(domainSdkConfigParam, callback); 
  if (!callback) {
    return this.recv_getDomainSdkConfig();
  }
};

AppToServerClient.prototype.send_getDomainSdkConfig = function(domainSdkConfigParam, callback) {
  var params = {
    domainSdkConfigParam: domainSdkConfigParam
  };
  var args = new AppToServer_getDomainSdkConfig_args(params);
  try {
    this.output.writeMessageBegin('getDomainSdkConfig', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDomainSdkConfig();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getDomainSdkConfig = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getDomainSdkConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDomainSdkConfig failed: unknown result';
};

AppToServerClient.prototype.registerDispatcher = function(registerDispatcherParam, callback) {
  this.send_registerDispatcher(registerDispatcherParam, callback); 
  if (!callback) {
    return this.recv_registerDispatcher();
  }
};

AppToServerClient.prototype.send_registerDispatcher = function(registerDispatcherParam, callback) {
  var params = {
    registerDispatcherParam: registerDispatcherParam
  };
  var args = new AppToServer_registerDispatcher_args(params);
  try {
    this.output.writeMessageBegin('registerDispatcher', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_registerDispatcher();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_registerDispatcher = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_registerDispatcher_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerDispatcher failed: unknown result';
};

AppToServerClient.prototype.activation = function(activationParam, callback) {
  this.send_activation(activationParam, callback); 
  if (!callback) {
    return this.recv_activation();
  }
};

AppToServerClient.prototype.send_activation = function(activationParam, callback) {
  var params = {
    activationParam: activationParam
  };
  var args = new AppToServer_activation_args(params);
  try {
    this.output.writeMessageBegin('activation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_activation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_activation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_activation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'activation failed: unknown result';
};

AppToServerClient.prototype.login = function(loginParam, callback) {
  this.send_login(loginParam, callback); 
  if (!callback) {
    return this.recv_login();
  }
};

AppToServerClient.prototype.send_login = function(loginParam, callback) {
  var params = {
    loginParam: loginParam
  };
  var args = new AppToServer_login_args(params);
  try {
    this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_login();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};

AppToServerClient.prototype.clientSignature = function(signaturenParam, callback) {
  this.send_clientSignature(signaturenParam, callback); 
  if (!callback) {
    return this.recv_clientSignature();
  }
};

AppToServerClient.prototype.send_clientSignature = function(signaturenParam, callback) {
  var params = {
    signaturenParam: signaturenParam
  };
  var args = new AppToServer_clientSignature_args(params);
  try {
    this.output.writeMessageBegin('clientSignature', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_clientSignature();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_clientSignature = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_clientSignature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'clientSignature failed: unknown result';
};

AppToServerClient.prototype.getTemplateFromId = function(id, callback) {
  this.send_getTemplateFromId(id, callback); 
  if (!callback) {
    return this.recv_getTemplateFromId();
  }
};

AppToServerClient.prototype.send_getTemplateFromId = function(id, callback) {
  var params = {
    id: id
  };
  var args = new AppToServer_getTemplateFromId_args(params);
  try {
    this.output.writeMessageBegin('getTemplateFromId', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getTemplateFromId();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getTemplateFromId = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getTemplateFromId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTemplateFromId failed: unknown result';
};

AppToServerClient.prototype.sendMessage = function(appMessage, callback) {
  this.send_sendMessage(appMessage, callback); 
  if (!callback) {
    return this.recv_sendMessage();
  }
};

AppToServerClient.prototype.send_sendMessage = function(appMessage, callback) {
  var params = {
    appMessage: appMessage
  };
  var args = new AppToServer_sendMessage_args(params);
  try {
    this.output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendMessage();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_sendMessage = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_sendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessage failed: unknown result';
};

AppToServerClient.prototype.sendMessageResponse = function(appMessageResponse, callback) {
  this.send_sendMessageResponse(appMessageResponse, callback); 
  if (!callback) {
  this.recv_sendMessageResponse();
  }
};

AppToServerClient.prototype.send_sendMessageResponse = function(appMessageResponse, callback) {
  var params = {
    appMessageResponse: appMessageResponse
  };
  var args = new AppToServer_sendMessageResponse_args(params);
  try {
    this.output.writeMessageBegin('sendMessageResponse', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendMessageResponse();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_sendMessageResponse = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_sendMessageResponse_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  return;
};

AppToServerClient.prototype.sendLoginQrCode = function(data, callback) {
  this.send_sendLoginQrCode(data, callback); 
  if (!callback) {
  this.recv_sendLoginQrCode();
  }
};

AppToServerClient.prototype.send_sendLoginQrCode = function(data, callback) {
  var params = {
    data: data
  };
  var args = new AppToServer_sendLoginQrCode_args(params);
  try {
    this.output.writeMessageBegin('sendLoginQrCode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendLoginQrCode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_sendLoginQrCode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_sendLoginQrCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  return;
};

AppToServerClient.prototype.getLoginQrCode = function(operatorId, sessionId, callback) {
  this.send_getLoginQrCode(operatorId, sessionId, callback); 
  if (!callback) {
    return this.recv_getLoginQrCode();
  }
};

AppToServerClient.prototype.send_getLoginQrCode = function(operatorId, sessionId, callback) {
  var params = {
    operatorId: operatorId,
    sessionId: sessionId
  };
  var args = new AppToServer_getLoginQrCode_args(params);
  try {
    this.output.writeMessageBegin('getLoginQrCode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getLoginQrCode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getLoginQrCode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getLoginQrCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLoginQrCode failed: unknown result';
};

AppToServerClient.prototype.changePassword = function(encPassword, newEncPassword, callback) {
  this.send_changePassword(encPassword, newEncPassword, callback); 
  if (!callback) {
  this.recv_changePassword();
  }
};

AppToServerClient.prototype.send_changePassword = function(encPassword, newEncPassword, callback) {
  var params = {
    encPassword: encPassword,
    newEncPassword: newEncPassword
  };
  var args = new AppToServer_changePassword_args(params);
  try {
    this.output.writeMessageBegin('changePassword', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_changePassword();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_changePassword = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_changePassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  return;
};

AppToServerClient.prototype.getCloudSafe = function(uniqueKey, userLoginId, callback) {
  this.send_getCloudSafe(uniqueKey, userLoginId, callback); 
  if (!callback) {
    return this.recv_getCloudSafe();
  }
};

AppToServerClient.prototype.send_getCloudSafe = function(uniqueKey, userLoginId, callback) {
  var params = {
    uniqueKey: uniqueKey,
    userLoginId: userLoginId
  };
  var args = new AppToServer_getCloudSafe_args(params);
  try {
    this.output.writeMessageBegin('getCloudSafe', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCloudSafe();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getCloudSafe = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getCloudSafe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCloudSafe failed: unknown result';
};

AppToServerClient.prototype.setCloudSafe = function(sdkCloudSafe, callback) {
  this.send_setCloudSafe(sdkCloudSafe, callback); 
  if (!callback) {
    return this.recv_setCloudSafe();
  }
};

AppToServerClient.prototype.send_setCloudSafe = function(sdkCloudSafe, callback) {
  var params = {
    sdkCloudSafe: sdkCloudSafe
  };
  var args = new AppToServer_setCloudSafe_args(params);
  try {
    this.output.writeMessageBegin('setCloudSafe', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setCloudSafe();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_setCloudSafe = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_setCloudSafe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setCloudSafe failed: unknown result';
};

AppToServerClient.prototype.getCloudSafeList = function(nameFilter, includeShare, modifiedFromEpoch, owner, callback) {
  this.send_getCloudSafeList(nameFilter, includeShare, modifiedFromEpoch, owner, callback); 
  if (!callback) {
    return this.recv_getCloudSafeList();
  }
};

AppToServerClient.prototype.send_getCloudSafeList = function(nameFilter, includeShare, modifiedFromEpoch, owner, callback) {
  var params = {
    nameFilter: nameFilter,
    includeShare: includeShare,
    modifiedFromEpoch: modifiedFromEpoch,
    owner: owner
  };
  var args = new AppToServer_getCloudSafeList_args(params);
  try {
    this.output.writeMessageBegin('getCloudSafeList', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCloudSafeList();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getCloudSafeList = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getCloudSafeList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCloudSafeList failed: unknown result';
};

AppToServerClient.prototype.disconnect = function(appErrorCodes, message, callback) {
  this.send_disconnect(appErrorCodes, message, callback); 
  if (!callback) {
  this.recv_disconnect();
  }
};

AppToServerClient.prototype.send_disconnect = function(appErrorCodes, message, callback) {
  var params = {
    appErrorCodes: appErrorCodes,
    message: message
  };
  var args = new AppToServer_disconnect_args(params);
  try {
    this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_disconnect();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_disconnect = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_disconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

AppToServerClient.prototype.keepAlive = function(callback) {
  this.send_keepAlive(callback); 
  if (!callback) {
  this.recv_keepAlive();
  }
};

AppToServerClient.prototype.send_keepAlive = function(callback) {
  var args = new AppToServer_keepAlive_args();
  try {
    this.output.writeMessageBegin('keepAlive', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_keepAlive();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_keepAlive = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_keepAlive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

AppToServerClient.prototype.deactivate = function(callback) {
  this.send_deactivate(callback); 
  if (!callback) {
  this.recv_deactivate();
  }
};

AppToServerClient.prototype.send_deactivate = function(callback) {
  var args = new AppToServer_deactivate_args();
  try {
    this.output.writeMessageBegin('deactivate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_deactivate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_deactivate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_deactivate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  return;
};

AppToServerClient.prototype.requestActivationCode = function(callback) {
  this.send_requestActivationCode(callback); 
  if (!callback) {
    return this.recv_requestActivationCode();
  }
};

AppToServerClient.prototype.send_requestActivationCode = function(callback) {
  var args = new AppToServer_requestActivationCode_args();
  try {
    this.output.writeMessageBegin('requestActivationCode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_requestActivationCode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_requestActivationCode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_requestActivationCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'requestActivationCode failed: unknown result';
};

AppToServerClient.prototype.verifyPassword = function(encPassword, callback) {
  this.send_verifyPassword(encPassword, callback); 
  if (!callback) {
  this.recv_verifyPassword();
  }
};

AppToServerClient.prototype.send_verifyPassword = function(encPassword, callback) {
  var params = {
    encPassword: encPassword
  };
  var args = new AppToServer_verifyPassword_args(params);
  try {
    this.output.writeMessageBegin('verifyPassword', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_verifyPassword();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_verifyPassword = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_verifyPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  return;
};

AppToServerClient.prototype.authenticateUser = function(authUserParam, callback) {
  this.send_authenticateUser(authUserParam, callback); 
  if (!callback) {
    return this.recv_authenticateUser();
  }
};

AppToServerClient.prototype.send_authenticateUser = function(authUserParam, callback) {
  var params = {
    authUserParam: authUserParam
  };
  var args = new AppToServer_authenticateUser_args(params);
  try {
    this.output.writeMessageBegin('authenticateUser', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_authenticateUser();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_authenticateUser = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_authenticateUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateUser failed: unknown result';
};

AppToServerClient.prototype.getAuthenticationMethods = function(authSelectParam, callback) {
  this.send_getAuthenticationMethods(authSelectParam, callback); 
  if (!callback) {
    return this.recv_getAuthenticationMethods();
  }
};

AppToServerClient.prototype.send_getAuthenticationMethods = function(authSelectParam, callback) {
  var params = {
    authSelectParam: authSelectParam
  };
  var args = new AppToServer_getAuthenticationMethods_args(params);
  try {
    this.output.writeMessageBegin('getAuthenticationMethods', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getAuthenticationMethods();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getAuthenticationMethods = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getAuthenticationMethods_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAuthenticationMethods failed: unknown result';
};

AppToServerClient.prototype.getDeviceOfflineKeys = function(callback) {
  this.send_getDeviceOfflineKeys(callback); 
  if (!callback) {
    return this.recv_getDeviceOfflineKeys();
  }
};

AppToServerClient.prototype.send_getDeviceOfflineKeys = function(callback) {
  var args = new AppToServer_getDeviceOfflineKeys_args();
  try {
    this.output.writeMessageBegin('getDeviceOfflineKeys', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDeviceOfflineKeys();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_getDeviceOfflineKeys = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_getDeviceOfflineKeys_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceOfflineKeys failed: unknown result';
};

AppToServerClient.prototype.authConnect = function(authUserParam, callback) {
  this.send_authConnect(authUserParam, callback); 
  if (!callback) {
    return this.recv_authConnect();
  }
};

AppToServerClient.prototype.send_authConnect = function(authUserParam, callback) {
  var params = {
    authUserParam: authUserParam
  };
  var args = new AppToServer_authConnect_args(params);
  try {
    this.output.writeMessageBegin('authConnect', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_authConnect();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_authConnect = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_authConnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authConnect failed: unknown result';
};

AppToServerClient.prototype.proxyData = function(handle, data, callback) {
  this.send_proxyData(handle, data, callback); 
  if (!callback) {
    return this.recv_proxyData();
  }
};

AppToServerClient.prototype.send_proxyData = function(handle, data, callback) {
  var params = {
    handle: handle,
    data: data
  };
  var args = new AppToServer_proxyData_args(params);
  try {
    this.output.writeMessageBegin('proxyData', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_proxyData();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_proxyData = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_proxyData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ouch) {
    throw result.ouch;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'proxyData failed: unknown result';
};

AppToServerClient.prototype.proxyClose = function(handle, callback) {
  this.send_proxyClose(handle, callback); 
  if (!callback) {
  this.recv_proxyClose();
  }
};

AppToServerClient.prototype.send_proxyClose = function(handle, callback) {
  var params = {
    handle: handle
  };
  var args = new AppToServer_proxyClose_args(params);
  try {
    this.output.writeMessageBegin('proxyClose', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_proxyClose();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

AppToServerClient.prototype.recv_proxyClose = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AppToServer_proxyClose_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
