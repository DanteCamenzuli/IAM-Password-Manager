//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


CloudSafeOptions = {
  '0' : 'ENC',
  'ENC' : 0,
  '1' : 'PWD',
  'PWD' : 1
};
AppErrorCodes = {
  '0' : 'OK',
  'OK' : 0,
  '1' : 'WRONG_CREDENTIALS',
  'WRONG_CREDENTIALS' : 1,
  '2' : 'INVALID_ACTIVATION_CODE',
  'INVALID_ACTIVATION_CODE' : 2,
  '3' : 'ACTIVATION_CODE_EXPIRED',
  'ACTIVATION_CODE_EXPIRED' : 3,
  '4' : 'USER_PASSWORD_MAX_RETRIES',
  'USER_PASSWORD_MAX_RETRIES' : 4,
  '5' : 'UNKNOWN_CLIENT_TYPE',
  'UNKNOWN_CLIENT_TYPE' : 5,
  '6' : 'UNKNOWN_ARCH_TYPE',
  'UNKNOWN_ARCH_TYPE' : 6,
  '7' : 'REJECT_RISK',
  'REJECT_RISK' : 7,
  '8' : 'UPDATE_NECESSARY',
  'UPDATE_NECESSARY' : 8,
  '9' : 'INVALID_USERID',
  'INVALID_USERID' : 9,
  '10' : 'UNEXPECTED_ERROR',
  'UNEXPECTED_ERROR' : 10,
  '11' : 'INVALID_VERSION',
  'INVALID_VERSION' : 11,
  '12' : 'INVALID_PIN',
  'INVALID_PIN' : 12,
  '13' : 'CSR_SIGNATURE',
  'CSR_SIGNATURE' : 13,
  '14' : 'CSR_ERROR',
  'CSR_ERROR' : 14,
  '15' : 'TRANSPORT_ERROR',
  'TRANSPORT_ERROR' : 15,
  '16' : 'USER_DISABLED',
  'USER_DISABLED' : 16,
  '17' : 'USER_TEMPORARY_DISABLED',
  'USER_TEMPORARY_DISABLED' : 17,
  '18' : 'INVALID_DEVICE_NAME',
  'INVALID_DEVICE_NAME' : 18,
  '19' : 'INVALID_DEVICE_ID',
  'INVALID_DEVICE_ID' : 19,
  '20' : 'DEVICE_DISABLED',
  'DEVICE_DISABLED' : 20,
  '21' : 'INCORRECT_STATE',
  'INCORRECT_STATE' : 21,
  '22' : 'INVALID_UDID',
  'INVALID_UDID' : 22,
  '23' : 'INVALID_CLIENT_SIGNATURE',
  'INVALID_CLIENT_SIGNATURE' : 23,
  '24' : 'NO_TEMPLATE_FOUND',
  'NO_TEMPLATE_FOUND' : 24,
  '25' : 'RESPONSE_MESSAGE_ERROR',
  'RESPONSE_MESSAGE_ERROR' : 25,
  '26' : 'CLIENT_ERROR',
  'CLIENT_ERROR' : 26,
  '27' : 'RESPONSE_MESSAGE_INVALID_ID',
  'RESPONSE_MESSAGE_INVALID_ID' : 27,
  '28' : 'INVALID_PASSWORD',
  'INVALID_PASSWORD' : 28,
  '29' : 'DUPLICATED_DEVICE_NAME',
  'DUPLICATED_DEVICE_NAME' : 29,
  '30' : 'REST_ADD_MESSAGE_FAILURE',
  'REST_ADD_MESSAGE_FAILURE' : 30,
  '31' : 'APP_MSG_RESPONSE_TIMEDOUT',
  'APP_MSG_RESPONSE_TIMEDOUT' : 31,
  '32' : 'INVALID_MESSAGE_SIGNATURE',
  'INVALID_MESSAGE_SIGNATURE' : 32,
  '33' : 'PROPERTY_NOT_FOUND',
  'PROPERTY_NOT_FOUND' : 33,
  '34' : 'VERSION_UPDATED_REQUIRED',
  'VERSION_UPDATED_REQUIRED' : 34,
  '35' : 'VERSION_DISABLED',
  'VERSION_DISABLED' : 35,
  '36' : 'FCM_PUSHNOTIFICATION',
  'FCM_PUSHNOTIFICATION' : 36,
  '37' : 'INVALID_CLOUD_SAFE_SIGNATURE',
  'INVALID_CLOUD_SAFE_SIGNATURE' : 37,
  '38' : 'CLOUD_SAFE_NOT_FOUND',
  'CLOUD_SAFE_NOT_FOUND' : 38,
  '39' : 'LICENCE_EXPIRED',
  'LICENCE_EXPIRED' : 39,
  '40' : 'LICENCE_MAX_USER',
  'LICENCE_MAX_USER' : 40,
  '41' : 'INVALID_DOMAIN_NAME',
  'INVALID_DOMAIN_NAME' : 41,
  '42' : 'DISPATCHER_CONNECTION_TO_DCEM_FAILED',
  'DISPATCHER_CONNECTION_TO_DCEM_FAILED' : 42,
  '43' : 'CONNECTION_TO_LDAP_FAILED',
  'CONNECTION_TO_LDAP_FAILED' : 43,
  '44' : 'UNREGISTERED_DCEM',
  'UNREGISTERED_DCEM' : 44,
  '45' : 'NO_CONNECTION_TO_DESTINATION_DCEM',
  'NO_CONNECTION_TO_DESTINATION_DCEM' : 45,
  '46' : 'NOT_A_DISPATCHER_PROXY',
  'NOT_A_DISPATCHER_PROXY' : 46,
  '47' : 'DOMAIN_CANNOT_CONNECT_TO_ITSELF',
  'DOMAIN_CANNOT_CONNECT_TO_ITSELF' : 47,
  '48' : 'DOMAIN_HAS_NO_CONFIGURATION',
  'DOMAIN_HAS_NO_CONFIGURATION' : 48,
  '49' : 'REVERSE_PROXY_CONNECTION_LIMIT',
  'REVERSE_PROXY_CONNECTION_LIMIT' : 49,
  '50' : 'INVALID_DEVICE_KEY',
  'INVALID_DEVICE_KEY' : 50,
  '51' : 'INVALID_OFFLINE_KEY',
  'INVALID_OFFLINE_KEY' : 51,
  '52' : 'USER_HAS_NO_DEVICES',
  'USER_HAS_NO_DEVICES' : 52,
  '53' : 'NO_DISTINCT_USER_NAME',
  'NO_DISTINCT_USER_NAME' : 53,
  '54' : 'INVALID_PASSCODE',
  'INVALID_PASSCODE' : 54,
  '55' : 'PASSCODE_NOT_NUMERIC',
  'PASSCODE_NOT_NUMERIC' : 55,
  '56' : 'INVALID_AUTH_METHOD',
  'INVALID_AUTH_METHOD' : 56,
  '57' : 'AUTH_METHOD_NOT_ALLOWED',
  'AUTH_METHOD_NOT_ALLOWED' : 57,
  '58' : 'NO_AUTH_METHOD_FOUND',
  'NO_AUTH_METHOD_FOUND' : 58,
  '59' : 'SMS_USER_HAS_NO_MOBILE',
  'SMS_USER_HAS_NO_MOBILE' : 59,
  '60' : 'SMS_SEND_EXCEPTION',
  'SMS_SEND_EXCEPTION' : 60,
  '61' : 'SEND_VOICE_EXCEPTION',
  'SEND_VOICE_EXCEPTION' : 61,
  '62' : 'INVALID_OTP',
  'INVALID_OTP' : 62,
  '63' : 'USER_HAS_NO_OTP_TOKENS',
  'USER_HAS_NO_OTP_TOKENS' : 63,
  '64' : 'INVALID_TENANT_IDENTIFIER',
  'INVALID_TENANT_IDENTIFIER' : 64,
  '65' : 'USER_HAS_NO_TELEPHONE_OR_MOBILE',
  'USER_HAS_NO_TELEPHONE_OR_MOBILE' : 65,
  '66' : 'INVALID_CLOUD_SAFE_OWNER',
  'INVALID_CLOUD_SAFE_OWNER' : 66,
  '67' : 'APP_MSG_IGNORED',
  'APP_MSG_IGNORED' : 67,
  '68' : 'DB_DECRYTION_ERROR',
  'DB_DECRYTION_ERROR' : 68,
  '69' : 'NO_WRITE_ACCESS',
  'NO_WRITE_ACCESS' : 69,
  '70' : 'REVERSE_PROXY_REDIRECTION',
  'REVERSE_PROXY_REDIRECTION' : 70,
  '71' : 'PASSWORD_SAFE_LIMIT_REACHED',
  'PASSWORD_SAFE_LIMIT_REACHED' : 71,
  '72' : 'CLOUD_SAFE_LIMIT_REACHED',
  'CLOUD_SAFE_LIMIT_REACHED' : 72,
  '73' : 'PASSWORD_SAFE_NOT_ENABLED',
  'PASSWORD_SAFE_NOT_ENABLED' : 73,
  '74' : 'CLOUD_SAFE_GLOBAL_LIMIT_REACHED',
  'CLOUD_SAFE_GLOBAL_LIMIT_REACHED' : 74,
  '75' : 'CLOUD_SAFE_USER_LIMIT_REACHED',
  'CLOUD_SAFE_USER_LIMIT_REACHED' : 75,
  '76' : 'CLOUD_SAFE_USER_EXPIRY_DATE_REACHED',
  'CLOUD_SAFE_USER_EXPIRY_DATE_REACHED' : 76,
  '77' : 'CLOUD_SAFE_FILE_DECRYPTION',
  'CLOUD_SAFE_FILE_DECRYPTION' : 77,
  '78' : 'LICENCE_MAX_USERS_REACHED',
  'LICENCE_MAX_USERS_REACHED' : 78,
  '79' : 'LICENCE_MAX_GLOBAL_USERS_REACHED',
  'LICENCE_MAX_GLOBAL_USERS_REACHED' : 79,
  '80' : 'INVALID_FILE_SAFE_OWNER',
  'INVALID_FILE_SAFE_OWNER' : 80,
  '81' : 'CLOUDDATA_OUT_OF_DATE',
  'CLOUDDATA_OUT_OF_DATE' : 81
};
CommClientType = {
  '1' : 'APP',
  'APP' : 1,
  '2' : 'DCEM_AS_CLIENT',
  'DCEM_AS_CLIENT' : 2,
  '3' : 'AUTH_APP',
  'AUTH_APP' : 3
};
MsgPriority = {
  '1' : 'IMMEDIATE',
  'IMMEDIATE' : 1,
  '2' : 'URGENT',
  'URGENT' : 2,
  '3' : 'HIGH',
  'HIGH' : 3,
  '4' : 'NORAML',
  'NORAML' : 4,
  '5' : 'LOW',
  'LOW' : 5,
  '6' : 'NEGLIGIBLE',
  'NEGLIGIBLE' : 6,
  '7' : 'NONE',
  'NONE' : 7
};
ThriftAuthMethod = {
  '-1' : 'AUTO',
  'AUTO' : -1,
  '0' : 'PASSWORD',
  'PASSWORD' : 0,
  '1' : 'SMS',
  'SMS' : 1,
  '2' : 'VOICE_MESSAGE',
  'VOICE_MESSAGE' : 2,
  '3' : 'HARDWARE_TOKEN',
  'HARDWARE_TOKEN' : 3,
  '4' : 'DOUBLECLUE_PASSCODE',
  'DOUBLECLUE_PASSCODE' : 4,
  '5' : 'PUSH_APPROVAL',
  'PUSH_APPROVAL' : 5,
  '6' : 'QRCODE_APPROVAL',
  'QRCODE_APPROVAL' : 6,
  '7' : 'SESSION_RECONNECT',
  'SESSION_RECONNECT' : 7,
  '8' : 'FIDO_U2F',
  'FIDO_U2F' : 8
};
ClientType = {
  '0' : 'ANDROID',
  'ANDROID' : 0,
  '1' : 'I_OS',
  'I_OS' : 1,
  '2' : 'WINDOWS',
  'WINDOWS' : 2,
  '3' : 'MAC',
  'MAC' : 3,
  '4' : 'Linux',
  'Linux' : 4
};
CpuArch = {
  '0' : 'unknown',
  'unknown' : 0,
  '1' : 'x86',
  'x86' : 1,
  '2' : 'asm',
  'asm' : 2
};
CloudSafeOwner = {
  '0' : 'GLOBAL',
  'GLOBAL' : 0,
  '1' : 'USER',
  'USER' : 1,
  '2' : 'DEVICE',
  'DEVICE' : 2
};
AppException = function(args) {
  this.error = null;
  this.info = null;
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = args.info;
    }
  }
};
Thrift.inherits(AppException, Thrift.TException);
AppException.prototype.name = 'AppException';
AppException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppException.prototype.write = function(output) {
  output.writeStructBegin('AppException');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 1);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 2);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SdkConfig = function(args) {
  this.connectionKey = null;
  this.serverUrl = null;
  this.transportProtocol = null;
  this.serverPublicKey = null;
  this.portalUrl = null;
  if (args) {
    if (args.connectionKey !== undefined && args.connectionKey !== null) {
      this.connectionKey = args.connectionKey;
    }
    if (args.serverUrl !== undefined && args.serverUrl !== null) {
      this.serverUrl = args.serverUrl;
    }
    if (args.transportProtocol !== undefined && args.transportProtocol !== null) {
      this.transportProtocol = args.transportProtocol;
    }
    if (args.serverPublicKey !== undefined && args.serverPublicKey !== null) {
      this.serverPublicKey = args.serverPublicKey;
    }
    if (args.portalUrl !== undefined && args.portalUrl !== null) {
      this.portalUrl = args.portalUrl;
    }
  }
};
SdkConfig.prototype = {};
SdkConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.connectionKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serverUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.transportProtocol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.serverPublicKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.portalUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SdkConfig.prototype.write = function(output) {
  output.writeStructBegin('SdkConfig');
  if (this.connectionKey !== null && this.connectionKey !== undefined) {
    output.writeFieldBegin('connectionKey', Thrift.Type.STRING, 1);
    output.writeBinary(this.connectionKey);
    output.writeFieldEnd();
  }
  if (this.serverUrl !== null && this.serverUrl !== undefined) {
    output.writeFieldBegin('serverUrl', Thrift.Type.STRING, 2);
    output.writeString(this.serverUrl);
    output.writeFieldEnd();
  }
  if (this.transportProtocol !== null && this.transportProtocol !== undefined) {
    output.writeFieldBegin('transportProtocol', Thrift.Type.STRING, 3);
    output.writeString(this.transportProtocol);
    output.writeFieldEnd();
  }
  if (this.serverPublicKey !== null && this.serverPublicKey !== undefined) {
    output.writeFieldBegin('serverPublicKey', Thrift.Type.STRING, 4);
    output.writeBinary(this.serverPublicKey);
    output.writeFieldEnd();
  }
  if (this.portalUrl !== null && this.portalUrl !== undefined) {
    output.writeFieldBegin('portalUrl', Thrift.Type.STRING, 5);
    output.writeString(this.portalUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthGatewayConfig = function(args) {
  this.name = null;
  this.sharedSecret = null;
  this.tenantName = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sharedSecret !== undefined && args.sharedSecret !== null) {
      this.sharedSecret = args.sharedSecret;
    }
    if (args.tenantName !== undefined && args.tenantName !== null) {
      this.tenantName = args.tenantName;
    }
  }
};
AuthGatewayConfig.prototype = {};
AuthGatewayConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sharedSecret = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tenantName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthGatewayConfig.prototype.write = function(output) {
  output.writeStructBegin('AuthGatewayConfig');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sharedSecret !== null && this.sharedSecret !== undefined) {
    output.writeFieldBegin('sharedSecret', Thrift.Type.STRING, 2);
    output.writeBinary(this.sharedSecret);
    output.writeFieldEnd();
  }
  if (this.tenantName !== null && this.tenantName !== undefined) {
    output.writeFieldBegin('tenantName', Thrift.Type.STRING, 3);
    output.writeString(this.tenantName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SdkSettings = function(args) {
  this.deviceId = null;
  this.userId = null;
  this.deviceName = null;
  this.privateKey = null;
  this.publicKey = null;
  this.offlineKey = null;
  this.passcodeValidFor = null;
  this.safe = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
    if (args.privateKey !== undefined && args.privateKey !== null) {
      this.privateKey = args.privateKey;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = args.publicKey;
    }
    if (args.offlineKey !== undefined && args.offlineKey !== null) {
      this.offlineKey = args.offlineKey;
    }
    if (args.passcodeValidFor !== undefined && args.passcodeValidFor !== null) {
      this.passcodeValidFor = args.passcodeValidFor;
    }
    if (args.safe !== undefined && args.safe !== null) {
      this.safe = Thrift.copyMap(args.safe, [null]);
    }
  }
};
SdkSettings.prototype = {};
SdkSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.privateKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.publicKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.offlineKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.passcodeValidFor = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        this.safe = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          if (_i2 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key3 = null;
          var val4 = null;
          key3 = input.readString().value;
          val4 = input.readString().value;
          this.safe[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SdkSettings.prototype.write = function(output) {
  output.writeStructBegin('SdkSettings');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 3);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.privateKey !== null && this.privateKey !== undefined) {
    output.writeFieldBegin('privateKey', Thrift.Type.STRING, 4);
    output.writeBinary(this.privateKey);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRING, 5);
    output.writeBinary(this.publicKey);
    output.writeFieldEnd();
  }
  if (this.offlineKey !== null && this.offlineKey !== undefined) {
    output.writeFieldBegin('offlineKey', Thrift.Type.STRING, 6);
    output.writeBinary(this.offlineKey);
    output.writeFieldEnd();
  }
  if (this.passcodeValidFor !== null && this.passcodeValidFor !== undefined) {
    output.writeFieldBegin('passcodeValidFor', Thrift.Type.I32, 7);
    output.writeI32(this.passcodeValidFor);
    output.writeFieldEnd();
  }
  if (this.safe !== null && this.safe !== undefined) {
    output.writeFieldBegin('safe', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.safe));
    for (var kiter5 in this.safe) {
      if (this.safe.hasOwnProperty(kiter5)) {
        var viter6 = this.safe[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MsgAttachment = function(args) {
  this.id = null;
  this.name = null;
  this.mimeType = null;
  this.size = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
MsgAttachment.prototype = {};
MsgAttachment.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MsgAttachment.prototype.write = function(output) {
  output.writeStructBegin('MsgAttachment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 3);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 4);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppMessage = function(args) {
  this.id = null;
  this.priority = null;
  this.templateId = null;
  this.signitureRequired = null;
  this.responseRequired = null;
  this.responseTime = null;
  this.responseTo = null;
  this.data = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.signitureRequired !== undefined && args.signitureRequired !== null) {
      this.signitureRequired = args.signitureRequired;
    }
    if (args.responseRequired !== undefined && args.responseRequired !== null) {
      this.responseRequired = args.responseRequired;
    }
    if (args.responseTime !== undefined && args.responseTime !== null) {
      this.responseTime = args.responseTime;
    }
    if (args.responseTo !== undefined && args.responseTo !== null) {
      this.responseTo = args.responseTo;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyMap(args.data, [null]);
    }
  }
};
AppMessage.prototype = {};
AppMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.templateId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.signitureRequired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.responseRequired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.responseTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.responseTo = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        this.data = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          if (_i9 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key10 = null;
          var val11 = null;
          key10 = input.readString().value;
          val11 = input.readString().value;
          this.data[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppMessage.prototype.write = function(output) {
  output.writeStructBegin('AppMessage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 2);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I32, 3);
    output.writeI32(this.templateId);
    output.writeFieldEnd();
  }
  if (this.signitureRequired !== null && this.signitureRequired !== undefined) {
    output.writeFieldBegin('signitureRequired', Thrift.Type.BOOL, 4);
    output.writeBool(this.signitureRequired);
    output.writeFieldEnd();
  }
  if (this.responseRequired !== null && this.responseRequired !== undefined) {
    output.writeFieldBegin('responseRequired', Thrift.Type.BOOL, 5);
    output.writeBool(this.responseRequired);
    output.writeFieldEnd();
  }
  if (this.responseTime !== null && this.responseTime !== undefined) {
    output.writeFieldBegin('responseTime', Thrift.Type.I32, 6);
    output.writeI32(this.responseTime);
    output.writeFieldEnd();
  }
  if (this.responseTo !== null && this.responseTo !== undefined) {
    output.writeFieldBegin('responseTo', Thrift.Type.I64, 7);
    output.writeI64(this.responseTo);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.data));
    for (var kiter12 in this.data) {
      if (this.data.hasOwnProperty(kiter12)) {
        var viter13 = this.data[kiter12];
        output.writeString(kiter12);
        output.writeString(viter13);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppMessageResponse = function(args) {
  this.id = null;
  this.actionId = null;
  this.errorCode = null;
  this.errorMessage = null;
  this.read = null;
  this.responseData = null;
  this.signature = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.actionId !== undefined && args.actionId !== null) {
      this.actionId = args.actionId;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
    if (args.read !== undefined && args.read !== null) {
      this.read = args.read;
    }
    if (args.responseData !== undefined && args.responseData !== null) {
      this.responseData = Thrift.copyMap(args.responseData, [null]);
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
  }
};
AppMessageResponse.prototype = {};
AppMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.actionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.read = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.responseData = {};
        var _rtmp315 = input.readMapBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          if (_i16 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key17 = null;
          var val18 = null;
          key17 = input.readString().value;
          val18 = input.readString().value;
          this.responseData[key17] = val18;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('AppMessageResponse');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.actionId !== null && this.actionId !== undefined) {
    output.writeFieldBegin('actionId', Thrift.Type.STRING, 2);
    output.writeString(this.actionId);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 3);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 4);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.read !== null && this.read !== undefined) {
    output.writeFieldBegin('read', Thrift.Type.BOOL, 5);
    output.writeBool(this.read);
    output.writeFieldEnd();
  }
  if (this.responseData !== null && this.responseData !== undefined) {
    output.writeFieldBegin('responseData', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.responseData));
    for (var kiter19 in this.responseData) {
      if (this.responseData.hasOwnProperty(kiter19)) {
        var viter20 = this.responseData[kiter19];
        output.writeString(kiter19);
        output.writeString(viter20);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeBinary(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthAppMessageResponse = function(args) {
  this.succesful = null;
  this.errorCode = null;
  this.errorMessage = null;
  this.userKey = null;
  this.sessionCookieExpiresOn = null;
  this.sessionCookie = null;
  this.msgId = null;
  if (args) {
    if (args.succesful !== undefined && args.succesful !== null) {
      this.succesful = args.succesful;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
    if (args.userKey !== undefined && args.userKey !== null) {
      this.userKey = args.userKey;
    }
    if (args.sessionCookieExpiresOn !== undefined && args.sessionCookieExpiresOn !== null) {
      this.sessionCookieExpiresOn = args.sessionCookieExpiresOn;
    }
    if (args.sessionCookie !== undefined && args.sessionCookie !== null) {
      this.sessionCookie = args.sessionCookie;
    }
    if (args.msgId !== undefined && args.msgId !== null) {
      this.msgId = args.msgId;
    }
  }
};
AuthAppMessageResponse.prototype = {};
AuthAppMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.succesful = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userKey = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sessionCookieExpiresOn = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sessionCookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.msgId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthAppMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('AuthAppMessageResponse');
  if (this.succesful !== null && this.succesful !== undefined) {
    output.writeFieldBegin('succesful', Thrift.Type.BOOL, 1);
    output.writeBool(this.succesful);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.STRING, 2);
    output.writeString(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 3);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.userKey !== null && this.userKey !== undefined) {
    output.writeFieldBegin('userKey', Thrift.Type.STRING, 4);
    output.writeBinary(this.userKey);
    output.writeFieldEnd();
  }
  if (this.sessionCookieExpiresOn !== null && this.sessionCookieExpiresOn !== undefined) {
    output.writeFieldBegin('sessionCookieExpiresOn', Thrift.Type.I32, 5);
    output.writeI32(this.sessionCookieExpiresOn);
    output.writeFieldEnd();
  }
  if (this.sessionCookie !== null && this.sessionCookie !== undefined) {
    output.writeFieldBegin('sessionCookie', Thrift.Type.STRING, 6);
    output.writeString(this.sessionCookie);
    output.writeFieldEnd();
  }
  if (this.msgId !== null && this.msgId !== undefined) {
    output.writeFieldBegin('msgId', Thrift.Type.I64, 7);
    output.writeI64(this.msgId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppVersion = function(args) {
  this.version = null;
  this.name = null;
  this.state = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
AppVersion.prototype = {};
AppVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppVersion.prototype.write = function(output) {
  output.writeStructBegin('AppVersion');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Template = function(args) {
  this.id = null;
  this.name = null;
  this.locale = null;
  this.content = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
Template.prototype = {};
Template.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Template.prototype.write = function(output) {
  output.writeStructBegin('Template');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SdkCloudSafeKey = function(args) {
  this.owner = null;
  this.name = null;
  if (args) {
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
SdkCloudSafeKey.prototype = {};
SdkCloudSafeKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.owner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SdkCloudSafeKey.prototype.write = function(output) {
  output.writeStructBegin('SdkCloudSafeKey');
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.I32, 1);
    output.writeI32(this.owner);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SdkCloudSafe = function(args) {
  this.uniqueKey = null;
  this.content = null;
  this.options = null;
  this.discardAfter = null;
  this.lastModified = null;
  this.signature = null;
  this.length = null;
  this.sharedUser = null;
  this.writeAccess = null;
  if (args) {
    if (args.uniqueKey !== undefined && args.uniqueKey !== null) {
      this.uniqueKey = new SdkCloudSafeKey(args.uniqueKey);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = args.options;
    }
    if (args.discardAfter !== undefined && args.discardAfter !== null) {
      this.discardAfter = args.discardAfter;
    }
    if (args.lastModified !== undefined && args.lastModified !== null) {
      this.lastModified = args.lastModified;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.length !== undefined && args.length !== null) {
      this.length = args.length;
    }
    if (args.sharedUser !== undefined && args.sharedUser !== null) {
      this.sharedUser = args.sharedUser;
    }
    if (args.writeAccess !== undefined && args.writeAccess !== null) {
      this.writeAccess = args.writeAccess;
    }
  }
};
SdkCloudSafe.prototype = {};
SdkCloudSafe.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uniqueKey = new SdkCloudSafeKey();
        this.uniqueKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.options = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.discardAfter = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastModified = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.length = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.sharedUser = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.writeAccess = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SdkCloudSafe.prototype.write = function(output) {
  output.writeStructBegin('SdkCloudSafe');
  if (this.uniqueKey !== null && this.uniqueKey !== undefined) {
    output.writeFieldBegin('uniqueKey', Thrift.Type.STRUCT, 1);
    this.uniqueKey.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRING, 3);
    output.writeString(this.options);
    output.writeFieldEnd();
  }
  if (this.discardAfter !== null && this.discardAfter !== undefined) {
    output.writeFieldBegin('discardAfter', Thrift.Type.I64, 4);
    output.writeI64(this.discardAfter);
    output.writeFieldEnd();
  }
  if (this.lastModified !== null && this.lastModified !== undefined) {
    output.writeFieldBegin('lastModified', Thrift.Type.I64, 5);
    output.writeI64(this.lastModified);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 6);
    output.writeBinary(this.signature);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I64, 7);
    output.writeI64(this.length);
    output.writeFieldEnd();
  }
  if (this.sharedUser !== null && this.sharedUser !== undefined) {
    output.writeFieldBegin('sharedUser', Thrift.Type.STRING, 8);
    output.writeString(this.sharedUser);
    output.writeFieldEnd();
  }
  if (this.writeAccess !== null && this.writeAccess !== undefined) {
    output.writeFieldBegin('writeAccess', Thrift.Type.BOOL, 9);
    output.writeBool(this.writeAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = function(args) {
  this.loginId = null;
  this.updatePushNotification = null;
  this.usingReverseProxy = null;
  if (args) {
    if (args.loginId !== undefined && args.loginId !== null) {
      this.loginId = args.loginId;
    }
    if (args.updatePushNotification !== undefined && args.updatePushNotification !== null) {
      this.updatePushNotification = args.updatePushNotification;
    }
    if (args.usingReverseProxy !== undefined && args.usingReverseProxy !== null) {
      this.usingReverseProxy = args.usingReverseProxy;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.updatePushNotification = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.usingReverseProxy = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.loginId !== null && this.loginId !== undefined) {
    output.writeFieldBegin('loginId', Thrift.Type.STRING, 1);
    output.writeString(this.loginId);
    output.writeFieldEnd();
  }
  if (this.updatePushNotification !== null && this.updatePushNotification !== undefined) {
    output.writeFieldBegin('updatePushNotification', Thrift.Type.BOOL, 2);
    output.writeBool(this.updatePushNotification);
    output.writeFieldEnd();
  }
  if (this.usingReverseProxy !== null && this.usingReverseProxy !== undefined) {
    output.writeFieldBegin('usingReverseProxy', Thrift.Type.BOOL, 3);
    output.writeBool(this.usingReverseProxy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActivatedUsers = function(args) {
  this.users = null;
  if (args) {
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [User]);
    }
  }
};
ActivatedUsers.prototype = {};
ActivatedUsers.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.users = [];
        var _rtmp322 = input.readListBegin();
        var _size21 = _rtmp322.size || 0;
        for (var _i23 = 0; _i23 < _size21; ++_i23) {
          var elem24 = null;
          elem24 = new User();
          elem24.read(input);
          this.users.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivatedUsers.prototype.write = function(output) {
  output.writeStructBegin('ActivatedUsers');
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter25 in this.users) {
      if (this.users.hasOwnProperty(iter25)) {
        iter25 = this.users[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RpOpen = function(args) {
  this.remoteAddress = null;
  this.appVersion = null;
  this.libVersion = null;
  this.tenantName = null;
  if (args) {
    if (args.remoteAddress !== undefined && args.remoteAddress !== null) {
      this.remoteAddress = args.remoteAddress;
    }
    if (args.appVersion !== undefined && args.appVersion !== null) {
      this.appVersion = new AppVersion(args.appVersion);
    }
    if (args.libVersion !== undefined && args.libVersion !== null) {
      this.libVersion = new AppVersion(args.libVersion);
    }
    if (args.tenantName !== undefined && args.tenantName !== null) {
      this.tenantName = args.tenantName;
    }
  }
};
RpOpen.prototype = {};
RpOpen.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.remoteAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appVersion = new AppVersion();
        this.appVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.libVersion = new AppVersion();
        this.libVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tenantName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RpOpen.prototype.write = function(output) {
  output.writeStructBegin('RpOpen');
  if (this.remoteAddress !== null && this.remoteAddress !== undefined) {
    output.writeFieldBegin('remoteAddress', Thrift.Type.STRING, 1);
    output.writeString(this.remoteAddress);
    output.writeFieldEnd();
  }
  if (this.appVersion !== null && this.appVersion !== undefined) {
    output.writeFieldBegin('appVersion', Thrift.Type.STRUCT, 2);
    this.appVersion.write(output);
    output.writeFieldEnd();
  }
  if (this.libVersion !== null && this.libVersion !== undefined) {
    output.writeFieldBegin('libVersion', Thrift.Type.STRUCT, 3);
    this.libVersion.write(output);
    output.writeFieldEnd();
  }
  if (this.tenantName !== null && this.tenantName !== undefined) {
    output.writeFieldBegin('tenantName', Thrift.Type.STRING, 4);
    output.writeString(this.tenantName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppAccount = function(args) {
  this.name = null;
  this.userName = null;
  this.tenantName = null;
  this.realmName = null;
  this.fullQualifiedName = null;
  this.updatePushNotification = null;
  this.usingReverseProxy = null;
  this.settingsFileName = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
    if (args.tenantName !== undefined && args.tenantName !== null) {
      this.tenantName = args.tenantName;
    }
    if (args.realmName !== undefined && args.realmName !== null) {
      this.realmName = args.realmName;
    }
    if (args.fullQualifiedName !== undefined && args.fullQualifiedName !== null) {
      this.fullQualifiedName = args.fullQualifiedName;
    }
    if (args.updatePushNotification !== undefined && args.updatePushNotification !== null) {
      this.updatePushNotification = args.updatePushNotification;
    }
    if (args.usingReverseProxy !== undefined && args.usingReverseProxy !== null) {
      this.usingReverseProxy = args.usingReverseProxy;
    }
    if (args.settingsFileName !== undefined && args.settingsFileName !== null) {
      this.settingsFileName = args.settingsFileName;
    }
  }
};
AppAccount.prototype = {};
AppAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tenantName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.realmName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fullQualifiedName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.updatePushNotification = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.usingReverseProxy = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.settingsFileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppAccount.prototype.write = function(output) {
  output.writeStructBegin('AppAccount');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.tenantName !== null && this.tenantName !== undefined) {
    output.writeFieldBegin('tenantName', Thrift.Type.STRING, 3);
    output.writeString(this.tenantName);
    output.writeFieldEnd();
  }
  if (this.realmName !== null && this.realmName !== undefined) {
    output.writeFieldBegin('realmName', Thrift.Type.STRING, 4);
    output.writeString(this.realmName);
    output.writeFieldEnd();
  }
  if (this.fullQualifiedName !== null && this.fullQualifiedName !== undefined) {
    output.writeFieldBegin('fullQualifiedName', Thrift.Type.STRING, 5);
    output.writeString(this.fullQualifiedName);
    output.writeFieldEnd();
  }
  if (this.updatePushNotification !== null && this.updatePushNotification !== undefined) {
    output.writeFieldBegin('updatePushNotification', Thrift.Type.BOOL, 6);
    output.writeBool(this.updatePushNotification);
    output.writeFieldEnd();
  }
  if (this.usingReverseProxy !== null && this.usingReverseProxy !== undefined) {
    output.writeFieldBegin('usingReverseProxy', Thrift.Type.BOOL, 7);
    output.writeBool(this.usingReverseProxy);
    output.writeFieldEnd();
  }
  if (this.settingsFileName !== null && this.settingsFileName !== undefined) {
    output.writeFieldBegin('settingsFileName', Thrift.Type.STRING, 8);
    output.writeString(this.settingsFileName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppAccounts = function(args) {
  this.accounts = null;
  if (args) {
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = Thrift.copyList(args.accounts, [AppAccount]);
    }
  }
};
AppAccounts.prototype = {};
AppAccounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.accounts = [];
        var _rtmp327 = input.readListBegin();
        var _size26 = _rtmp327.size || 0;
        for (var _i28 = 0; _i28 < _size26; ++_i28) {
          var elem29 = null;
          elem29 = new AppAccount();
          elem29.read(input);
          this.accounts.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppAccounts.prototype.write = function(output) {
  output.writeStructBegin('AppAccounts');
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.accounts.length);
    for (var iter30 in this.accounts) {
      if (this.accounts.hasOwnProperty(iter30)) {
        iter30 = this.accounts[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProxyOpenParam = function(args) {
  this.handle = null;
  this.ipHost = null;
  this.port = null;
  this.secure = null;
  this.verifyCertificate = null;
  this.dataWait = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = args.handle;
    }
    if (args.ipHost !== undefined && args.ipHost !== null) {
      this.ipHost = args.ipHost;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.secure !== undefined && args.secure !== null) {
      this.secure = args.secure;
    }
    if (args.verifyCertificate !== undefined && args.verifyCertificate !== null) {
      this.verifyCertificate = args.verifyCertificate;
    }
    if (args.dataWait !== undefined && args.dataWait !== null) {
      this.dataWait = args.dataWait;
    }
  }
};
ProxyOpenParam.prototype = {};
ProxyOpenParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.handle = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipHost = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.secure = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.verifyCertificate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dataWait = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProxyOpenParam.prototype.write = function(output) {
  output.writeStructBegin('ProxyOpenParam');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I64, 1);
    output.writeI64(this.handle);
    output.writeFieldEnd();
  }
  if (this.ipHost !== null && this.ipHost !== undefined) {
    output.writeFieldBegin('ipHost', Thrift.Type.STRING, 2);
    output.writeString(this.ipHost);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.secure !== null && this.secure !== undefined) {
    output.writeFieldBegin('secure', Thrift.Type.BOOL, 4);
    output.writeBool(this.secure);
    output.writeFieldEnd();
  }
  if (this.verifyCertificate !== null && this.verifyCertificate !== undefined) {
    output.writeFieldBegin('verifyCertificate', Thrift.Type.BOOL, 5);
    output.writeBool(this.verifyCertificate);
    output.writeFieldEnd();
  }
  if (this.dataWait !== null && this.dataWait !== undefined) {
    output.writeFieldBegin('dataWait', Thrift.Type.I32, 6);
    output.writeI32(this.dataWait);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PROTOCOL_VERSION = 49;
PROTOCOL_APP_TO_SERVER = 65;
PROTOCOL_SERVER_TO_APP = 83;
PROTOCOL_REVERSE_PROXY = 66;
REVERSE_PROXY_OPEN = 1;
REVERSE_PROXY_CLOSE = 2;
REVERSE_PROXY_DATA = 3;
SIGNATURE_STRING = 'This is the SEM-DoubleCheck signature. This is user to verify the signatures';
DcemFileName = 'SdkConfig.dcem';
SdkConfigFileName = 'SdkConfig.as';
SignatureFileName = 'SdkConfig.sig';
TrustStoreFileName = 'TrustStore.pem';
AuthConnectorFileName = 'AuthConnector.dcem';
UserFullQualifiedId = 'userFqID';
PasswordLessLogin = 'passwordLessLogin';
PushNotificationTitle = 'pntitle';
PushNotificationBody = 'pnBody';
PushNotificationAction = 'pnAction';
TENANT_SEPERATOR = '!';
REALM_SEPERATOR = '$';
PUSH_NOTIFICATION_TOKEN = 'hws.pushnotification.token';
UNLOCK_USER_AUTH = 'unlock';
TRUE_VALUE = 'true';
