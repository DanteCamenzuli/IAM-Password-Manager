/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class DomainSdkConfigParam : TBase
{
  private string _domainName;
  private string _activationCode;
  private string _userId;
  private byte[] _dispatcherSignature;

  public string DomainName
  {
    get
    {
      return _domainName;
    }
    set
    {
      __isset.domainName = true;
      this._domainName = value;
    }
  }

  public string ActivationCode
  {
    get
    {
      return _activationCode;
    }
    set
    {
      __isset.activationCode = true;
      this._activationCode = value;
    }
  }

  public string UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public byte[] DispatcherSignature
  {
    get
    {
      return _dispatcherSignature;
    }
    set
    {
      __isset.dispatcherSignature = true;
      this._dispatcherSignature = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool domainName;
    public bool activationCode;
    public bool userId;
    public bool dispatcherSignature;
  }

  public DomainSdkConfigParam() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              DomainName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActivationCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              DispatcherSignature = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("DomainSdkConfigParam");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (DomainName != null && __isset.domainName) {
        field.Name = "domainName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DomainName);
        oprot.WriteFieldEnd();
      }
      if (ActivationCode != null && __isset.activationCode) {
        field.Name = "activationCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivationCode);
        oprot.WriteFieldEnd();
      }
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (DispatcherSignature != null && __isset.dispatcherSignature) {
        field.Name = "dispatcherSignature";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(DispatcherSignature);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("DomainSdkConfigParam(");
    bool __first = true;
    if (DomainName != null && __isset.domainName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DomainName: ");
      __sb.Append(DomainName);
    }
    if (ActivationCode != null && __isset.activationCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActivationCode: ");
      __sb.Append(ActivationCode);
    }
    if (UserId != null && __isset.userId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (DispatcherSignature != null && __isset.dispatcherSignature) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DispatcherSignature: ");
      __sb.Append(DispatcherSignature);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

