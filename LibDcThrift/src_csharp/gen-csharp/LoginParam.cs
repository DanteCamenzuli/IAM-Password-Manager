/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LoginParam : TBase
{
  private int _deviceId;
  private byte[] _udid;
  private byte[] _encPassword;
  private string _osVersion;
  private string _locale;
  private int _hotpCounter;
  private byte[] _digest;
  private byte[] _risk;
  private bool _passwordLess;
  private CpuArch _cpuArch;
  private CommClientType _commClientType;
  private string _sessionCookie;

  public int DeviceId
  {
    get
    {
      return _deviceId;
    }
    set
    {
      __isset.deviceId = true;
      this._deviceId = value;
    }
  }

  public byte[] Udid
  {
    get
    {
      return _udid;
    }
    set
    {
      __isset.udid = true;
      this._udid = value;
    }
  }

  public byte[] EncPassword
  {
    get
    {
      return _encPassword;
    }
    set
    {
      __isset.encPassword = true;
      this._encPassword = value;
    }
  }

  public string OsVersion
  {
    get
    {
      return _osVersion;
    }
    set
    {
      __isset.osVersion = true;
      this._osVersion = value;
    }
  }

  public string Locale
  {
    get
    {
      return _locale;
    }
    set
    {
      __isset.locale = true;
      this._locale = value;
    }
  }

  public int HotpCounter
  {
    get
    {
      return _hotpCounter;
    }
    set
    {
      __isset.hotpCounter = true;
      this._hotpCounter = value;
    }
  }

  public byte[] Digest
  {
    get
    {
      return _digest;
    }
    set
    {
      __isset.digest = true;
      this._digest = value;
    }
  }

  public byte[] Risk
  {
    get
    {
      return _risk;
    }
    set
    {
      __isset.risk = true;
      this._risk = value;
    }
  }

  public bool PasswordLess
  {
    get
    {
      return _passwordLess;
    }
    set
    {
      __isset.passwordLess = true;
      this._passwordLess = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref=".CpuArch"/>
  /// </summary>
  public CpuArch CpuArch
  {
    get
    {
      return _cpuArch;
    }
    set
    {
      __isset.cpuArch = true;
      this._cpuArch = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref=".CommClientType"/>
  /// </summary>
  public CommClientType CommClientType
  {
    get
    {
      return _commClientType;
    }
    set
    {
      __isset.commClientType = true;
      this._commClientType = value;
    }
  }

  public string SessionCookie
  {
    get
    {
      return _sessionCookie;
    }
    set
    {
      __isset.sessionCookie = true;
      this._sessionCookie = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool deviceId;
    public bool udid;
    public bool encPassword;
    public bool osVersion;
    public bool locale;
    public bool hotpCounter;
    public bool digest;
    public bool risk;
    public bool passwordLess;
    public bool cpuArch;
    public bool commClientType;
    public bool sessionCookie;
  }

  public LoginParam() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DeviceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Udid = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              EncPassword = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              OsVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              HotpCounter = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Digest = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Risk = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              PasswordLess = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              CpuArch = (CpuArch)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              CommClientType = (CommClientType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              SessionCookie = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("LoginParam");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (Udid != null && __isset.udid) {
        field.Name = "udid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Udid);
        oprot.WriteFieldEnd();
      }
      if (EncPassword != null && __isset.encPassword) {
        field.Name = "encPassword";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(EncPassword);
        oprot.WriteFieldEnd();
      }
      if (OsVersion != null && __isset.osVersion) {
        field.Name = "osVersion";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OsVersion);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (__isset.hotpCounter) {
        field.Name = "hotpCounter";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HotpCounter);
        oprot.WriteFieldEnd();
      }
      if (Digest != null && __isset.digest) {
        field.Name = "digest";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Digest);
        oprot.WriteFieldEnd();
      }
      if (Risk != null && __isset.risk) {
        field.Name = "risk";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Risk);
        oprot.WriteFieldEnd();
      }
      if (__isset.passwordLess) {
        field.Name = "passwordLess";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PasswordLess);
        oprot.WriteFieldEnd();
      }
      if (__isset.cpuArch) {
        field.Name = "cpuArch";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CpuArch);
        oprot.WriteFieldEnd();
      }
      if (__isset.commClientType) {
        field.Name = "commClientType";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CommClientType);
        oprot.WriteFieldEnd();
      }
      if (SessionCookie != null && __isset.sessionCookie) {
        field.Name = "sessionCookie";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionCookie);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LoginParam(");
    bool __first = true;
    if (__isset.deviceId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceId: ");
      __sb.Append(DeviceId);
    }
    if (Udid != null && __isset.udid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Udid: ");
      __sb.Append(Udid);
    }
    if (EncPassword != null && __isset.encPassword) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EncPassword: ");
      __sb.Append(EncPassword);
    }
    if (OsVersion != null && __isset.osVersion) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OsVersion: ");
      __sb.Append(OsVersion);
    }
    if (Locale != null && __isset.locale) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Locale: ");
      __sb.Append(Locale);
    }
    if (__isset.hotpCounter) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HotpCounter: ");
      __sb.Append(HotpCounter);
    }
    if (Digest != null && __isset.digest) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Digest: ");
      __sb.Append(Digest);
    }
    if (Risk != null && __isset.risk) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Risk: ");
      __sb.Append(Risk);
    }
    if (__isset.passwordLess) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PasswordLess: ");
      __sb.Append(PasswordLess);
    }
    if (__isset.cpuArch) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CpuArch: ");
      __sb.Append(CpuArch);
    }
    if (__isset.commClientType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CommClientType: ");
      __sb.Append(CommClientType);
    }
    if (SessionCookie != null && __isset.sessionCookie) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookie: ");
      __sb.Append(SessionCookie);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

