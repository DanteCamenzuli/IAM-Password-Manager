/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AuthUserResponse : TBase
{
  private bool _success;
  private List<ThriftAuthMethod> _authMethods;
  private int _responseTime;
  private long _msgId;
  private byte[] _userKey;
  private string _sessionCookie;
  private int _sessionCookieExpiresOn;
  private string _secureMsgRandomCode;
  private string _phoneNumber;
  private string _fqUserLoginId;
  private string _fidoResponse;
  private string _ldapDomain;

  public bool Success
  {
    get
    {
      return _success;
    }
    set
    {
      __isset.success = true;
      this._success = value;
    }
  }

  public List<ThriftAuthMethod> AuthMethods
  {
    get
    {
      return _authMethods;
    }
    set
    {
      __isset.authMethods = true;
      this._authMethods = value;
    }
  }

  public int ResponseTime
  {
    get
    {
      return _responseTime;
    }
    set
    {
      __isset.responseTime = true;
      this._responseTime = value;
    }
  }

  public long MsgId
  {
    get
    {
      return _msgId;
    }
    set
    {
      __isset.msgId = true;
      this._msgId = value;
    }
  }

  public byte[] UserKey
  {
    get
    {
      return _userKey;
    }
    set
    {
      __isset.userKey = true;
      this._userKey = value;
    }
  }

  public string SessionCookie
  {
    get
    {
      return _sessionCookie;
    }
    set
    {
      __isset.sessionCookie = true;
      this._sessionCookie = value;
    }
  }

  public int SessionCookieExpiresOn
  {
    get
    {
      return _sessionCookieExpiresOn;
    }
    set
    {
      __isset.sessionCookieExpiresOn = true;
      this._sessionCookieExpiresOn = value;
    }
  }

  public string SecureMsgRandomCode
  {
    get
    {
      return _secureMsgRandomCode;
    }
    set
    {
      __isset.secureMsgRandomCode = true;
      this._secureMsgRandomCode = value;
    }
  }

  public string PhoneNumber
  {
    get
    {
      return _phoneNumber;
    }
    set
    {
      __isset.phoneNumber = true;
      this._phoneNumber = value;
    }
  }

  public string FqUserLoginId
  {
    get
    {
      return _fqUserLoginId;
    }
    set
    {
      __isset.fqUserLoginId = true;
      this._fqUserLoginId = value;
    }
  }

  public string FidoResponse
  {
    get
    {
      return _fidoResponse;
    }
    set
    {
      __isset.fidoResponse = true;
      this._fidoResponse = value;
    }
  }

  public string LdapDomain
  {
    get
    {
      return _ldapDomain;
    }
    set
    {
      __isset.ldapDomain = true;
      this._ldapDomain = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool success;
    public bool authMethods;
    public bool responseTime;
    public bool msgId;
    public bool userKey;
    public bool sessionCookie;
    public bool sessionCookieExpiresOn;
    public bool secureMsgRandomCode;
    public bool phoneNumber;
    public bool fqUserLoginId;
    public bool fidoResponse;
    public bool ldapDomain;
  }

  public AuthUserResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                AuthMethods = new List<ThriftAuthMethod>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  ThriftAuthMethod _elem7;
                  _elem7 = (ThriftAuthMethod)iprot.ReadI32();
                  AuthMethods.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ResponseTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              MsgId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              UserKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              SessionCookie = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              SessionCookieExpiresOn = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              SecureMsgRandomCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              PhoneNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              FqUserLoginId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              FidoResponse = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              LdapDomain = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AuthUserResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.success) {
        field.Name = "success";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      }
      if (AuthMethods != null && __isset.authMethods) {
        field.Name = "authMethods";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, AuthMethods.Count));
          foreach (ThriftAuthMethod _iter8 in AuthMethods)
          {
            oprot.WriteI32((int)_iter8);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.responseTime) {
        field.Name = "responseTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ResponseTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.msgId) {
        field.Name = "msgId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MsgId);
        oprot.WriteFieldEnd();
      }
      if (UserKey != null && __isset.userKey) {
        field.Name = "userKey";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(UserKey);
        oprot.WriteFieldEnd();
      }
      if (SessionCookie != null && __isset.sessionCookie) {
        field.Name = "sessionCookie";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionCookie);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionCookieExpiresOn) {
        field.Name = "sessionCookieExpiresOn";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SessionCookieExpiresOn);
        oprot.WriteFieldEnd();
      }
      if (SecureMsgRandomCode != null && __isset.secureMsgRandomCode) {
        field.Name = "secureMsgRandomCode";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SecureMsgRandomCode);
        oprot.WriteFieldEnd();
      }
      if (PhoneNumber != null && __isset.phoneNumber) {
        field.Name = "phoneNumber";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PhoneNumber);
        oprot.WriteFieldEnd();
      }
      if (FqUserLoginId != null && __isset.fqUserLoginId) {
        field.Name = "fqUserLoginId";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FqUserLoginId);
        oprot.WriteFieldEnd();
      }
      if (FidoResponse != null && __isset.fidoResponse) {
        field.Name = "fidoResponse";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FidoResponse);
        oprot.WriteFieldEnd();
      }
      if (LdapDomain != null && __isset.ldapDomain) {
        field.Name = "ldapDomain";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LdapDomain);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AuthUserResponse(");
    bool __first = true;
    if (__isset.success) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Success: ");
      __sb.Append(Success);
    }
    if (AuthMethods != null && __isset.authMethods) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AuthMethods: ");
      __sb.Append(AuthMethods);
    }
    if (__isset.responseTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ResponseTime: ");
      __sb.Append(ResponseTime);
    }
    if (__isset.msgId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MsgId: ");
      __sb.Append(MsgId);
    }
    if (UserKey != null && __isset.userKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserKey: ");
      __sb.Append(UserKey);
    }
    if (SessionCookie != null && __isset.sessionCookie) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookie: ");
      __sb.Append(SessionCookie);
    }
    if (__isset.sessionCookieExpiresOn) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookieExpiresOn: ");
      __sb.Append(SessionCookieExpiresOn);
    }
    if (SecureMsgRandomCode != null && __isset.secureMsgRandomCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SecureMsgRandomCode: ");
      __sb.Append(SecureMsgRandomCode);
    }
    if (PhoneNumber != null && __isset.phoneNumber) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PhoneNumber: ");
      __sb.Append(PhoneNumber);
    }
    if (FqUserLoginId != null && __isset.fqUserLoginId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FqUserLoginId: ");
      __sb.Append(FqUserLoginId);
    }
    if (FidoResponse != null && __isset.fidoResponse) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FidoResponse: ");
      __sb.Append(FidoResponse);
    }
    if (LdapDomain != null && __isset.ldapDomain) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LdapDomain: ");
      __sb.Append(LdapDomain);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

