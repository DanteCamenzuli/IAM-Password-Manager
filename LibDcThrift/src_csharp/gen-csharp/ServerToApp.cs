/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ServerToApp {
  /// <summary>
  /// Ahh, now onto the cool part, defining a service. Services just need a name
  /// and can optionally inherit from another service using the extends keyword.
  /// </summary>
  public interface ISync {
    void disconnect();
    bool sendMessage(AppMessage appMessage);
    void authAppMessageResponse(AuthAppMessageResponse authAppMessageResponse);
    void proxyOpen(ProxyOpenParam proxyOpenParam);
    byte[] proxyData(long handle, byte[] data);
    void proxyClose(long handle);
  }

  /// <summary>
  /// Ahh, now onto the cool part, defining a service. Services just need a name
  /// and can optionally inherit from another service using the extends keyword.
  /// </summary>
  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_disconnect(AsyncCallback callback, object state);
    void End_disconnect(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, AppMessage appMessage);
    bool End_sendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_authAppMessageResponse(AsyncCallback callback, object state, AuthAppMessageResponse authAppMessageResponse);
    void End_authAppMessageResponse(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_proxyOpen(AsyncCallback callback, object state, ProxyOpenParam proxyOpenParam);
    void End_proxyOpen(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_proxyData(AsyncCallback callback, object state, long handle, byte[] data);
    byte[] End_proxyData(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_proxyClose(AsyncCallback callback, object state, long handle);
    void End_proxyClose(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// Ahh, now onto the cool part, defining a service. Services just need a name
  /// and can optionally inherit from another service using the extends keyword.
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disconnect(AsyncCallback callback, object state)
    {
      return send_disconnect(callback, state);
    }

    public void End_disconnect(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_disconnect();
    }

    #endif

    public void disconnect()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disconnect(null, null);
      End_disconnect(asyncResult);

      #else
      send_disconnect();
      recv_disconnect();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disconnect(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("disconnect", TMessageType.Call, seqid_));
      disconnect_args args = new disconnect_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disconnect()
    {
      oprot_.WriteMessageBegin(new TMessage("disconnect", TMessageType.Call, seqid_));
      disconnect_args args = new disconnect_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_disconnect()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disconnect_result result = new disconnect_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, AppMessage appMessage)
    {
      return send_sendMessage(callback, state, appMessage);
    }

    public bool End_sendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessage();
    }

    #endif

    public bool sendMessage(AppMessage appMessage)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessage(null, null, appMessage);
      return End_sendMessage(asyncResult);

      #else
      send_sendMessage(appMessage);
      return recv_sendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessage(AsyncCallback callback, object state, AppMessage appMessage)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.AppMessage = appMessage;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessage(AppMessage appMessage)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.AppMessage = appMessage;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_sendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessage_result result = new sendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_authAppMessageResponse(AsyncCallback callback, object state, AuthAppMessageResponse authAppMessageResponse)
    {
      return send_authAppMessageResponse(callback, state, authAppMessageResponse);
    }

    public void End_authAppMessageResponse(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_authAppMessageResponse();
    }

    #endif

    public void authAppMessageResponse(AuthAppMessageResponse authAppMessageResponse)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_authAppMessageResponse(null, null, authAppMessageResponse);
      End_authAppMessageResponse(asyncResult);

      #else
      send_authAppMessageResponse(authAppMessageResponse);
      recv_authAppMessageResponse();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_authAppMessageResponse(AsyncCallback callback, object state, AuthAppMessageResponse authAppMessageResponse)
    {
      oprot_.WriteMessageBegin(new TMessage("authAppMessageResponse", TMessageType.Call, seqid_));
      authAppMessageResponse_args args = new authAppMessageResponse_args();
      args.AuthAppMessageResponse = authAppMessageResponse;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_authAppMessageResponse(AuthAppMessageResponse authAppMessageResponse)
    {
      oprot_.WriteMessageBegin(new TMessage("authAppMessageResponse", TMessageType.Call, seqid_));
      authAppMessageResponse_args args = new authAppMessageResponse_args();
      args.AuthAppMessageResponse = authAppMessageResponse;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_authAppMessageResponse()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      authAppMessageResponse_result result = new authAppMessageResponse_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_proxyOpen(AsyncCallback callback, object state, ProxyOpenParam proxyOpenParam)
    {
      return send_proxyOpen(callback, state, proxyOpenParam);
    }

    public void End_proxyOpen(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_proxyOpen();
    }

    #endif

    public void proxyOpen(ProxyOpenParam proxyOpenParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_proxyOpen(null, null, proxyOpenParam);
      End_proxyOpen(asyncResult);

      #else
      send_proxyOpen(proxyOpenParam);
      recv_proxyOpen();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_proxyOpen(AsyncCallback callback, object state, ProxyOpenParam proxyOpenParam)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyOpen", TMessageType.Call, seqid_));
      proxyOpen_args args = new proxyOpen_args();
      args.ProxyOpenParam = proxyOpenParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_proxyOpen(ProxyOpenParam proxyOpenParam)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyOpen", TMessageType.Call, seqid_));
      proxyOpen_args args = new proxyOpen_args();
      args.ProxyOpenParam = proxyOpenParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_proxyOpen()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      proxyOpen_result result = new proxyOpen_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_proxyData(AsyncCallback callback, object state, long handle, byte[] data)
    {
      return send_proxyData(callback, state, handle, data);
    }

    public byte[] End_proxyData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_proxyData();
    }

    #endif

    public byte[] proxyData(long handle, byte[] data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_proxyData(null, null, handle, data);
      return End_proxyData(asyncResult);

      #else
      send_proxyData(handle, data);
      return recv_proxyData();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_proxyData(AsyncCallback callback, object state, long handle, byte[] data)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyData", TMessageType.Call, seqid_));
      proxyData_args args = new proxyData_args();
      args.Handle = handle;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_proxyData(long handle, byte[] data)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyData", TMessageType.Call, seqid_));
      proxyData_args args = new proxyData_args();
      args.Handle = handle;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public byte[] recv_proxyData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      proxyData_result result = new proxyData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "proxyData failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_proxyClose(AsyncCallback callback, object state, long handle)
    {
      return send_proxyClose(callback, state, handle);
    }

    public void End_proxyClose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_proxyClose();
    }

    #endif

    public void proxyClose(long handle)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_proxyClose(null, null, handle);
      End_proxyClose(asyncResult);

      #else
      send_proxyClose(handle);
      recv_proxyClose();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_proxyClose(AsyncCallback callback, object state, long handle)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Call, seqid_));
      proxyClose_args args = new proxyClose_args();
      args.Handle = handle;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_proxyClose(long handle)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Call, seqid_));
      proxyClose_args args = new proxyClose_args();
      args.Handle = handle;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_proxyClose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      proxyClose_result result = new proxyClose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["disconnect"] = disconnect_Process;
      processMap_["sendMessage"] = sendMessage_Process;
      processMap_["authAppMessageResponse"] = authAppMessageResponse_Process;
      processMap_["proxyOpen"] = proxyOpen_Process;
      processMap_["proxyData"] = proxyData_Process;
      processMap_["proxyClose"] = proxyClose_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void disconnect_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disconnect_args args = new disconnect_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disconnect_result result = new disconnect_result();
      try
      {
        try
        {
          iface_.disconnect();
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("disconnect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disconnect", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessage_args args = new sendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessage_result result = new sendMessage_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessage(args.AppMessage);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void authAppMessageResponse_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      authAppMessageResponse_args args = new authAppMessageResponse_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      authAppMessageResponse_result result = new authAppMessageResponse_result();
      try
      {
        try
        {
          iface_.authAppMessageResponse(args.AuthAppMessageResponse);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("authAppMessageResponse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("authAppMessageResponse", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void proxyOpen_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      proxyOpen_args args = new proxyOpen_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      proxyOpen_result result = new proxyOpen_result();
      try
      {
        try
        {
          iface_.proxyOpen(args.ProxyOpenParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("proxyOpen", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("proxyOpen", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void proxyData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      proxyData_args args = new proxyData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      proxyData_result result = new proxyData_result();
      try
      {
        try
        {
          result.Success = iface_.proxyData(args.Handle, args.Data);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("proxyData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("proxyData", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void proxyClose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      proxyClose_args args = new proxyClose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      proxyClose_result result = new proxyClose_result();
      try
      {
        iface_.proxyClose(args.Handle);
        oprot.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disconnect_args : TBase
  {

    public disconnect_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disconnect_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disconnect_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disconnect_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public disconnect_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disconnect_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disconnect_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_args : TBase
  {
    private AppMessage _appMessage;

    public AppMessage AppMessage
    {
      get
      {
        return _appMessage;
      }
      set
      {
        __isset.appMessage = true;
        this._appMessage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool appMessage;
    }

    public sendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AppMessage = new AppMessage();
                AppMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AppMessage != null && __isset.appMessage) {
          field.Name = "appMessage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AppMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_args(");
      bool __first = true;
      if (AppMessage != null && __isset.appMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppMessage: ");
        __sb.Append(AppMessage== null ? "<null>" : AppMessage.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_result : TBase
  {
    private bool _success;
    private AppException _ouch;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public sendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authAppMessageResponse_args : TBase
  {
    private AuthAppMessageResponse _authAppMessageResponse;

    public AuthAppMessageResponse AuthAppMessageResponse
    {
      get
      {
        return _authAppMessageResponse;
      }
      set
      {
        __isset.authAppMessageResponse = true;
        this._authAppMessageResponse = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool authAppMessageResponse;
    }

    public authAppMessageResponse_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AuthAppMessageResponse = new AuthAppMessageResponse();
                AuthAppMessageResponse.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("authAppMessageResponse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthAppMessageResponse != null && __isset.authAppMessageResponse) {
          field.Name = "authAppMessageResponse";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AuthAppMessageResponse.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("authAppMessageResponse_args(");
      bool __first = true;
      if (AuthAppMessageResponse != null && __isset.authAppMessageResponse) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthAppMessageResponse: ");
        __sb.Append(AuthAppMessageResponse== null ? "<null>" : AuthAppMessageResponse.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authAppMessageResponse_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public authAppMessageResponse_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("authAppMessageResponse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("authAppMessageResponse_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyOpen_args : TBase
  {
    private ProxyOpenParam _proxyOpenParam;

    public ProxyOpenParam ProxyOpenParam
    {
      get
      {
        return _proxyOpenParam;
      }
      set
      {
        __isset.proxyOpenParam = true;
        this._proxyOpenParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool proxyOpenParam;
    }

    public proxyOpen_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ProxyOpenParam = new ProxyOpenParam();
                ProxyOpenParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyOpen_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProxyOpenParam != null && __isset.proxyOpenParam) {
          field.Name = "proxyOpenParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ProxyOpenParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyOpen_args(");
      bool __first = true;
      if (ProxyOpenParam != null && __isset.proxyOpenParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProxyOpenParam: ");
        __sb.Append(ProxyOpenParam== null ? "<null>" : ProxyOpenParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyOpen_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public proxyOpen_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyOpen_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyOpen_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyData_args : TBase
  {
    private long _handle;
    private byte[] _data;

    public long Handle
    {
      get
      {
        return _handle;
      }
      set
      {
        __isset.handle = true;
        this._handle = value;
      }
    }

    public byte[] Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool handle;
      public bool data;
    }

    public proxyData_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Handle = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Data = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.handle) {
          field.Name = "handle";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Handle);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyData_args(");
      bool __first = true;
      if (__isset.handle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Handle: ");
        __sb.Append(Handle);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyData_result : TBase
  {
    private byte[] _success;
    private AppException _ouch;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public proxyData_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyData_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyClose_args : TBase
  {
    private long _handle;

    public long Handle
    {
      get
      {
        return _handle;
      }
      set
      {
        __isset.handle = true;
        this._handle = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool handle;
    }

    public proxyClose_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Handle = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyClose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.handle) {
          field.Name = "handle";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Handle);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyClose_args(");
      bool __first = true;
      if (__isset.handle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Handle: ");
        __sb.Append(Handle);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyClose_result : TBase
  {

    public proxyClose_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyClose_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyClose_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
