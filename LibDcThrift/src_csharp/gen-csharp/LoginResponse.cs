/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LoginResponse : TBase
{
  private byte[] _deviceKey;
  private string _oneTimePassword;
  private long _updateAvailableTill;
  private int _passcodeValidFor;
  private string _updateInfo;
  private long _licenceExpiresOn;
  private bool _testLicence;
  private bool _ldapUser;
  private int _keepAliveSeconds;
  private string _sessionCookie;
  private int _sessionCookieExpiresOn;

  public byte[] DeviceKey
  {
    get
    {
      return _deviceKey;
    }
    set
    {
      __isset.deviceKey = true;
      this._deviceKey = value;
    }
  }

  public string OneTimePassword
  {
    get
    {
      return _oneTimePassword;
    }
    set
    {
      __isset.oneTimePassword = true;
      this._oneTimePassword = value;
    }
  }

  public long UpdateAvailableTill
  {
    get
    {
      return _updateAvailableTill;
    }
    set
    {
      __isset.updateAvailableTill = true;
      this._updateAvailableTill = value;
    }
  }

  public int PasscodeValidFor
  {
    get
    {
      return _passcodeValidFor;
    }
    set
    {
      __isset.passcodeValidFor = true;
      this._passcodeValidFor = value;
    }
  }

  public string UpdateInfo
  {
    get
    {
      return _updateInfo;
    }
    set
    {
      __isset.updateInfo = true;
      this._updateInfo = value;
    }
  }

  public long LicenceExpiresOn
  {
    get
    {
      return _licenceExpiresOn;
    }
    set
    {
      __isset.licenceExpiresOn = true;
      this._licenceExpiresOn = value;
    }
  }

  public bool TestLicence
  {
    get
    {
      return _testLicence;
    }
    set
    {
      __isset.testLicence = true;
      this._testLicence = value;
    }
  }

  public bool LdapUser
  {
    get
    {
      return _ldapUser;
    }
    set
    {
      __isset.ldapUser = true;
      this._ldapUser = value;
    }
  }

  public int KeepAliveSeconds
  {
    get
    {
      return _keepAliveSeconds;
    }
    set
    {
      __isset.keepAliveSeconds = true;
      this._keepAliveSeconds = value;
    }
  }

  public string SessionCookie
  {
    get
    {
      return _sessionCookie;
    }
    set
    {
      __isset.sessionCookie = true;
      this._sessionCookie = value;
    }
  }

  public int SessionCookieExpiresOn
  {
    get
    {
      return _sessionCookieExpiresOn;
    }
    set
    {
      __isset.sessionCookieExpiresOn = true;
      this._sessionCookieExpiresOn = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool deviceKey;
    public bool oneTimePassword;
    public bool updateAvailableTill;
    public bool passcodeValidFor;
    public bool updateInfo;
    public bool licenceExpiresOn;
    public bool testLicence;
    public bool ldapUser;
    public bool keepAliveSeconds;
    public bool sessionCookie;
    public bool sessionCookieExpiresOn;
  }

  public LoginResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              DeviceKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              OneTimePassword = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              UpdateAvailableTill = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              PasscodeValidFor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              UpdateInfo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              LicenceExpiresOn = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              TestLicence = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              LdapUser = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              KeepAliveSeconds = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              SessionCookie = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              SessionCookieExpiresOn = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("LoginResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (DeviceKey != null && __isset.deviceKey) {
        field.Name = "deviceKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(DeviceKey);
        oprot.WriteFieldEnd();
      }
      if (OneTimePassword != null && __isset.oneTimePassword) {
        field.Name = "oneTimePassword";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OneTimePassword);
        oprot.WriteFieldEnd();
      }
      if (__isset.updateAvailableTill) {
        field.Name = "updateAvailableTill";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateAvailableTill);
        oprot.WriteFieldEnd();
      }
      if (__isset.passcodeValidFor) {
        field.Name = "passcodeValidFor";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PasscodeValidFor);
        oprot.WriteFieldEnd();
      }
      if (UpdateInfo != null && __isset.updateInfo) {
        field.Name = "updateInfo";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UpdateInfo);
        oprot.WriteFieldEnd();
      }
      if (__isset.licenceExpiresOn) {
        field.Name = "licenceExpiresOn";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LicenceExpiresOn);
        oprot.WriteFieldEnd();
      }
      if (__isset.testLicence) {
        field.Name = "testLicence";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(TestLicence);
        oprot.WriteFieldEnd();
      }
      if (__isset.ldapUser) {
        field.Name = "ldapUser";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(LdapUser);
        oprot.WriteFieldEnd();
      }
      if (__isset.keepAliveSeconds) {
        field.Name = "keepAliveSeconds";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(KeepAliveSeconds);
        oprot.WriteFieldEnd();
      }
      if (SessionCookie != null && __isset.sessionCookie) {
        field.Name = "sessionCookie";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionCookie);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionCookieExpiresOn) {
        field.Name = "sessionCookieExpiresOn";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SessionCookieExpiresOn);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LoginResponse(");
    bool __first = true;
    if (DeviceKey != null && __isset.deviceKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceKey: ");
      __sb.Append(DeviceKey);
    }
    if (OneTimePassword != null && __isset.oneTimePassword) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OneTimePassword: ");
      __sb.Append(OneTimePassword);
    }
    if (__isset.updateAvailableTill) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UpdateAvailableTill: ");
      __sb.Append(UpdateAvailableTill);
    }
    if (__isset.passcodeValidFor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PasscodeValidFor: ");
      __sb.Append(PasscodeValidFor);
    }
    if (UpdateInfo != null && __isset.updateInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UpdateInfo: ");
      __sb.Append(UpdateInfo);
    }
    if (__isset.licenceExpiresOn) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LicenceExpiresOn: ");
      __sb.Append(LicenceExpiresOn);
    }
    if (__isset.testLicence) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TestLicence: ");
      __sb.Append(TestLicence);
    }
    if (__isset.ldapUser) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LdapUser: ");
      __sb.Append(LdapUser);
    }
    if (__isset.keepAliveSeconds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("KeepAliveSeconds: ");
      __sb.Append(KeepAliveSeconds);
    }
    if (SessionCookie != null && __isset.sessionCookie) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookie: ");
      __sb.Append(SessionCookie);
    }
    if (__isset.sessionCookieExpiresOn) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookieExpiresOn: ");
      __sb.Append(SessionCookieExpiresOn);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

