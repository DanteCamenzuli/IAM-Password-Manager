/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SdkSettings : TBase
{
  private int _deviceId;
  private string _userId;
  private string _deviceName;
  private byte[] _privateKey;
  private byte[] _publicKey;
  private byte[] _offlineKey;
  private int _passcodeValidFor;
  private Dictionary<string, string> _safe;
  private byte[] _sessionCookie;
  private int _sessionCookieExpiresOn;

  public int DeviceId
  {
    get
    {
      return _deviceId;
    }
    set
    {
      __isset.deviceId = true;
      this._deviceId = value;
    }
  }

  public string UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public string DeviceName
  {
    get
    {
      return _deviceName;
    }
    set
    {
      __isset.deviceName = true;
      this._deviceName = value;
    }
  }

  public byte[] PrivateKey
  {
    get
    {
      return _privateKey;
    }
    set
    {
      __isset.privateKey = true;
      this._privateKey = value;
    }
  }

  public byte[] PublicKey
  {
    get
    {
      return _publicKey;
    }
    set
    {
      __isset.publicKey = true;
      this._publicKey = value;
    }
  }

  public byte[] OfflineKey
  {
    get
    {
      return _offlineKey;
    }
    set
    {
      __isset.offlineKey = true;
      this._offlineKey = value;
    }
  }

  public int PasscodeValidFor
  {
    get
    {
      return _passcodeValidFor;
    }
    set
    {
      __isset.passcodeValidFor = true;
      this._passcodeValidFor = value;
    }
  }

  public Dictionary<string, string> Safe
  {
    get
    {
      return _safe;
    }
    set
    {
      __isset.safe = true;
      this._safe = value;
    }
  }

  public byte[] SessionCookie
  {
    get
    {
      return _sessionCookie;
    }
    set
    {
      __isset.sessionCookie = true;
      this._sessionCookie = value;
    }
  }

  public int SessionCookieExpiresOn
  {
    get
    {
      return _sessionCookieExpiresOn;
    }
    set
    {
      __isset.sessionCookieExpiresOn = true;
      this._sessionCookieExpiresOn = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool deviceId;
    public bool userId;
    public bool deviceName;
    public bool privateKey;
    public bool publicKey;
    public bool offlineKey;
    public bool passcodeValidFor;
    public bool safe;
    public bool sessionCookie;
    public bool sessionCookieExpiresOn;
  }

  public SdkSettings() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DeviceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DeviceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              PrivateKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              PublicKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              OfflineKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PasscodeValidFor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Map) {
              {
                Safe = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  Safe[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              SessionCookie = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              SessionCookieExpiresOn = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SdkSettings");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (DeviceName != null && __isset.deviceName) {
        field.Name = "deviceName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceName);
        oprot.WriteFieldEnd();
      }
      if (PrivateKey != null && __isset.privateKey) {
        field.Name = "privateKey";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(PrivateKey);
        oprot.WriteFieldEnd();
      }
      if (PublicKey != null && __isset.publicKey) {
        field.Name = "publicKey";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(PublicKey);
        oprot.WriteFieldEnd();
      }
      if (OfflineKey != null && __isset.offlineKey) {
        field.Name = "offlineKey";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(OfflineKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.passcodeValidFor) {
        field.Name = "passcodeValidFor";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PasscodeValidFor);
        oprot.WriteFieldEnd();
      }
      if (Safe != null && __isset.safe) {
        field.Name = "safe";
        field.Type = TType.Map;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Safe.Count));
          foreach (string _iter4 in Safe.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteString(Safe[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SessionCookie != null && __isset.sessionCookie) {
        field.Name = "sessionCookie";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(SessionCookie);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionCookieExpiresOn) {
        field.Name = "sessionCookieExpiresOn";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SessionCookieExpiresOn);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SdkSettings(");
    bool __first = true;
    if (__isset.deviceId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceId: ");
      __sb.Append(DeviceId);
    }
    if (UserId != null && __isset.userId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (DeviceName != null && __isset.deviceName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceName: ");
      __sb.Append(DeviceName);
    }
    if (PrivateKey != null && __isset.privateKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivateKey: ");
      __sb.Append(PrivateKey);
    }
    if (PublicKey != null && __isset.publicKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PublicKey: ");
      __sb.Append(PublicKey);
    }
    if (OfflineKey != null && __isset.offlineKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OfflineKey: ");
      __sb.Append(OfflineKey);
    }
    if (__isset.passcodeValidFor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PasscodeValidFor: ");
      __sb.Append(PasscodeValidFor);
    }
    if (Safe != null && __isset.safe) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Safe: ");
      __sb.Append(Safe);
    }
    if (SessionCookie != null && __isset.sessionCookie) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookie: ");
      __sb.Append(SessionCookie);
    }
    if (__isset.sessionCookieExpiresOn) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookieExpiresOn: ");
      __sb.Append(SessionCookieExpiresOn);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

