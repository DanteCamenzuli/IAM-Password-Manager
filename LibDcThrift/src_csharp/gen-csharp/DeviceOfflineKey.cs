/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class DeviceOfflineKey : TBase
{
  private byte[] _udid;
  private byte[] _offlineKey;
  private int _window;
  private int _validFor;
  private string _algorithm;

  public byte[] Udid
  {
    get
    {
      return _udid;
    }
    set
    {
      __isset.udid = true;
      this._udid = value;
    }
  }

  public byte[] OfflineKey
  {
    get
    {
      return _offlineKey;
    }
    set
    {
      __isset.offlineKey = true;
      this._offlineKey = value;
    }
  }

  public int Window
  {
    get
    {
      return _window;
    }
    set
    {
      __isset.window = true;
      this._window = value;
    }
  }

  public int ValidFor
  {
    get
    {
      return _validFor;
    }
    set
    {
      __isset.validFor = true;
      this._validFor = value;
    }
  }

  public string Algorithm
  {
    get
    {
      return _algorithm;
    }
    set
    {
      __isset.algorithm = true;
      this._algorithm = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool udid;
    public bool offlineKey;
    public bool window;
    public bool validFor;
    public bool algorithm;
  }

  public DeviceOfflineKey() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Udid = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              OfflineKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Window = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ValidFor = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Algorithm = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("DeviceOfflineKey");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Udid != null && __isset.udid) {
        field.Name = "udid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Udid);
        oprot.WriteFieldEnd();
      }
      if (OfflineKey != null && __isset.offlineKey) {
        field.Name = "offlineKey";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(OfflineKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.window) {
        field.Name = "window";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Window);
        oprot.WriteFieldEnd();
      }
      if (__isset.validFor) {
        field.Name = "validFor";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ValidFor);
        oprot.WriteFieldEnd();
      }
      if (Algorithm != null && __isset.algorithm) {
        field.Name = "algorithm";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Algorithm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("DeviceOfflineKey(");
    bool __first = true;
    if (Udid != null && __isset.udid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Udid: ");
      __sb.Append(Udid);
    }
    if (OfflineKey != null && __isset.offlineKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OfflineKey: ");
      __sb.Append(OfflineKey);
    }
    if (__isset.window) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Window: ");
      __sb.Append(Window);
    }
    if (__isset.validFor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ValidFor: ");
      __sb.Append(ValidFor);
    }
    if (Algorithm != null && __isset.algorithm) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Algorithm: ");
      __sb.Append(Algorithm);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

