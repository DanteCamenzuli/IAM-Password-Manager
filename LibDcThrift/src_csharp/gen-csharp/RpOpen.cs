/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class RpOpen : TBase
{
  private string _remoteAddress;
  private AppVersion _appVersion;
  private AppVersion _libVersion;
  private string _tenantName;

  public string RemoteAddress
  {
    get
    {
      return _remoteAddress;
    }
    set
    {
      __isset.remoteAddress = true;
      this._remoteAddress = value;
    }
  }

  public AppVersion AppVersion
  {
    get
    {
      return _appVersion;
    }
    set
    {
      __isset.appVersion = true;
      this._appVersion = value;
    }
  }

  public AppVersion LibVersion
  {
    get
    {
      return _libVersion;
    }
    set
    {
      __isset.libVersion = true;
      this._libVersion = value;
    }
  }

  public string TenantName
  {
    get
    {
      return _tenantName;
    }
    set
    {
      __isset.tenantName = true;
      this._tenantName = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool remoteAddress;
    public bool appVersion;
    public bool libVersion;
    public bool tenantName;
  }

  public RpOpen() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              RemoteAddress = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              AppVersion = new AppVersion();
              AppVersion.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              LibVersion = new AppVersion();
              LibVersion.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              TenantName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RpOpen");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RemoteAddress != null && __isset.remoteAddress) {
        field.Name = "remoteAddress";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RemoteAddress);
        oprot.WriteFieldEnd();
      }
      if (AppVersion != null && __isset.appVersion) {
        field.Name = "appVersion";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        AppVersion.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (LibVersion != null && __isset.libVersion) {
        field.Name = "libVersion";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        LibVersion.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TenantName != null && __isset.tenantName) {
        field.Name = "tenantName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TenantName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RpOpen(");
    bool __first = true;
    if (RemoteAddress != null && __isset.remoteAddress) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RemoteAddress: ");
      __sb.Append(RemoteAddress);
    }
    if (AppVersion != null && __isset.appVersion) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AppVersion: ");
      __sb.Append(AppVersion== null ? "<null>" : AppVersion.ToString());
    }
    if (LibVersion != null && __isset.libVersion) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LibVersion: ");
      __sb.Append(LibVersion== null ? "<null>" : LibVersion.ToString());
    }
    if (TenantName != null && __isset.tenantName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TenantName: ");
      __sb.Append(TenantName);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

