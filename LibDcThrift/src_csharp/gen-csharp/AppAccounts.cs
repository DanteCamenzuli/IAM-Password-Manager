/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AppAccounts : TBase
{
  private List<AppAccount> _accounts;

  public List<AppAccount> Accounts
  {
    get
    {
      return _accounts;
    }
    set
    {
      __isset.accounts = true;
      this._accounts = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool accounts;
  }

  public AppAccounts() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Accounts = new List<AppAccount>();
                TList _list19 = iprot.ReadListBegin();
                for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                {
                  AppAccount _elem21;
                  _elem21 = new AppAccount();
                  _elem21.Read(iprot);
                  Accounts.Add(_elem21);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AppAccounts");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Accounts != null && __isset.accounts) {
        field.Name = "accounts";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Accounts.Count));
          foreach (AppAccount _iter22 in Accounts)
          {
            _iter22.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AppAccounts(");
    bool __first = true;
    if (Accounts != null && __isset.accounts) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Accounts: ");
      __sb.Append(Accounts);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

