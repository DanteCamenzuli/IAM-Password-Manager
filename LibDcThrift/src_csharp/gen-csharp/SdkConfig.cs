/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SdkConfig : TBase
{
  private byte[] _connectionKey;
  private string _serverUrl;
  private string _transportProtocol;
  private byte[] _serverPublicKey;
  private string _portalUrl;

  public byte[] ConnectionKey
  {
    get
    {
      return _connectionKey;
    }
    set
    {
      __isset.connectionKey = true;
      this._connectionKey = value;
    }
  }

  public string ServerUrl
  {
    get
    {
      return _serverUrl;
    }
    set
    {
      __isset.serverUrl = true;
      this._serverUrl = value;
    }
  }

  public string TransportProtocol
  {
    get
    {
      return _transportProtocol;
    }
    set
    {
      __isset.transportProtocol = true;
      this._transportProtocol = value;
    }
  }

  public byte[] ServerPublicKey
  {
    get
    {
      return _serverPublicKey;
    }
    set
    {
      __isset.serverPublicKey = true;
      this._serverPublicKey = value;
    }
  }

  public string PortalUrl
  {
    get
    {
      return _portalUrl;
    }
    set
    {
      __isset.portalUrl = true;
      this._portalUrl = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool connectionKey;
    public bool serverUrl;
    public bool transportProtocol;
    public bool serverPublicKey;
    public bool portalUrl;
  }

  public SdkConfig() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ConnectionKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ServerUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              TransportProtocol = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ServerPublicKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              PortalUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SdkConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ConnectionKey != null && __isset.connectionKey) {
        field.Name = "connectionKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ConnectionKey);
        oprot.WriteFieldEnd();
      }
      if (ServerUrl != null && __isset.serverUrl) {
        field.Name = "serverUrl";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ServerUrl);
        oprot.WriteFieldEnd();
      }
      if (TransportProtocol != null && __isset.transportProtocol) {
        field.Name = "transportProtocol";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TransportProtocol);
        oprot.WriteFieldEnd();
      }
      if (ServerPublicKey != null && __isset.serverPublicKey) {
        field.Name = "serverPublicKey";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ServerPublicKey);
        oprot.WriteFieldEnd();
      }
      if (PortalUrl != null && __isset.portalUrl) {
        field.Name = "portalUrl";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PortalUrl);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SdkConfig(");
    bool __first = true;
    if (ConnectionKey != null && __isset.connectionKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ConnectionKey: ");
      __sb.Append(ConnectionKey);
    }
    if (ServerUrl != null && __isset.serverUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ServerUrl: ");
      __sb.Append(ServerUrl);
    }
    if (TransportProtocol != null && __isset.transportProtocol) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TransportProtocol: ");
      __sb.Append(TransportProtocol);
    }
    if (ServerPublicKey != null && __isset.serverPublicKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ServerPublicKey: ");
      __sb.Append(ServerPublicKey);
    }
    if (PortalUrl != null && __isset.portalUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PortalUrl: ");
      __sb.Append(PortalUrl);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

