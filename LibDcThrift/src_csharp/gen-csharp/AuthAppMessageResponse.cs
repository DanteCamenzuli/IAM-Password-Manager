/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AuthAppMessageResponse : TBase
{
  private bool _succesful;
  private string _errorCode;
  private string _errorMessage;
  private byte[] _userKey;
  private int _sessionCookieExpiresOn;
  private string _sessionCookie;
  private long _msgId;

  public bool Succesful
  {
    get
    {
      return _succesful;
    }
    set
    {
      __isset.succesful = true;
      this._succesful = value;
    }
  }

  public string ErrorCode
  {
    get
    {
      return _errorCode;
    }
    set
    {
      __isset.errorCode = true;
      this._errorCode = value;
    }
  }

  public string ErrorMessage
  {
    get
    {
      return _errorMessage;
    }
    set
    {
      __isset.errorMessage = true;
      this._errorMessage = value;
    }
  }

  public byte[] UserKey
  {
    get
    {
      return _userKey;
    }
    set
    {
      __isset.userKey = true;
      this._userKey = value;
    }
  }

  public int SessionCookieExpiresOn
  {
    get
    {
      return _sessionCookieExpiresOn;
    }
    set
    {
      __isset.sessionCookieExpiresOn = true;
      this._sessionCookieExpiresOn = value;
    }
  }

  public string SessionCookie
  {
    get
    {
      return _sessionCookie;
    }
    set
    {
      __isset.sessionCookie = true;
      this._sessionCookie = value;
    }
  }

  public long MsgId
  {
    get
    {
      return _msgId;
    }
    set
    {
      __isset.msgId = true;
      this._msgId = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool succesful;
    public bool errorCode;
    public bool errorMessage;
    public bool userKey;
    public bool sessionCookieExpiresOn;
    public bool sessionCookie;
    public bool msgId;
  }

  public AuthAppMessageResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Succesful = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ErrorCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ErrorMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              UserKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SessionCookieExpiresOn = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              SessionCookie = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              MsgId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AuthAppMessageResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.succesful) {
        field.Name = "succesful";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Succesful);
        oprot.WriteFieldEnd();
      }
      if (ErrorCode != null && __isset.errorCode) {
        field.Name = "errorCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ErrorCode);
        oprot.WriteFieldEnd();
      }
      if (ErrorMessage != null && __isset.errorMessage) {
        field.Name = "errorMessage";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ErrorMessage);
        oprot.WriteFieldEnd();
      }
      if (UserKey != null && __isset.userKey) {
        field.Name = "userKey";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(UserKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionCookieExpiresOn) {
        field.Name = "sessionCookieExpiresOn";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SessionCookieExpiresOn);
        oprot.WriteFieldEnd();
      }
      if (SessionCookie != null && __isset.sessionCookie) {
        field.Name = "sessionCookie";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionCookie);
        oprot.WriteFieldEnd();
      }
      if (__isset.msgId) {
        field.Name = "msgId";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MsgId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AuthAppMessageResponse(");
    bool __first = true;
    if (__isset.succesful) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Succesful: ");
      __sb.Append(Succesful);
    }
    if (ErrorCode != null && __isset.errorCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorCode: ");
      __sb.Append(ErrorCode);
    }
    if (ErrorMessage != null && __isset.errorMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorMessage: ");
      __sb.Append(ErrorMessage);
    }
    if (UserKey != null && __isset.userKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserKey: ");
      __sb.Append(UserKey);
    }
    if (__isset.sessionCookieExpiresOn) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookieExpiresOn: ");
      __sb.Append(SessionCookieExpiresOn);
    }
    if (SessionCookie != null && __isset.sessionCookie) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionCookie: ");
      __sb.Append(SessionCookie);
    }
    if (__isset.msgId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MsgId: ");
      __sb.Append(MsgId);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

