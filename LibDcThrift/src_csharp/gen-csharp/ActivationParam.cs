/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ActivationParam : TBase
{
  private string _activationCode;
  private string _userId;
  private byte[] _udid;
  private byte[] _encPassword;
  private CpuArch _cpuArch;
  private string _osVersion;
  private string _locale;
  private string _manufacture;
  private string _deviceModel;
  private string _deviceName;
  private byte[] _publicKey;
  private byte[] _signature;
  private ClientType _clientType;
  private byte[] _digest;
  private byte[] _risk;

  public string ActivationCode
  {
    get
    {
      return _activationCode;
    }
    set
    {
      __isset.activationCode = true;
      this._activationCode = value;
    }
  }

  public string UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public byte[] Udid
  {
    get
    {
      return _udid;
    }
    set
    {
      __isset.udid = true;
      this._udid = value;
    }
  }

  public byte[] EncPassword
  {
    get
    {
      return _encPassword;
    }
    set
    {
      __isset.encPassword = true;
      this._encPassword = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref=".CpuArch"/>
  /// </summary>
  public CpuArch CpuArch
  {
    get
    {
      return _cpuArch;
    }
    set
    {
      __isset.cpuArch = true;
      this._cpuArch = value;
    }
  }

  public string OsVersion
  {
    get
    {
      return _osVersion;
    }
    set
    {
      __isset.osVersion = true;
      this._osVersion = value;
    }
  }

  public string Locale
  {
    get
    {
      return _locale;
    }
    set
    {
      __isset.locale = true;
      this._locale = value;
    }
  }

  public string Manufacture
  {
    get
    {
      return _manufacture;
    }
    set
    {
      __isset.manufacture = true;
      this._manufacture = value;
    }
  }

  public string DeviceModel
  {
    get
    {
      return _deviceModel;
    }
    set
    {
      __isset.deviceModel = true;
      this._deviceModel = value;
    }
  }

  public string DeviceName
  {
    get
    {
      return _deviceName;
    }
    set
    {
      __isset.deviceName = true;
      this._deviceName = value;
    }
  }

  public byte[] PublicKey
  {
    get
    {
      return _publicKey;
    }
    set
    {
      __isset.publicKey = true;
      this._publicKey = value;
    }
  }

  public byte[] Signature
  {
    get
    {
      return _signature;
    }
    set
    {
      __isset.signature = true;
      this._signature = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref=".ClientType"/>
  /// </summary>
  public ClientType ClientType
  {
    get
    {
      return _clientType;
    }
    set
    {
      __isset.clientType = true;
      this._clientType = value;
    }
  }

  public byte[] Digest
  {
    get
    {
      return _digest;
    }
    set
    {
      __isset.digest = true;
      this._digest = value;
    }
  }

  public byte[] Risk
  {
    get
    {
      return _risk;
    }
    set
    {
      __isset.risk = true;
      this._risk = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool activationCode;
    public bool userId;
    public bool udid;
    public bool encPassword;
    public bool cpuArch;
    public bool osVersion;
    public bool locale;
    public bool manufacture;
    public bool deviceModel;
    public bool deviceName;
    public bool publicKey;
    public bool signature;
    public bool clientType;
    public bool digest;
    public bool risk;
  }

  public ActivationParam() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ActivationCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Udid = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              EncPassword = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              CpuArch = (CpuArch)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              OsVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Manufacture = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              DeviceModel = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DeviceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              PublicKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Signature = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              ClientType = (ClientType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Digest = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Risk = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ActivationParam");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ActivationCode != null && __isset.activationCode) {
        field.Name = "activationCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActivationCode);
        oprot.WriteFieldEnd();
      }
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (Udid != null && __isset.udid) {
        field.Name = "udid";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Udid);
        oprot.WriteFieldEnd();
      }
      if (EncPassword != null && __isset.encPassword) {
        field.Name = "encPassword";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(EncPassword);
        oprot.WriteFieldEnd();
      }
      if (__isset.cpuArch) {
        field.Name = "cpuArch";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CpuArch);
        oprot.WriteFieldEnd();
      }
      if (OsVersion != null && __isset.osVersion) {
        field.Name = "osVersion";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OsVersion);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      if (Manufacture != null && __isset.manufacture) {
        field.Name = "manufacture";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Manufacture);
        oprot.WriteFieldEnd();
      }
      if (DeviceModel != null && __isset.deviceModel) {
        field.Name = "deviceModel";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceModel);
        oprot.WriteFieldEnd();
      }
      if (DeviceName != null && __isset.deviceName) {
        field.Name = "deviceName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceName);
        oprot.WriteFieldEnd();
      }
      if (PublicKey != null && __isset.publicKey) {
        field.Name = "publicKey";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(PublicKey);
        oprot.WriteFieldEnd();
      }
      if (Signature != null && __isset.signature) {
        field.Name = "signature";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Signature);
        oprot.WriteFieldEnd();
      }
      if (__isset.clientType) {
        field.Name = "clientType";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ClientType);
        oprot.WriteFieldEnd();
      }
      if (Digest != null && __isset.digest) {
        field.Name = "digest";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Digest);
        oprot.WriteFieldEnd();
      }
      if (Risk != null && __isset.risk) {
        field.Name = "risk";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Risk);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ActivationParam(");
    bool __first = true;
    if (ActivationCode != null && __isset.activationCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActivationCode: ");
      __sb.Append(ActivationCode);
    }
    if (UserId != null && __isset.userId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (Udid != null && __isset.udid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Udid: ");
      __sb.Append(Udid);
    }
    if (EncPassword != null && __isset.encPassword) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EncPassword: ");
      __sb.Append(EncPassword);
    }
    if (__isset.cpuArch) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CpuArch: ");
      __sb.Append(CpuArch);
    }
    if (OsVersion != null && __isset.osVersion) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OsVersion: ");
      __sb.Append(OsVersion);
    }
    if (Locale != null && __isset.locale) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Locale: ");
      __sb.Append(Locale);
    }
    if (Manufacture != null && __isset.manufacture) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Manufacture: ");
      __sb.Append(Manufacture);
    }
    if (DeviceModel != null && __isset.deviceModel) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceModel: ");
      __sb.Append(DeviceModel);
    }
    if (DeviceName != null && __isset.deviceName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceName: ");
      __sb.Append(DeviceName);
    }
    if (PublicKey != null && __isset.publicKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PublicKey: ");
      __sb.Append(PublicKey);
    }
    if (Signature != null && __isset.signature) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Signature: ");
      __sb.Append(Signature);
    }
    if (__isset.clientType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ClientType: ");
      __sb.Append(ClientType);
    }
    if (Digest != null && __isset.digest) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Digest: ");
      __sb.Append(Digest);
    }
    if (Risk != null && __isset.risk) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Risk: ");
      __sb.Append(Risk);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

