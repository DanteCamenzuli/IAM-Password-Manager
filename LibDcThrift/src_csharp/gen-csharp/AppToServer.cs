/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class AppToServer {
  /// <summary>
  /// Ahh, now onto the cool part, defining a service. Services just need a name
  /// and can optionally inherit from another service using the extends keyword.
  /// </summary>
  public interface ISync {
    /// <summary>
    /// A method definition looks like C code. It has a return type, arguments,
    /// and optionally a list of exceptions that it may throw. Note that argument
    /// lists and exception lists are specified using the exact same syntax as
    /// field lists in struct or exception definitions.
    /// </summary>
    /// <param name="serverSignatureParam"></param>
    ServerSignatureResponse serverSignature(ServerSignatureParam serverSignatureParam);
    DomainSdkConfigResponse getDomainSdkConfig(DomainSdkConfigParam domainSdkConfigParam);
    RegisterDispatcherResponse registerDispatcher(RegisterDispatcherParam registerDispatcherParam);
    ActivationResponse activation(ActivationParam activationParam);
    LoginResponse login(LoginParam loginParam);
    SignatureResponse clientSignature(SignatureParam signaturenParam);
    Template getTemplateFromId(int id);
    bool sendMessage(AppMessage appMessage);
    void sendMessageResponse(AppMessageResponse appMessageResponse);
    void sendLoginQrCode(string data);
    QrCodeResponse getLoginQrCode(string operatorId, string sessionId);
    void changePassword(byte[] encPassword, byte[] newEncPassword);
    SdkCloudSafe getCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId);
    void renameCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId, string newName);
    void deleteCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId);
    long setCloudSafe(SdkCloudSafe sdkCloudSafe);
    List<SdkCloudSafe> getCloudSafeList(string nameFilter, bool includeShare, long modifiedFromEpoch, CloudSafeOwner owner);
    void disconnect(AppErrorCodes appErrorCodes, string message);
    void keepAlive();
    void deactivate();
    RequestActivationCodeResponse requestActivationCode();
    void verifyPassword(byte[] encPassword);
    AuthUserResponse authenticateUser(AuthUserParam authUserParam);
    AuthSelectResponse getAuthenticationMethods(AuthSelectParam authSelectParam);
    List<DeviceOfflineKey> getDeviceOfflineKeys();
    int authConnect(AuthConnectParam authUserParam);
    byte[] proxyData(long handle, byte[] data);
    void proxyClose(long handle);
  }

  /// <summary>
  /// Ahh, now onto the cool part, defining a service. Services just need a name
  /// and can optionally inherit from another service using the extends keyword.
  /// </summary>
  public interface Iface : ISync {
    /// <summary>
    /// A method definition looks like C code. It has a return type, arguments,
    /// and optionally a list of exceptions that it may throw. Note that argument
    /// lists and exception lists are specified using the exact same syntax as
    /// field lists in struct or exception definitions.
    /// </summary>
    /// <param name="serverSignatureParam"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_serverSignature(AsyncCallback callback, object state, ServerSignatureParam serverSignatureParam);
    ServerSignatureResponse End_serverSignature(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDomainSdkConfig(AsyncCallback callback, object state, DomainSdkConfigParam domainSdkConfigParam);
    DomainSdkConfigResponse End_getDomainSdkConfig(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerDispatcher(AsyncCallback callback, object state, RegisterDispatcherParam registerDispatcherParam);
    RegisterDispatcherResponse End_registerDispatcher(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_activation(AsyncCallback callback, object state, ActivationParam activationParam);
    ActivationResponse End_activation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_login(AsyncCallback callback, object state, LoginParam loginParam);
    LoginResponse End_login(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_clientSignature(AsyncCallback callback, object state, SignatureParam signaturenParam);
    SignatureResponse End_clientSignature(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getTemplateFromId(AsyncCallback callback, object state, int id);
    Template End_getTemplateFromId(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, AppMessage appMessage);
    bool End_sendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageResponse(AsyncCallback callback, object state, AppMessageResponse appMessageResponse);
    void End_sendMessageResponse(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendLoginQrCode(AsyncCallback callback, object state, string data);
    void End_sendLoginQrCode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getLoginQrCode(AsyncCallback callback, object state, string operatorId, string sessionId);
    QrCodeResponse End_getLoginQrCode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_changePassword(AsyncCallback callback, object state, byte[] encPassword, byte[] newEncPassword);
    void End_changePassword(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId);
    SdkCloudSafe End_getCloudSafe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_renameCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId, string newName);
    void End_renameCloudSafe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId);
    void End_deleteCloudSafe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setCloudSafe(AsyncCallback callback, object state, SdkCloudSafe sdkCloudSafe);
    long End_setCloudSafe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCloudSafeList(AsyncCallback callback, object state, string nameFilter, bool includeShare, long modifiedFromEpoch, CloudSafeOwner owner);
    List<SdkCloudSafe> End_getCloudSafeList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_disconnect(AsyncCallback callback, object state, AppErrorCodes appErrorCodes, string message);
    void End_disconnect(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_keepAlive(AsyncCallback callback, object state);
    void End_keepAlive(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deactivate(AsyncCallback callback, object state);
    void End_deactivate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestActivationCode(AsyncCallback callback, object state);
    RequestActivationCodeResponse End_requestActivationCode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyPassword(AsyncCallback callback, object state, byte[] encPassword);
    void End_verifyPassword(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_authenticateUser(AsyncCallback callback, object state, AuthUserParam authUserParam);
    AuthUserResponse End_authenticateUser(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAuthenticationMethods(AsyncCallback callback, object state, AuthSelectParam authSelectParam);
    AuthSelectResponse End_getAuthenticationMethods(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDeviceOfflineKeys(AsyncCallback callback, object state);
    List<DeviceOfflineKey> End_getDeviceOfflineKeys(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_authConnect(AsyncCallback callback, object state, AuthConnectParam authUserParam);
    int End_authConnect(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_proxyData(AsyncCallback callback, object state, long handle, byte[] data);
    byte[] End_proxyData(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_proxyClose(AsyncCallback callback, object state, long handle);
    void End_proxyClose(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// Ahh, now onto the cool part, defining a service. Services just need a name
  /// and can optionally inherit from another service using the extends keyword.
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_serverSignature(AsyncCallback callback, object state, ServerSignatureParam serverSignatureParam)
    {
      return send_serverSignature(callback, state, serverSignatureParam);
    }

    public ServerSignatureResponse End_serverSignature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_serverSignature();
    }

    #endif

    /// <summary>
    /// A method definition looks like C code. It has a return type, arguments,
    /// and optionally a list of exceptions that it may throw. Note that argument
    /// lists and exception lists are specified using the exact same syntax as
    /// field lists in struct or exception definitions.
    /// </summary>
    /// <param name="serverSignatureParam"></param>
    public ServerSignatureResponse serverSignature(ServerSignatureParam serverSignatureParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_serverSignature(null, null, serverSignatureParam);
      return End_serverSignature(asyncResult);

      #else
      send_serverSignature(serverSignatureParam);
      return recv_serverSignature();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_serverSignature(AsyncCallback callback, object state, ServerSignatureParam serverSignatureParam)
    {
      oprot_.WriteMessageBegin(new TMessage("serverSignature", TMessageType.Call, seqid_));
      serverSignature_args args = new serverSignature_args();
      args.ServerSignatureParam = serverSignatureParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_serverSignature(ServerSignatureParam serverSignatureParam)
    {
      oprot_.WriteMessageBegin(new TMessage("serverSignature", TMessageType.Call, seqid_));
      serverSignature_args args = new serverSignature_args();
      args.ServerSignatureParam = serverSignatureParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ServerSignatureResponse recv_serverSignature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      serverSignature_result result = new serverSignature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "serverSignature failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getDomainSdkConfig(AsyncCallback callback, object state, DomainSdkConfigParam domainSdkConfigParam)
    {
      return send_getDomainSdkConfig(callback, state, domainSdkConfigParam);
    }

    public DomainSdkConfigResponse End_getDomainSdkConfig(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDomainSdkConfig();
    }

    #endif

    public DomainSdkConfigResponse getDomainSdkConfig(DomainSdkConfigParam domainSdkConfigParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getDomainSdkConfig(null, null, domainSdkConfigParam);
      return End_getDomainSdkConfig(asyncResult);

      #else
      send_getDomainSdkConfig(domainSdkConfigParam);
      return recv_getDomainSdkConfig();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDomainSdkConfig(AsyncCallback callback, object state, DomainSdkConfigParam domainSdkConfigParam)
    {
      oprot_.WriteMessageBegin(new TMessage("getDomainSdkConfig", TMessageType.Call, seqid_));
      getDomainSdkConfig_args args = new getDomainSdkConfig_args();
      args.DomainSdkConfigParam = domainSdkConfigParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getDomainSdkConfig(DomainSdkConfigParam domainSdkConfigParam)
    {
      oprot_.WriteMessageBegin(new TMessage("getDomainSdkConfig", TMessageType.Call, seqid_));
      getDomainSdkConfig_args args = new getDomainSdkConfig_args();
      args.DomainSdkConfigParam = domainSdkConfigParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public DomainSdkConfigResponse recv_getDomainSdkConfig()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDomainSdkConfig_result result = new getDomainSdkConfig_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDomainSdkConfig failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerDispatcher(AsyncCallback callback, object state, RegisterDispatcherParam registerDispatcherParam)
    {
      return send_registerDispatcher(callback, state, registerDispatcherParam);
    }

    public RegisterDispatcherResponse End_registerDispatcher(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerDispatcher();
    }

    #endif

    public RegisterDispatcherResponse registerDispatcher(RegisterDispatcherParam registerDispatcherParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerDispatcher(null, null, registerDispatcherParam);
      return End_registerDispatcher(asyncResult);

      #else
      send_registerDispatcher(registerDispatcherParam);
      return recv_registerDispatcher();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerDispatcher(AsyncCallback callback, object state, RegisterDispatcherParam registerDispatcherParam)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDispatcher", TMessageType.Call, seqid_));
      registerDispatcher_args args = new registerDispatcher_args();
      args.RegisterDispatcherParam = registerDispatcherParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerDispatcher(RegisterDispatcherParam registerDispatcherParam)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDispatcher", TMessageType.Call, seqid_));
      registerDispatcher_args args = new registerDispatcher_args();
      args.RegisterDispatcherParam = registerDispatcherParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RegisterDispatcherResponse recv_registerDispatcher()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerDispatcher_result result = new registerDispatcher_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDispatcher failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_activation(AsyncCallback callback, object state, ActivationParam activationParam)
    {
      return send_activation(callback, state, activationParam);
    }

    public ActivationResponse End_activation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_activation();
    }

    #endif

    public ActivationResponse activation(ActivationParam activationParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_activation(null, null, activationParam);
      return End_activation(asyncResult);

      #else
      send_activation(activationParam);
      return recv_activation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_activation(AsyncCallback callback, object state, ActivationParam activationParam)
    {
      oprot_.WriteMessageBegin(new TMessage("activation", TMessageType.Call, seqid_));
      activation_args args = new activation_args();
      args.ActivationParam = activationParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_activation(ActivationParam activationParam)
    {
      oprot_.WriteMessageBegin(new TMessage("activation", TMessageType.Call, seqid_));
      activation_args args = new activation_args();
      args.ActivationParam = activationParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ActivationResponse recv_activation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      activation_result result = new activation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_login(AsyncCallback callback, object state, LoginParam loginParam)
    {
      return send_login(callback, state, loginParam);
    }

    public LoginResponse End_login(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_login();
    }

    #endif

    public LoginResponse login(LoginParam loginParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_login(null, null, loginParam);
      return End_login(asyncResult);

      #else
      send_login(loginParam);
      return recv_login();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_login(AsyncCallback callback, object state, LoginParam loginParam)
    {
      oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
      login_args args = new login_args();
      args.LoginParam = loginParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_login(LoginParam loginParam)
    {
      oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
      login_args args = new login_args();
      args.LoginParam = loginParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LoginResponse recv_login()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      login_result result = new login_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_clientSignature(AsyncCallback callback, object state, SignatureParam signaturenParam)
    {
      return send_clientSignature(callback, state, signaturenParam);
    }

    public SignatureResponse End_clientSignature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_clientSignature();
    }

    #endif

    public SignatureResponse clientSignature(SignatureParam signaturenParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_clientSignature(null, null, signaturenParam);
      return End_clientSignature(asyncResult);

      #else
      send_clientSignature(signaturenParam);
      return recv_clientSignature();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_clientSignature(AsyncCallback callback, object state, SignatureParam signaturenParam)
    {
      oprot_.WriteMessageBegin(new TMessage("clientSignature", TMessageType.Call, seqid_));
      clientSignature_args args = new clientSignature_args();
      args.SignaturenParam = signaturenParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_clientSignature(SignatureParam signaturenParam)
    {
      oprot_.WriteMessageBegin(new TMessage("clientSignature", TMessageType.Call, seqid_));
      clientSignature_args args = new clientSignature_args();
      args.SignaturenParam = signaturenParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SignatureResponse recv_clientSignature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      clientSignature_result result = new clientSignature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clientSignature failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getTemplateFromId(AsyncCallback callback, object state, int id)
    {
      return send_getTemplateFromId(callback, state, id);
    }

    public Template End_getTemplateFromId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTemplateFromId();
    }

    #endif

    public Template getTemplateFromId(int id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getTemplateFromId(null, null, id);
      return End_getTemplateFromId(asyncResult);

      #else
      send_getTemplateFromId(id);
      return recv_getTemplateFromId();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTemplateFromId(AsyncCallback callback, object state, int id)
    {
      oprot_.WriteMessageBegin(new TMessage("getTemplateFromId", TMessageType.Call, seqid_));
      getTemplateFromId_args args = new getTemplateFromId_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getTemplateFromId(int id)
    {
      oprot_.WriteMessageBegin(new TMessage("getTemplateFromId", TMessageType.Call, seqid_));
      getTemplateFromId_args args = new getTemplateFromId_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Template recv_getTemplateFromId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTemplateFromId_result result = new getTemplateFromId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTemplateFromId failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, AppMessage appMessage)
    {
      return send_sendMessage(callback, state, appMessage);
    }

    public bool End_sendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessage();
    }

    #endif

    public bool sendMessage(AppMessage appMessage)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessage(null, null, appMessage);
      return End_sendMessage(asyncResult);

      #else
      send_sendMessage(appMessage);
      return recv_sendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessage(AsyncCallback callback, object state, AppMessage appMessage)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.AppMessage = appMessage;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessage(AppMessage appMessage)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.AppMessage = appMessage;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_sendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessage_result result = new sendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageResponse(AsyncCallback callback, object state, AppMessageResponse appMessageResponse)
    {
      return send_sendMessageResponse(callback, state, appMessageResponse);
    }

    public void End_sendMessageResponse(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendMessageResponse();
    }

    #endif

    public void sendMessageResponse(AppMessageResponse appMessageResponse)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageResponse(null, null, appMessageResponse);
      End_sendMessageResponse(asyncResult);

      #else
      send_sendMessageResponse(appMessageResponse);
      recv_sendMessageResponse();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageResponse(AsyncCallback callback, object state, AppMessageResponse appMessageResponse)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageResponse", TMessageType.Call, seqid_));
      sendMessageResponse_args args = new sendMessageResponse_args();
      args.AppMessageResponse = appMessageResponse;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageResponse(AppMessageResponse appMessageResponse)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageResponse", TMessageType.Call, seqid_));
      sendMessageResponse_args args = new sendMessageResponse_args();
      args.AppMessageResponse = appMessageResponse;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendMessageResponse()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageResponse_result result = new sendMessageResponse_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendLoginQrCode(AsyncCallback callback, object state, string data)
    {
      return send_sendLoginQrCode(callback, state, data);
    }

    public void End_sendLoginQrCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendLoginQrCode();
    }

    #endif

    public void sendLoginQrCode(string data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendLoginQrCode(null, null, data);
      End_sendLoginQrCode(asyncResult);

      #else
      send_sendLoginQrCode(data);
      recv_sendLoginQrCode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendLoginQrCode(AsyncCallback callback, object state, string data)
    {
      oprot_.WriteMessageBegin(new TMessage("sendLoginQrCode", TMessageType.Call, seqid_));
      sendLoginQrCode_args args = new sendLoginQrCode_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendLoginQrCode(string data)
    {
      oprot_.WriteMessageBegin(new TMessage("sendLoginQrCode", TMessageType.Call, seqid_));
      sendLoginQrCode_args args = new sendLoginQrCode_args();
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendLoginQrCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendLoginQrCode_result result = new sendLoginQrCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getLoginQrCode(AsyncCallback callback, object state, string operatorId, string sessionId)
    {
      return send_getLoginQrCode(callback, state, operatorId, sessionId);
    }

    public QrCodeResponse End_getLoginQrCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLoginQrCode();
    }

    #endif

    public QrCodeResponse getLoginQrCode(string operatorId, string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getLoginQrCode(null, null, operatorId, sessionId);
      return End_getLoginQrCode(asyncResult);

      #else
      send_getLoginQrCode(operatorId, sessionId);
      return recv_getLoginQrCode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLoginQrCode(AsyncCallback callback, object state, string operatorId, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getLoginQrCode", TMessageType.Call, seqid_));
      getLoginQrCode_args args = new getLoginQrCode_args();
      args.OperatorId = operatorId;
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getLoginQrCode(string operatorId, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getLoginQrCode", TMessageType.Call, seqid_));
      getLoginQrCode_args args = new getLoginQrCode_args();
      args.OperatorId = operatorId;
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public QrCodeResponse recv_getLoginQrCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLoginQrCode_result result = new getLoginQrCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLoginQrCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_changePassword(AsyncCallback callback, object state, byte[] encPassword, byte[] newEncPassword)
    {
      return send_changePassword(callback, state, encPassword, newEncPassword);
    }

    public void End_changePassword(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_changePassword();
    }

    #endif

    public void changePassword(byte[] encPassword, byte[] newEncPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_changePassword(null, null, encPassword, newEncPassword);
      End_changePassword(asyncResult);

      #else
      send_changePassword(encPassword, newEncPassword);
      recv_changePassword();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_changePassword(AsyncCallback callback, object state, byte[] encPassword, byte[] newEncPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("changePassword", TMessageType.Call, seqid_));
      changePassword_args args = new changePassword_args();
      args.EncPassword = encPassword;
      args.NewEncPassword = newEncPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_changePassword(byte[] encPassword, byte[] newEncPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("changePassword", TMessageType.Call, seqid_));
      changePassword_args args = new changePassword_args();
      args.EncPassword = encPassword;
      args.NewEncPassword = newEncPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_changePassword()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      changePassword_result result = new changePassword_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      return send_getCloudSafe(callback, state, uniqueKey, userLoginId);
    }

    public SdkCloudSafe End_getCloudSafe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCloudSafe();
    }

    #endif

    public SdkCloudSafe getCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCloudSafe(null, null, uniqueKey, userLoginId);
      return End_getCloudSafe(asyncResult);

      #else
      send_getCloudSafe(uniqueKey, userLoginId);
      return recv_getCloudSafe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      oprot_.WriteMessageBegin(new TMessage("getCloudSafe", TMessageType.Call, seqid_));
      getCloudSafe_args args = new getCloudSafe_args();
      args.UniqueKey = uniqueKey;
      args.UserLoginId = userLoginId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      oprot_.WriteMessageBegin(new TMessage("getCloudSafe", TMessageType.Call, seqid_));
      getCloudSafe_args args = new getCloudSafe_args();
      args.UniqueKey = uniqueKey;
      args.UserLoginId = userLoginId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SdkCloudSafe recv_getCloudSafe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCloudSafe_result result = new getCloudSafe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCloudSafe failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_renameCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId, string newName)
    {
      return send_renameCloudSafe(callback, state, uniqueKey, userLoginId, newName);
    }

    public void End_renameCloudSafe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_renameCloudSafe();
    }

    #endif

    public void renameCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId, string newName)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_renameCloudSafe(null, null, uniqueKey, userLoginId, newName);
      End_renameCloudSafe(asyncResult);

      #else
      send_renameCloudSafe(uniqueKey, userLoginId, newName);
      recv_renameCloudSafe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_renameCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId, string newName)
    {
      oprot_.WriteMessageBegin(new TMessage("renameCloudSafe", TMessageType.Call, seqid_));
      renameCloudSafe_args args = new renameCloudSafe_args();
      args.UniqueKey = uniqueKey;
      args.UserLoginId = userLoginId;
      args.NewName = newName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_renameCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId, string newName)
    {
      oprot_.WriteMessageBegin(new TMessage("renameCloudSafe", TMessageType.Call, seqid_));
      renameCloudSafe_args args = new renameCloudSafe_args();
      args.UniqueKey = uniqueKey;
      args.UserLoginId = userLoginId;
      args.NewName = newName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_renameCloudSafe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      renameCloudSafe_result result = new renameCloudSafe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      return send_deleteCloudSafe(callback, state, uniqueKey, userLoginId);
    }

    public void End_deleteCloudSafe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteCloudSafe();
    }

    #endif

    public void deleteCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteCloudSafe(null, null, uniqueKey, userLoginId);
      End_deleteCloudSafe(asyncResult);

      #else
      send_deleteCloudSafe(uniqueKey, userLoginId);
      recv_deleteCloudSafe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteCloudSafe(AsyncCallback callback, object state, SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteCloudSafe", TMessageType.Call, seqid_));
      deleteCloudSafe_args args = new deleteCloudSafe_args();
      args.UniqueKey = uniqueKey;
      args.UserLoginId = userLoginId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteCloudSafe(SdkCloudSafeKey uniqueKey, string userLoginId)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteCloudSafe", TMessageType.Call, seqid_));
      deleteCloudSafe_args args = new deleteCloudSafe_args();
      args.UniqueKey = uniqueKey;
      args.UserLoginId = userLoginId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_deleteCloudSafe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteCloudSafe_result result = new deleteCloudSafe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setCloudSafe(AsyncCallback callback, object state, SdkCloudSafe sdkCloudSafe)
    {
      return send_setCloudSafe(callback, state, sdkCloudSafe);
    }

    public long End_setCloudSafe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setCloudSafe();
    }

    #endif

    public long setCloudSafe(SdkCloudSafe sdkCloudSafe)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setCloudSafe(null, null, sdkCloudSafe);
      return End_setCloudSafe(asyncResult);

      #else
      send_setCloudSafe(sdkCloudSafe);
      return recv_setCloudSafe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setCloudSafe(AsyncCallback callback, object state, SdkCloudSafe sdkCloudSafe)
    {
      oprot_.WriteMessageBegin(new TMessage("setCloudSafe", TMessageType.Call, seqid_));
      setCloudSafe_args args = new setCloudSafe_args();
      args.SdkCloudSafe = sdkCloudSafe;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setCloudSafe(SdkCloudSafe sdkCloudSafe)
    {
      oprot_.WriteMessageBegin(new TMessage("setCloudSafe", TMessageType.Call, seqid_));
      setCloudSafe_args args = new setCloudSafe_args();
      args.SdkCloudSafe = sdkCloudSafe;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_setCloudSafe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setCloudSafe_result result = new setCloudSafe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCloudSafe failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCloudSafeList(AsyncCallback callback, object state, string nameFilter, bool includeShare, long modifiedFromEpoch, CloudSafeOwner owner)
    {
      return send_getCloudSafeList(callback, state, nameFilter, includeShare, modifiedFromEpoch, owner);
    }

    public List<SdkCloudSafe> End_getCloudSafeList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCloudSafeList();
    }

    #endif

    public List<SdkCloudSafe> getCloudSafeList(string nameFilter, bool includeShare, long modifiedFromEpoch, CloudSafeOwner owner)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCloudSafeList(null, null, nameFilter, includeShare, modifiedFromEpoch, owner);
      return End_getCloudSafeList(asyncResult);

      #else
      send_getCloudSafeList(nameFilter, includeShare, modifiedFromEpoch, owner);
      return recv_getCloudSafeList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCloudSafeList(AsyncCallback callback, object state, string nameFilter, bool includeShare, long modifiedFromEpoch, CloudSafeOwner owner)
    {
      oprot_.WriteMessageBegin(new TMessage("getCloudSafeList", TMessageType.Call, seqid_));
      getCloudSafeList_args args = new getCloudSafeList_args();
      args.NameFilter = nameFilter;
      args.IncludeShare = includeShare;
      args.ModifiedFromEpoch = modifiedFromEpoch;
      args.Owner = owner;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCloudSafeList(string nameFilter, bool includeShare, long modifiedFromEpoch, CloudSafeOwner owner)
    {
      oprot_.WriteMessageBegin(new TMessage("getCloudSafeList", TMessageType.Call, seqid_));
      getCloudSafeList_args args = new getCloudSafeList_args();
      args.NameFilter = nameFilter;
      args.IncludeShare = includeShare;
      args.ModifiedFromEpoch = modifiedFromEpoch;
      args.Owner = owner;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SdkCloudSafe> recv_getCloudSafeList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCloudSafeList_result result = new getCloudSafeList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCloudSafeList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_disconnect(AsyncCallback callback, object state, AppErrorCodes appErrorCodes, string message)
    {
      return send_disconnect(callback, state, appErrorCodes, message);
    }

    public void End_disconnect(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_disconnect();
    }

    #endif

    public void disconnect(AppErrorCodes appErrorCodes, string message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_disconnect(null, null, appErrorCodes, message);
      End_disconnect(asyncResult);

      #else
      send_disconnect(appErrorCodes, message);
      recv_disconnect();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_disconnect(AsyncCallback callback, object state, AppErrorCodes appErrorCodes, string message)
    {
      oprot_.WriteMessageBegin(new TMessage("disconnect", TMessageType.Call, seqid_));
      disconnect_args args = new disconnect_args();
      args.AppErrorCodes = appErrorCodes;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_disconnect(AppErrorCodes appErrorCodes, string message)
    {
      oprot_.WriteMessageBegin(new TMessage("disconnect", TMessageType.Call, seqid_));
      disconnect_args args = new disconnect_args();
      args.AppErrorCodes = appErrorCodes;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_disconnect()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disconnect_result result = new disconnect_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_keepAlive(AsyncCallback callback, object state)
    {
      return send_keepAlive(callback, state);
    }

    public void End_keepAlive(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_keepAlive();
    }

    #endif

    public void keepAlive()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_keepAlive(null, null);
      End_keepAlive(asyncResult);

      #else
      send_keepAlive();
      recv_keepAlive();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_keepAlive(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("keepAlive", TMessageType.Call, seqid_));
      keepAlive_args args = new keepAlive_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_keepAlive()
    {
      oprot_.WriteMessageBegin(new TMessage("keepAlive", TMessageType.Call, seqid_));
      keepAlive_args args = new keepAlive_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_keepAlive()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      keepAlive_result result = new keepAlive_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deactivate(AsyncCallback callback, object state)
    {
      return send_deactivate(callback, state);
    }

    public void End_deactivate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deactivate();
    }

    #endif

    public void deactivate()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deactivate(null, null);
      End_deactivate(asyncResult);

      #else
      send_deactivate();
      recv_deactivate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deactivate(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("deactivate", TMessageType.Call, seqid_));
      deactivate_args args = new deactivate_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deactivate()
    {
      oprot_.WriteMessageBegin(new TMessage("deactivate", TMessageType.Call, seqid_));
      deactivate_args args = new deactivate_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_deactivate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deactivate_result result = new deactivate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestActivationCode(AsyncCallback callback, object state)
    {
      return send_requestActivationCode(callback, state);
    }

    public RequestActivationCodeResponse End_requestActivationCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_requestActivationCode();
    }

    #endif

    public RequestActivationCodeResponse requestActivationCode()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestActivationCode(null, null);
      return End_requestActivationCode(asyncResult);

      #else
      send_requestActivationCode();
      return recv_requestActivationCode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestActivationCode(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("requestActivationCode", TMessageType.Call, seqid_));
      requestActivationCode_args args = new requestActivationCode_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestActivationCode()
    {
      oprot_.WriteMessageBegin(new TMessage("requestActivationCode", TMessageType.Call, seqid_));
      requestActivationCode_args args = new requestActivationCode_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RequestActivationCodeResponse recv_requestActivationCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestActivationCode_result result = new requestActivationCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestActivationCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyPassword(AsyncCallback callback, object state, byte[] encPassword)
    {
      return send_verifyPassword(callback, state, encPassword);
    }

    public void End_verifyPassword(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_verifyPassword();
    }

    #endif

    public void verifyPassword(byte[] encPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyPassword(null, null, encPassword);
      End_verifyPassword(asyncResult);

      #else
      send_verifyPassword(encPassword);
      recv_verifyPassword();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyPassword(AsyncCallback callback, object state, byte[] encPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPassword", TMessageType.Call, seqid_));
      verifyPassword_args args = new verifyPassword_args();
      args.EncPassword = encPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyPassword(byte[] encPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPassword", TMessageType.Call, seqid_));
      verifyPassword_args args = new verifyPassword_args();
      args.EncPassword = encPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_verifyPassword()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyPassword_result result = new verifyPassword_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_authenticateUser(AsyncCallback callback, object state, AuthUserParam authUserParam)
    {
      return send_authenticateUser(callback, state, authUserParam);
    }

    public AuthUserResponse End_authenticateUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_authenticateUser();
    }

    #endif

    public AuthUserResponse authenticateUser(AuthUserParam authUserParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_authenticateUser(null, null, authUserParam);
      return End_authenticateUser(asyncResult);

      #else
      send_authenticateUser(authUserParam);
      return recv_authenticateUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_authenticateUser(AsyncCallback callback, object state, AuthUserParam authUserParam)
    {
      oprot_.WriteMessageBegin(new TMessage("authenticateUser", TMessageType.Call, seqid_));
      authenticateUser_args args = new authenticateUser_args();
      args.AuthUserParam = authUserParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_authenticateUser(AuthUserParam authUserParam)
    {
      oprot_.WriteMessageBegin(new TMessage("authenticateUser", TMessageType.Call, seqid_));
      authenticateUser_args args = new authenticateUser_args();
      args.AuthUserParam = authUserParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public AuthUserResponse recv_authenticateUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      authenticateUser_result result = new authenticateUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authenticateUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAuthenticationMethods(AsyncCallback callback, object state, AuthSelectParam authSelectParam)
    {
      return send_getAuthenticationMethods(callback, state, authSelectParam);
    }

    public AuthSelectResponse End_getAuthenticationMethods(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAuthenticationMethods();
    }

    #endif

    public AuthSelectResponse getAuthenticationMethods(AuthSelectParam authSelectParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAuthenticationMethods(null, null, authSelectParam);
      return End_getAuthenticationMethods(asyncResult);

      #else
      send_getAuthenticationMethods(authSelectParam);
      return recv_getAuthenticationMethods();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAuthenticationMethods(AsyncCallback callback, object state, AuthSelectParam authSelectParam)
    {
      oprot_.WriteMessageBegin(new TMessage("getAuthenticationMethods", TMessageType.Call, seqid_));
      getAuthenticationMethods_args args = new getAuthenticationMethods_args();
      args.AuthSelectParam = authSelectParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAuthenticationMethods(AuthSelectParam authSelectParam)
    {
      oprot_.WriteMessageBegin(new TMessage("getAuthenticationMethods", TMessageType.Call, seqid_));
      getAuthenticationMethods_args args = new getAuthenticationMethods_args();
      args.AuthSelectParam = authSelectParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public AuthSelectResponse recv_getAuthenticationMethods()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAuthenticationMethods_result result = new getAuthenticationMethods_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAuthenticationMethods failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getDeviceOfflineKeys(AsyncCallback callback, object state)
    {
      return send_getDeviceOfflineKeys(callback, state);
    }

    public List<DeviceOfflineKey> End_getDeviceOfflineKeys(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceOfflineKeys();
    }

    #endif

    public List<DeviceOfflineKey> getDeviceOfflineKeys()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getDeviceOfflineKeys(null, null);
      return End_getDeviceOfflineKeys(asyncResult);

      #else
      send_getDeviceOfflineKeys();
      return recv_getDeviceOfflineKeys();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDeviceOfflineKeys(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceOfflineKeys", TMessageType.Call, seqid_));
      getDeviceOfflineKeys_args args = new getDeviceOfflineKeys_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getDeviceOfflineKeys()
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceOfflineKeys", TMessageType.Call, seqid_));
      getDeviceOfflineKeys_args args = new getDeviceOfflineKeys_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<DeviceOfflineKey> recv_getDeviceOfflineKeys()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceOfflineKeys_result result = new getDeviceOfflineKeys_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceOfflineKeys failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_authConnect(AsyncCallback callback, object state, AuthConnectParam authUserParam)
    {
      return send_authConnect(callback, state, authUserParam);
    }

    public int End_authConnect(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_authConnect();
    }

    #endif

    public int authConnect(AuthConnectParam authUserParam)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_authConnect(null, null, authUserParam);
      return End_authConnect(asyncResult);

      #else
      send_authConnect(authUserParam);
      return recv_authConnect();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_authConnect(AsyncCallback callback, object state, AuthConnectParam authUserParam)
    {
      oprot_.WriteMessageBegin(new TMessage("authConnect", TMessageType.Call, seqid_));
      authConnect_args args = new authConnect_args();
      args.AuthUserParam = authUserParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_authConnect(AuthConnectParam authUserParam)
    {
      oprot_.WriteMessageBegin(new TMessage("authConnect", TMessageType.Call, seqid_));
      authConnect_args args = new authConnect_args();
      args.AuthUserParam = authUserParam;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_authConnect()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      authConnect_result result = new authConnect_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "authConnect failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_proxyData(AsyncCallback callback, object state, long handle, byte[] data)
    {
      return send_proxyData(callback, state, handle, data);
    }

    public byte[] End_proxyData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_proxyData();
    }

    #endif

    public byte[] proxyData(long handle, byte[] data)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_proxyData(null, null, handle, data);
      return End_proxyData(asyncResult);

      #else
      send_proxyData(handle, data);
      return recv_proxyData();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_proxyData(AsyncCallback callback, object state, long handle, byte[] data)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyData", TMessageType.Call, seqid_));
      proxyData_args args = new proxyData_args();
      args.Handle = handle;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_proxyData(long handle, byte[] data)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyData", TMessageType.Call, seqid_));
      proxyData_args args = new proxyData_args();
      args.Handle = handle;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public byte[] recv_proxyData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      proxyData_result result = new proxyData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "proxyData failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_proxyClose(AsyncCallback callback, object state, long handle)
    {
      return send_proxyClose(callback, state, handle);
    }

    public void End_proxyClose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_proxyClose();
    }

    #endif

    public void proxyClose(long handle)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_proxyClose(null, null, handle);
      End_proxyClose(asyncResult);

      #else
      send_proxyClose(handle);
      recv_proxyClose();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_proxyClose(AsyncCallback callback, object state, long handle)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Call, seqid_));
      proxyClose_args args = new proxyClose_args();
      args.Handle = handle;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_proxyClose(long handle)
    {
      oprot_.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Call, seqid_));
      proxyClose_args args = new proxyClose_args();
      args.Handle = handle;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_proxyClose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      proxyClose_result result = new proxyClose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["serverSignature"] = serverSignature_Process;
      processMap_["getDomainSdkConfig"] = getDomainSdkConfig_Process;
      processMap_["registerDispatcher"] = registerDispatcher_Process;
      processMap_["activation"] = activation_Process;
      processMap_["login"] = login_Process;
      processMap_["clientSignature"] = clientSignature_Process;
      processMap_["getTemplateFromId"] = getTemplateFromId_Process;
      processMap_["sendMessage"] = sendMessage_Process;
      processMap_["sendMessageResponse"] = sendMessageResponse_Process;
      processMap_["sendLoginQrCode"] = sendLoginQrCode_Process;
      processMap_["getLoginQrCode"] = getLoginQrCode_Process;
      processMap_["changePassword"] = changePassword_Process;
      processMap_["getCloudSafe"] = getCloudSafe_Process;
      processMap_["renameCloudSafe"] = renameCloudSafe_Process;
      processMap_["deleteCloudSafe"] = deleteCloudSafe_Process;
      processMap_["setCloudSafe"] = setCloudSafe_Process;
      processMap_["getCloudSafeList"] = getCloudSafeList_Process;
      processMap_["disconnect"] = disconnect_Process;
      processMap_["keepAlive"] = keepAlive_Process;
      processMap_["deactivate"] = deactivate_Process;
      processMap_["requestActivationCode"] = requestActivationCode_Process;
      processMap_["verifyPassword"] = verifyPassword_Process;
      processMap_["authenticateUser"] = authenticateUser_Process;
      processMap_["getAuthenticationMethods"] = getAuthenticationMethods_Process;
      processMap_["getDeviceOfflineKeys"] = getDeviceOfflineKeys_Process;
      processMap_["authConnect"] = authConnect_Process;
      processMap_["proxyData"] = proxyData_Process;
      processMap_["proxyClose"] = proxyClose_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void serverSignature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      serverSignature_args args = new serverSignature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      serverSignature_result result = new serverSignature_result();
      try
      {
        try
        {
          result.Success = iface_.serverSignature(args.ServerSignatureParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("serverSignature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("serverSignature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDomainSdkConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDomainSdkConfig_args args = new getDomainSdkConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDomainSdkConfig_result result = new getDomainSdkConfig_result();
      try
      {
        try
        {
          result.Success = iface_.getDomainSdkConfig(args.DomainSdkConfigParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getDomainSdkConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDomainSdkConfig", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerDispatcher_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDispatcher_args args = new registerDispatcher_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDispatcher_result result = new registerDispatcher_result();
      try
      {
        try
        {
          result.Success = iface_.registerDispatcher(args.RegisterDispatcherParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("registerDispatcher", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDispatcher", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void activation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      activation_args args = new activation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      activation_result result = new activation_result();
      try
      {
        try
        {
          result.Success = iface_.activation(args.ActivationParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("activation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("activation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      login_args args = new login_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      login_result result = new login_result();
      try
      {
        try
        {
          result.Success = iface_.login(args.LoginParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void clientSignature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      clientSignature_args args = new clientSignature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      clientSignature_result result = new clientSignature_result();
      try
      {
        try
        {
          result.Success = iface_.clientSignature(args.SignaturenParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("clientSignature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("clientSignature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTemplateFromId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTemplateFromId_args args = new getTemplateFromId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTemplateFromId_result result = new getTemplateFromId_result();
      try
      {
        try
        {
          result.Success = iface_.getTemplateFromId(args.Id);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getTemplateFromId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getTemplateFromId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessage_args args = new sendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessage_result result = new sendMessage_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessage(args.AppMessage);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageResponse_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageResponse_args args = new sendMessageResponse_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageResponse_result result = new sendMessageResponse_result();
      try
      {
        try
        {
          iface_.sendMessageResponse(args.AppMessageResponse);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageResponse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageResponse", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendLoginQrCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendLoginQrCode_args args = new sendLoginQrCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendLoginQrCode_result result = new sendLoginQrCode_result();
      try
      {
        try
        {
          iface_.sendLoginQrCode(args.Data);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("sendLoginQrCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendLoginQrCode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLoginQrCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLoginQrCode_args args = new getLoginQrCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLoginQrCode_result result = new getLoginQrCode_result();
      try
      {
        try
        {
          result.Success = iface_.getLoginQrCode(args.OperatorId, args.SessionId);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getLoginQrCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLoginQrCode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void changePassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      changePassword_args args = new changePassword_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      changePassword_result result = new changePassword_result();
      try
      {
        try
        {
          iface_.changePassword(args.EncPassword, args.NewEncPassword);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("changePassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("changePassword", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCloudSafe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCloudSafe_args args = new getCloudSafe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCloudSafe_result result = new getCloudSafe_result();
      try
      {
        try
        {
          result.Success = iface_.getCloudSafe(args.UniqueKey, args.UserLoginId);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getCloudSafe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCloudSafe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void renameCloudSafe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      renameCloudSafe_args args = new renameCloudSafe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      renameCloudSafe_result result = new renameCloudSafe_result();
      try
      {
        try
        {
          iface_.renameCloudSafe(args.UniqueKey, args.UserLoginId, args.NewName);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("renameCloudSafe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("renameCloudSafe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteCloudSafe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteCloudSafe_args args = new deleteCloudSafe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteCloudSafe_result result = new deleteCloudSafe_result();
      try
      {
        try
        {
          iface_.deleteCloudSafe(args.UniqueKey, args.UserLoginId);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("deleteCloudSafe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteCloudSafe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setCloudSafe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setCloudSafe_args args = new setCloudSafe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setCloudSafe_result result = new setCloudSafe_result();
      try
      {
        try
        {
          result.Success = iface_.setCloudSafe(args.SdkCloudSafe);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("setCloudSafe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setCloudSafe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCloudSafeList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCloudSafeList_args args = new getCloudSafeList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCloudSafeList_result result = new getCloudSafeList_result();
      try
      {
        try
        {
          result.Success = iface_.getCloudSafeList(args.NameFilter, args.IncludeShare, args.ModifiedFromEpoch, args.Owner);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getCloudSafeList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCloudSafeList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disconnect_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disconnect_args args = new disconnect_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disconnect_result result = new disconnect_result();
      try
      {
        iface_.disconnect(args.AppErrorCodes, args.Message);
        oprot.WriteMessageBegin(new TMessage("disconnect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disconnect", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void keepAlive_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      keepAlive_args args = new keepAlive_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      keepAlive_result result = new keepAlive_result();
      try
      {
        iface_.keepAlive();
        oprot.WriteMessageBegin(new TMessage("keepAlive", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("keepAlive", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deactivate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deactivate_args args = new deactivate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deactivate_result result = new deactivate_result();
      try
      {
        try
        {
          iface_.deactivate();
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("deactivate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deactivate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestActivationCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestActivationCode_args args = new requestActivationCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestActivationCode_result result = new requestActivationCode_result();
      try
      {
        try
        {
          result.Success = iface_.requestActivationCode();
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("requestActivationCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestActivationCode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyPassword_args args = new verifyPassword_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyPassword_result result = new verifyPassword_result();
      try
      {
        try
        {
          iface_.verifyPassword(args.EncPassword);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("verifyPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyPassword", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void authenticateUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      authenticateUser_args args = new authenticateUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      authenticateUser_result result = new authenticateUser_result();
      try
      {
        try
        {
          result.Success = iface_.authenticateUser(args.AuthUserParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("authenticateUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("authenticateUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAuthenticationMethods_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAuthenticationMethods_args args = new getAuthenticationMethods_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAuthenticationMethods_result result = new getAuthenticationMethods_result();
      try
      {
        try
        {
          result.Success = iface_.getAuthenticationMethods(args.AuthSelectParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getAuthenticationMethods", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAuthenticationMethods", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceOfflineKeys_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceOfflineKeys_args args = new getDeviceOfflineKeys_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceOfflineKeys_result result = new getDeviceOfflineKeys_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceOfflineKeys();
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceOfflineKeys", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceOfflineKeys", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void authConnect_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      authConnect_args args = new authConnect_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      authConnect_result result = new authConnect_result();
      try
      {
        try
        {
          result.Success = iface_.authConnect(args.AuthUserParam);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("authConnect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("authConnect", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void proxyData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      proxyData_args args = new proxyData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      proxyData_result result = new proxyData_result();
      try
      {
        try
        {
          result.Success = iface_.proxyData(args.Handle, args.Data);
        }
        catch (AppException ouch)
        {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("proxyData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("proxyData", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void proxyClose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      proxyClose_args args = new proxyClose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      proxyClose_result result = new proxyClose_result();
      try
      {
        iface_.proxyClose(args.Handle);
        oprot.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("proxyClose", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class serverSignature_args : TBase
  {
    private ServerSignatureParam _serverSignatureParam;

    public ServerSignatureParam ServerSignatureParam
    {
      get
      {
        return _serverSignatureParam;
      }
      set
      {
        __isset.serverSignatureParam = true;
        this._serverSignatureParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool serverSignatureParam;
    }

    public serverSignature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ServerSignatureParam = new ServerSignatureParam();
                ServerSignatureParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("serverSignature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ServerSignatureParam != null && __isset.serverSignatureParam) {
          field.Name = "serverSignatureParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ServerSignatureParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("serverSignature_args(");
      bool __first = true;
      if (ServerSignatureParam != null && __isset.serverSignatureParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServerSignatureParam: ");
        __sb.Append(ServerSignatureParam== null ? "<null>" : ServerSignatureParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class serverSignature_result : TBase
  {
    private ServerSignatureResponse _success;
    private AppException _ouch;

    public ServerSignatureResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public serverSignature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ServerSignatureResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("serverSignature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("serverSignature_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDomainSdkConfig_args : TBase
  {
    private DomainSdkConfigParam _domainSdkConfigParam;

    public DomainSdkConfigParam DomainSdkConfigParam
    {
      get
      {
        return _domainSdkConfigParam;
      }
      set
      {
        __isset.domainSdkConfigParam = true;
        this._domainSdkConfigParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool domainSdkConfigParam;
    }

    public getDomainSdkConfig_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DomainSdkConfigParam = new DomainSdkConfigParam();
                DomainSdkConfigParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDomainSdkConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DomainSdkConfigParam != null && __isset.domainSdkConfigParam) {
          field.Name = "domainSdkConfigParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DomainSdkConfigParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDomainSdkConfig_args(");
      bool __first = true;
      if (DomainSdkConfigParam != null && __isset.domainSdkConfigParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DomainSdkConfigParam: ");
        __sb.Append(DomainSdkConfigParam== null ? "<null>" : DomainSdkConfigParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDomainSdkConfig_result : TBase
  {
    private DomainSdkConfigResponse _success;
    private AppException _ouch;

    public DomainSdkConfigResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getDomainSdkConfig_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DomainSdkConfigResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDomainSdkConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDomainSdkConfig_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDispatcher_args : TBase
  {
    private RegisterDispatcherParam _registerDispatcherParam;

    public RegisterDispatcherParam RegisterDispatcherParam
    {
      get
      {
        return _registerDispatcherParam;
      }
      set
      {
        __isset.registerDispatcherParam = true;
        this._registerDispatcherParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool registerDispatcherParam;
    }

    public registerDispatcher_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RegisterDispatcherParam = new RegisterDispatcherParam();
                RegisterDispatcherParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDispatcher_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RegisterDispatcherParam != null && __isset.registerDispatcherParam) {
          field.Name = "registerDispatcherParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RegisterDispatcherParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDispatcher_args(");
      bool __first = true;
      if (RegisterDispatcherParam != null && __isset.registerDispatcherParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegisterDispatcherParam: ");
        __sb.Append(RegisterDispatcherParam== null ? "<null>" : RegisterDispatcherParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDispatcher_result : TBase
  {
    private RegisterDispatcherResponse _success;
    private AppException _ouch;

    public RegisterDispatcherResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public registerDispatcher_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RegisterDispatcherResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDispatcher_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDispatcher_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activation_args : TBase
  {
    private ActivationParam _activationParam;

    public ActivationParam ActivationParam
    {
      get
      {
        return _activationParam;
      }
      set
      {
        __isset.activationParam = true;
        this._activationParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activationParam;
    }

    public activation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ActivationParam = new ActivationParam();
                ActivationParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("activation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ActivationParam != null && __isset.activationParam) {
          field.Name = "activationParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ActivationParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activation_args(");
      bool __first = true;
      if (ActivationParam != null && __isset.activationParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActivationParam: ");
        __sb.Append(ActivationParam== null ? "<null>" : ActivationParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activation_result : TBase
  {
    private ActivationResponse _success;
    private AppException _ouch;

    public ActivationResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public activation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ActivationResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("activation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class login_args : TBase
  {
    private LoginParam _loginParam;

    public LoginParam LoginParam
    {
      get
      {
        return _loginParam;
      }
      set
      {
        __isset.loginParam = true;
        this._loginParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool loginParam;
    }

    public login_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                LoginParam = new LoginParam();
                LoginParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LoginParam != null && __isset.loginParam) {
          field.Name = "loginParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          LoginParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("login_args(");
      bool __first = true;
      if (LoginParam != null && __isset.loginParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LoginParam: ");
        __sb.Append(LoginParam== null ? "<null>" : LoginParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class login_result : TBase
  {
    private LoginResponse _success;
    private AppException _ouch;

    public LoginResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public login_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("login_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clientSignature_args : TBase
  {
    private SignatureParam _signaturenParam;

    public SignatureParam SignaturenParam
    {
      get
      {
        return _signaturenParam;
      }
      set
      {
        __isset.signaturenParam = true;
        this._signaturenParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool signaturenParam;
    }

    public clientSignature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SignaturenParam = new SignatureParam();
                SignaturenParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clientSignature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SignaturenParam != null && __isset.signaturenParam) {
          field.Name = "signaturenParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SignaturenParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clientSignature_args(");
      bool __first = true;
      if (SignaturenParam != null && __isset.signaturenParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SignaturenParam: ");
        __sb.Append(SignaturenParam== null ? "<null>" : SignaturenParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clientSignature_result : TBase
  {
    private SignatureResponse _success;
    private AppException _ouch;

    public SignatureResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public clientSignature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SignatureResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clientSignature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clientSignature_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTemplateFromId_args : TBase
  {
    private int _id;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getTemplateFromId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTemplateFromId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTemplateFromId_args(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTemplateFromId_result : TBase
  {
    private Template _success;
    private AppException _ouch;

    public Template Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getTemplateFromId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Template();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTemplateFromId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTemplateFromId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_args : TBase
  {
    private AppMessage _appMessage;

    public AppMessage AppMessage
    {
      get
      {
        return _appMessage;
      }
      set
      {
        __isset.appMessage = true;
        this._appMessage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool appMessage;
    }

    public sendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AppMessage = new AppMessage();
                AppMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AppMessage != null && __isset.appMessage) {
          field.Name = "appMessage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AppMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_args(");
      bool __first = true;
      if (AppMessage != null && __isset.appMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppMessage: ");
        __sb.Append(AppMessage== null ? "<null>" : AppMessage.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_result : TBase
  {
    private bool _success;
    private AppException _ouch;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public sendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageResponse_args : TBase
  {
    private AppMessageResponse _appMessageResponse;

    public AppMessageResponse AppMessageResponse
    {
      get
      {
        return _appMessageResponse;
      }
      set
      {
        __isset.appMessageResponse = true;
        this._appMessageResponse = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool appMessageResponse;
    }

    public sendMessageResponse_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AppMessageResponse = new AppMessageResponse();
                AppMessageResponse.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageResponse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AppMessageResponse != null && __isset.appMessageResponse) {
          field.Name = "appMessageResponse";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AppMessageResponse.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageResponse_args(");
      bool __first = true;
      if (AppMessageResponse != null && __isset.appMessageResponse) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppMessageResponse: ");
        __sb.Append(AppMessageResponse== null ? "<null>" : AppMessageResponse.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageResponse_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public sendMessageResponse_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageResponse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageResponse_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendLoginQrCode_args : TBase
  {
    private string _data;

    public string Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data;
    }

    public sendLoginQrCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Data = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendLoginQrCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendLoginQrCode_args(");
      bool __first = true;
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendLoginQrCode_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public sendLoginQrCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendLoginQrCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendLoginQrCode_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLoginQrCode_args : TBase
  {
    private string _operatorId;
    private string _sessionId;

    public string OperatorId
    {
      get
      {
        return _operatorId;
      }
      set
      {
        __isset.operatorId = true;
        this._operatorId = value;
      }
    }

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool operatorId;
      public bool sessionId;
    }

    public getLoginQrCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OperatorId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLoginQrCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (OperatorId != null && __isset.operatorId) {
          field.Name = "operatorId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OperatorId);
          oprot.WriteFieldEnd();
        }
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLoginQrCode_args(");
      bool __first = true;
      if (OperatorId != null && __isset.operatorId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OperatorId: ");
        __sb.Append(OperatorId);
      }
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLoginQrCode_result : TBase
  {
    private QrCodeResponse _success;
    private AppException _ouch;

    public QrCodeResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getLoginQrCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QrCodeResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLoginQrCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLoginQrCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class changePassword_args : TBase
  {
    private byte[] _encPassword;
    private byte[] _newEncPassword;

    public byte[] EncPassword
    {
      get
      {
        return _encPassword;
      }
      set
      {
        __isset.encPassword = true;
        this._encPassword = value;
      }
    }

    public byte[] NewEncPassword
    {
      get
      {
        return _newEncPassword;
      }
      set
      {
        __isset.newEncPassword = true;
        this._newEncPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool encPassword;
      public bool newEncPassword;
    }

    public changePassword_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                EncPassword = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NewEncPassword = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("changePassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EncPassword != null && __isset.encPassword) {
          field.Name = "encPassword";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(EncPassword);
          oprot.WriteFieldEnd();
        }
        if (NewEncPassword != null && __isset.newEncPassword) {
          field.Name = "newEncPassword";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(NewEncPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("changePassword_args(");
      bool __first = true;
      if (EncPassword != null && __isset.encPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncPassword: ");
        __sb.Append(EncPassword);
      }
      if (NewEncPassword != null && __isset.newEncPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NewEncPassword: ");
        __sb.Append(NewEncPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class changePassword_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public changePassword_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("changePassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("changePassword_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCloudSafe_args : TBase
  {
    private SdkCloudSafeKey _uniqueKey;
    private string _userLoginId;

    public SdkCloudSafeKey UniqueKey
    {
      get
      {
        return _uniqueKey;
      }
      set
      {
        __isset.uniqueKey = true;
        this._uniqueKey = value;
      }
    }

    public string UserLoginId
    {
      get
      {
        return _userLoginId;
      }
      set
      {
        __isset.userLoginId = true;
        this._userLoginId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uniqueKey;
      public bool userLoginId;
    }

    public getCloudSafe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UniqueKey = new SdkCloudSafeKey();
                UniqueKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserLoginId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCloudSafe_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UniqueKey != null && __isset.uniqueKey) {
          field.Name = "uniqueKey";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UniqueKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserLoginId != null && __isset.userLoginId) {
          field.Name = "userLoginId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLoginId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCloudSafe_args(");
      bool __first = true;
      if (UniqueKey != null && __isset.uniqueKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UniqueKey: ");
        __sb.Append(UniqueKey== null ? "<null>" : UniqueKey.ToString());
      }
      if (UserLoginId != null && __isset.userLoginId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLoginId: ");
        __sb.Append(UserLoginId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCloudSafe_result : TBase
  {
    private SdkCloudSafe _success;
    private AppException _ouch;

    public SdkCloudSafe Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getCloudSafe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SdkCloudSafe();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCloudSafe_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCloudSafe_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class renameCloudSafe_args : TBase
  {
    private SdkCloudSafeKey _uniqueKey;
    private string _userLoginId;
    private string _newName;

    public SdkCloudSafeKey UniqueKey
    {
      get
      {
        return _uniqueKey;
      }
      set
      {
        __isset.uniqueKey = true;
        this._uniqueKey = value;
      }
    }

    public string UserLoginId
    {
      get
      {
        return _userLoginId;
      }
      set
      {
        __isset.userLoginId = true;
        this._userLoginId = value;
      }
    }

    public string NewName
    {
      get
      {
        return _newName;
      }
      set
      {
        __isset.newName = true;
        this._newName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uniqueKey;
      public bool userLoginId;
      public bool newName;
    }

    public renameCloudSafe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UniqueKey = new SdkCloudSafeKey();
                UniqueKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserLoginId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                NewName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("renameCloudSafe_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UniqueKey != null && __isset.uniqueKey) {
          field.Name = "uniqueKey";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UniqueKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserLoginId != null && __isset.userLoginId) {
          field.Name = "userLoginId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLoginId);
          oprot.WriteFieldEnd();
        }
        if (NewName != null && __isset.newName) {
          field.Name = "newName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("renameCloudSafe_args(");
      bool __first = true;
      if (UniqueKey != null && __isset.uniqueKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UniqueKey: ");
        __sb.Append(UniqueKey== null ? "<null>" : UniqueKey.ToString());
      }
      if (UserLoginId != null && __isset.userLoginId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLoginId: ");
        __sb.Append(UserLoginId);
      }
      if (NewName != null && __isset.newName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NewName: ");
        __sb.Append(NewName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class renameCloudSafe_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public renameCloudSafe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("renameCloudSafe_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("renameCloudSafe_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteCloudSafe_args : TBase
  {
    private SdkCloudSafeKey _uniqueKey;
    private string _userLoginId;

    public SdkCloudSafeKey UniqueKey
    {
      get
      {
        return _uniqueKey;
      }
      set
      {
        __isset.uniqueKey = true;
        this._uniqueKey = value;
      }
    }

    public string UserLoginId
    {
      get
      {
        return _userLoginId;
      }
      set
      {
        __isset.userLoginId = true;
        this._userLoginId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uniqueKey;
      public bool userLoginId;
    }

    public deleteCloudSafe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UniqueKey = new SdkCloudSafeKey();
                UniqueKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserLoginId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteCloudSafe_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UniqueKey != null && __isset.uniqueKey) {
          field.Name = "uniqueKey";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UniqueKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (UserLoginId != null && __isset.userLoginId) {
          field.Name = "userLoginId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLoginId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteCloudSafe_args(");
      bool __first = true;
      if (UniqueKey != null && __isset.uniqueKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UniqueKey: ");
        __sb.Append(UniqueKey== null ? "<null>" : UniqueKey.ToString());
      }
      if (UserLoginId != null && __isset.userLoginId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLoginId: ");
        __sb.Append(UserLoginId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteCloudSafe_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public deleteCloudSafe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteCloudSafe_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteCloudSafe_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCloudSafe_args : TBase
  {
    private SdkCloudSafe _sdkCloudSafe;

    public SdkCloudSafe SdkCloudSafe
    {
      get
      {
        return _sdkCloudSafe;
      }
      set
      {
        __isset.sdkCloudSafe = true;
        this._sdkCloudSafe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sdkCloudSafe;
    }

    public setCloudSafe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SdkCloudSafe = new SdkCloudSafe();
                SdkCloudSafe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCloudSafe_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SdkCloudSafe != null && __isset.sdkCloudSafe) {
          field.Name = "sdkCloudSafe";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SdkCloudSafe.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCloudSafe_args(");
      bool __first = true;
      if (SdkCloudSafe != null && __isset.sdkCloudSafe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkCloudSafe: ");
        __sb.Append(SdkCloudSafe== null ? "<null>" : SdkCloudSafe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCloudSafe_result : TBase
  {
    private long _success;
    private AppException _ouch;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public setCloudSafe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCloudSafe_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCloudSafe_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCloudSafeList_args : TBase
  {
    private string _nameFilter;
    private bool _includeShare;
    private long _modifiedFromEpoch;
    private CloudSafeOwner _owner;

    public string NameFilter
    {
      get
      {
        return _nameFilter;
      }
      set
      {
        __isset.nameFilter = true;
        this._nameFilter = value;
      }
    }

    public bool IncludeShare
    {
      get
      {
        return _includeShare;
      }
      set
      {
        __isset.includeShare = true;
        this._includeShare = value;
      }
    }

    public long ModifiedFromEpoch
    {
      get
      {
        return _modifiedFromEpoch;
      }
      set
      {
        __isset.modifiedFromEpoch = true;
        this._modifiedFromEpoch = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref=".CloudSafeOwner"/>
    /// </summary>
    public CloudSafeOwner Owner
    {
      get
      {
        return _owner;
      }
      set
      {
        __isset.owner = true;
        this._owner = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool nameFilter;
      public bool includeShare;
      public bool modifiedFromEpoch;
      public bool owner;
    }

    public getCloudSafeList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NameFilter = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IncludeShare = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ModifiedFromEpoch = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Owner = (CloudSafeOwner)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCloudSafeList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NameFilter != null && __isset.nameFilter) {
          field.Name = "nameFilter";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NameFilter);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeShare) {
          field.Name = "includeShare";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeShare);
          oprot.WriteFieldEnd();
        }
        if (__isset.modifiedFromEpoch) {
          field.Name = "modifiedFromEpoch";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ModifiedFromEpoch);
          oprot.WriteFieldEnd();
        }
        if (__isset.owner) {
          field.Name = "owner";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Owner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCloudSafeList_args(");
      bool __first = true;
      if (NameFilter != null && __isset.nameFilter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NameFilter: ");
        __sb.Append(NameFilter);
      }
      if (__isset.includeShare) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeShare: ");
        __sb.Append(IncludeShare);
      }
      if (__isset.modifiedFromEpoch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModifiedFromEpoch: ");
        __sb.Append(ModifiedFromEpoch);
      }
      if (__isset.owner) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Owner: ");
        __sb.Append(Owner);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCloudSafeList_result : TBase
  {
    private List<SdkCloudSafe> _success;
    private AppException _ouch;

    public List<SdkCloudSafe> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getCloudSafeList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SdkCloudSafe>();
                  TList _list13 = iprot.ReadListBegin();
                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                  {
                    SdkCloudSafe _elem15;
                    _elem15 = new SdkCloudSafe();
                    _elem15.Read(iprot);
                    Success.Add(_elem15);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCloudSafeList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SdkCloudSafe _iter16 in Success)
              {
                _iter16.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCloudSafeList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disconnect_args : TBase
  {
    private AppErrorCodes _appErrorCodes;
    private string _message;

    /// <summary>
    /// 
    /// <seealso cref=".AppErrorCodes"/>
    /// </summary>
    public AppErrorCodes AppErrorCodes
    {
      get
      {
        return _appErrorCodes;
      }
      set
      {
        __isset.appErrorCodes = true;
        this._appErrorCodes = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool appErrorCodes;
      public bool message;
    }

    public disconnect_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                AppErrorCodes = (AppErrorCodes)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disconnect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.appErrorCodes) {
          field.Name = "appErrorCodes";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)AppErrorCodes);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disconnect_args(");
      bool __first = true;
      if (__isset.appErrorCodes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppErrorCodes: ");
        __sb.Append(AppErrorCodes);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disconnect_result : TBase
  {

    public disconnect_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disconnect_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disconnect_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class keepAlive_args : TBase
  {

    public keepAlive_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("keepAlive_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("keepAlive_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class keepAlive_result : TBase
  {

    public keepAlive_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("keepAlive_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("keepAlive_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deactivate_args : TBase
  {

    public deactivate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deactivate_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deactivate_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deactivate_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public deactivate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deactivate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deactivate_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestActivationCode_args : TBase
  {

    public requestActivationCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestActivationCode_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestActivationCode_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestActivationCode_result : TBase
  {
    private RequestActivationCodeResponse _success;
    private AppException _ouch;

    public RequestActivationCodeResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public requestActivationCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RequestActivationCodeResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestActivationCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestActivationCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPassword_args : TBase
  {
    private byte[] _encPassword;

    public byte[] EncPassword
    {
      get
      {
        return _encPassword;
      }
      set
      {
        __isset.encPassword = true;
        this._encPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool encPassword;
    }

    public verifyPassword_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                EncPassword = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EncPassword != null && __isset.encPassword) {
          field.Name = "encPassword";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(EncPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPassword_args(");
      bool __first = true;
      if (EncPassword != null && __isset.encPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncPassword: ");
        __sb.Append(EncPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPassword_result : TBase
  {
    private AppException _ouch;

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ouch;
    }

    public verifyPassword_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPassword_result(");
      bool __first = true;
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authenticateUser_args : TBase
  {
    private AuthUserParam _authUserParam;

    public AuthUserParam AuthUserParam
    {
      get
      {
        return _authUserParam;
      }
      set
      {
        __isset.authUserParam = true;
        this._authUserParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool authUserParam;
    }

    public authenticateUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AuthUserParam = new AuthUserParam();
                AuthUserParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("authenticateUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthUserParam != null && __isset.authUserParam) {
          field.Name = "authUserParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AuthUserParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("authenticateUser_args(");
      bool __first = true;
      if (AuthUserParam != null && __isset.authUserParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthUserParam: ");
        __sb.Append(AuthUserParam== null ? "<null>" : AuthUserParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authenticateUser_result : TBase
  {
    private AuthUserResponse _success;
    private AppException _ouch;

    public AuthUserResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public authenticateUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AuthUserResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("authenticateUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("authenticateUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAuthenticationMethods_args : TBase
  {
    private AuthSelectParam _authSelectParam;

    public AuthSelectParam AuthSelectParam
    {
      get
      {
        return _authSelectParam;
      }
      set
      {
        __isset.authSelectParam = true;
        this._authSelectParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool authSelectParam;
    }

    public getAuthenticationMethods_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AuthSelectParam = new AuthSelectParam();
                AuthSelectParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAuthenticationMethods_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthSelectParam != null && __isset.authSelectParam) {
          field.Name = "authSelectParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AuthSelectParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAuthenticationMethods_args(");
      bool __first = true;
      if (AuthSelectParam != null && __isset.authSelectParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthSelectParam: ");
        __sb.Append(AuthSelectParam== null ? "<null>" : AuthSelectParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAuthenticationMethods_result : TBase
  {
    private AuthSelectResponse _success;
    private AppException _ouch;

    public AuthSelectResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getAuthenticationMethods_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AuthSelectResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAuthenticationMethods_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAuthenticationMethods_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceOfflineKeys_args : TBase
  {

    public getDeviceOfflineKeys_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceOfflineKeys_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceOfflineKeys_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceOfflineKeys_result : TBase
  {
    private List<DeviceOfflineKey> _success;
    private AppException _ouch;

    public List<DeviceOfflineKey> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public getDeviceOfflineKeys_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<DeviceOfflineKey>();
                  TList _list17 = iprot.ReadListBegin();
                  for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                  {
                    DeviceOfflineKey _elem19;
                    _elem19 = new DeviceOfflineKey();
                    _elem19.Read(iprot);
                    Success.Add(_elem19);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceOfflineKeys_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (DeviceOfflineKey _iter20 in Success)
              {
                _iter20.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceOfflineKeys_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authConnect_args : TBase
  {
    private AuthConnectParam _authUserParam;

    public AuthConnectParam AuthUserParam
    {
      get
      {
        return _authUserParam;
      }
      set
      {
        __isset.authUserParam = true;
        this._authUserParam = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool authUserParam;
    }

    public authConnect_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AuthUserParam = new AuthConnectParam();
                AuthUserParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("authConnect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthUserParam != null && __isset.authUserParam) {
          field.Name = "authUserParam";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AuthUserParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("authConnect_args(");
      bool __first = true;
      if (AuthUserParam != null && __isset.authUserParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthUserParam: ");
        __sb.Append(AuthUserParam== null ? "<null>" : AuthUserParam.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class authConnect_result : TBase
  {
    private int _success;
    private AppException _ouch;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public authConnect_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("authConnect_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("authConnect_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyData_args : TBase
  {
    private long _handle;
    private byte[] _data;

    public long Handle
    {
      get
      {
        return _handle;
      }
      set
      {
        __isset.handle = true;
        this._handle = value;
      }
    }

    public byte[] Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool handle;
      public bool data;
    }

    public proxyData_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Handle = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Data = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.handle) {
          field.Name = "handle";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Handle);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyData_args(");
      bool __first = true;
      if (__isset.handle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Handle: ");
        __sb.Append(Handle);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyData_result : TBase
  {
    private byte[] _success;
    private AppException _ouch;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AppException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public proxyData_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ouch = new AppException();
                Ouch.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (Ouch != null) {
            field.Name = "Ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyData_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ouch != null && __isset.ouch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ouch: ");
        __sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyClose_args : TBase
  {
    private long _handle;

    public long Handle
    {
      get
      {
        return _handle;
      }
      set
      {
        __isset.handle = true;
        this._handle = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool handle;
    }

    public proxyClose_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Handle = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyClose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.handle) {
          field.Name = "handle";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Handle);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyClose_args(");
      bool __first = true;
      if (__isset.handle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Handle: ");
        __sb.Append(Handle);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class proxyClose_result : TBase
  {

    public proxyClose_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("proxyClose_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("proxyClose_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
