/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AppMessageResponse : TBase
{
  private long _id;
  private string _actionId;
  private AppErrorCodes _errorCode;
  private string _errorMessage;
  private bool _read;
  private Dictionary<string, string> _responseData;
  private byte[] _signature;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string ActionId
  {
    get
    {
      return _actionId;
    }
    set
    {
      __isset.actionId = true;
      this._actionId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="AppErrorCodes"/>
  /// </summary>
  public AppErrorCodes ErrorCode
  {
    get
    {
      return _errorCode;
    }
    set
    {
      __isset.errorCode = true;
      this._errorCode = value;
    }
  }

  public string ErrorMessage
  {
    get
    {
      return _errorMessage;
    }
    set
    {
      __isset.errorMessage = true;
      this._errorMessage = value;
    }
  }

  public bool Read_
  {
    get
    {
      return _read;
    }
    set
    {
      __isset.read = true;
      this._read = value;
    }
  }

  public Dictionary<string, string> ResponseData
  {
    get
    {
      return _responseData;
    }
    set
    {
      __isset.responseData = true;
      this._responseData = value;
    }
  }

  public byte[] Signature
  {
    get
    {
      return _signature;
    }
    set
    {
      __isset.signature = true;
      this._signature = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool actionId;
    public bool errorCode;
    public bool errorMessage;
    public bool read;
    public bool responseData;
    public bool signature;
  }

  public AppMessageResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ActionId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ErrorCode = (AppErrorCodes)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ErrorMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Read_ = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                ResponseData = new Dictionary<string, string>();
                TMap _map10 = iprot.ReadMapBegin();
                for( int _i11 = 0; _i11 < _map10.Count; ++_i11)
                {
                  string _key12;
                  string _val13;
                  _key12 = iprot.ReadString();
                  _val13 = iprot.ReadString();
                  ResponseData[_key12] = _val13;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Signature = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AppMessageResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (ActionId != null && __isset.actionId) {
        field.Name = "actionId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ActionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.errorCode) {
        field.Name = "errorCode";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ErrorCode);
        oprot.WriteFieldEnd();
      }
      if (ErrorMessage != null && __isset.errorMessage) {
        field.Name = "errorMessage";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ErrorMessage);
        oprot.WriteFieldEnd();
      }
      if (__isset.read) {
        field.Name = "read";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Read_);
        oprot.WriteFieldEnd();
      }
      if (ResponseData != null && __isset.responseData) {
        field.Name = "responseData";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ResponseData.Count));
          foreach (string _iter14 in ResponseData.Keys)
          {
            oprot.WriteString(_iter14);
            oprot.WriteString(ResponseData[_iter14]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Signature != null && __isset.signature) {
        field.Name = "signature";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Signature);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AppMessageResponse(");
    bool __first = true;
    if (__isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (ActionId != null && __isset.actionId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActionId: ");
      __sb.Append(ActionId);
    }
    if (__isset.errorCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorCode: ");
      __sb.Append(ErrorCode);
    }
    if (ErrorMessage != null && __isset.errorMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorMessage: ");
      __sb.Append(ErrorMessage);
    }
    if (__isset.read) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Read_: ");
      __sb.Append(Read_);
    }
    if (ResponseData != null && __isset.responseData) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ResponseData: ");
      __sb.Append(ResponseData);
    }
    if (Signature != null && __isset.signature) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Signature: ");
      __sb.Append(Signature);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

