/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProxyOpenParam : TBase
{
  private long _handle;
  private string _ipHost;
  private int _port;
  private bool _secure;
  private bool _verifyCertificate;
  private int _dataWait;

  public long Handle
  {
    get
    {
      return _handle;
    }
    set
    {
      __isset.handle = true;
      this._handle = value;
    }
  }

  public string IpHost
  {
    get
    {
      return _ipHost;
    }
    set
    {
      __isset.ipHost = true;
      this._ipHost = value;
    }
  }

  public int Port
  {
    get
    {
      return _port;
    }
    set
    {
      __isset.port = true;
      this._port = value;
    }
  }

  public bool Secure
  {
    get
    {
      return _secure;
    }
    set
    {
      __isset.secure = true;
      this._secure = value;
    }
  }

  public bool VerifyCertificate
  {
    get
    {
      return _verifyCertificate;
    }
    set
    {
      __isset.verifyCertificate = true;
      this._verifyCertificate = value;
    }
  }

  public int DataWait
  {
    get
    {
      return _dataWait;
    }
    set
    {
      __isset.dataWait = true;
      this._dataWait = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool handle;
    public bool ipHost;
    public bool port;
    public bool secure;
    public bool verifyCertificate;
    public bool dataWait;
  }

  public ProxyOpenParam() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Handle = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              IpHost = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              Secure = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              VerifyCertificate = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              DataWait = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProxyOpenParam");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.handle) {
        field.Name = "handle";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Handle);
        oprot.WriteFieldEnd();
      }
      if (IpHost != null && __isset.ipHost) {
        field.Name = "ipHost";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IpHost);
        oprot.WriteFieldEnd();
      }
      if (__isset.port) {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Port);
        oprot.WriteFieldEnd();
      }
      if (__isset.secure) {
        field.Name = "secure";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Secure);
        oprot.WriteFieldEnd();
      }
      if (__isset.verifyCertificate) {
        field.Name = "verifyCertificate";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(VerifyCertificate);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataWait) {
        field.Name = "dataWait";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DataWait);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProxyOpenParam(");
    bool __first = true;
    if (__isset.handle) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Handle: ");
      __sb.Append(Handle);
    }
    if (IpHost != null && __isset.ipHost) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IpHost: ");
      __sb.Append(IpHost);
    }
    if (__isset.port) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Port: ");
      __sb.Append(Port);
    }
    if (__isset.secure) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Secure: ");
      __sb.Append(Secure);
    }
    if (__isset.verifyCertificate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VerifyCertificate: ");
      __sb.Append(VerifyCertificate);
    }
    if (__isset.dataWait) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DataWait: ");
      __sb.Append(DataWait);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

