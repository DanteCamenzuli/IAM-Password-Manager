/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ActivationResponse : TBase
{
  private bool _updateAvailable;
  private int _deviceId;
  private byte[] _signedCertificate;
  private byte[] _deviceKey;
  private byte[] _offlineKey;
  private string _deviceName;

  public bool UpdateAvailable
  {
    get
    {
      return _updateAvailable;
    }
    set
    {
      __isset.updateAvailable = true;
      this._updateAvailable = value;
    }
  }

  public int DeviceId
  {
    get
    {
      return _deviceId;
    }
    set
    {
      __isset.deviceId = true;
      this._deviceId = value;
    }
  }

  public byte[] SignedCertificate
  {
    get
    {
      return _signedCertificate;
    }
    set
    {
      __isset.signedCertificate = true;
      this._signedCertificate = value;
    }
  }

  public byte[] DeviceKey
  {
    get
    {
      return _deviceKey;
    }
    set
    {
      __isset.deviceKey = true;
      this._deviceKey = value;
    }
  }

  public byte[] OfflineKey
  {
    get
    {
      return _offlineKey;
    }
    set
    {
      __isset.offlineKey = true;
      this._offlineKey = value;
    }
  }

  public string DeviceName
  {
    get
    {
      return _deviceName;
    }
    set
    {
      __isset.deviceName = true;
      this._deviceName = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool updateAvailable;
    public bool deviceId;
    public bool signedCertificate;
    public bool deviceKey;
    public bool offlineKey;
    public bool deviceName;
  }

  public ActivationResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              UpdateAvailable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DeviceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              SignedCertificate = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              DeviceKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              OfflineKey = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              DeviceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ActivationResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.updateAvailable) {
        field.Name = "updateAvailable";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(UpdateAvailable);
        oprot.WriteFieldEnd();
      }
      if (__isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (SignedCertificate != null && __isset.signedCertificate) {
        field.Name = "signedCertificate";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(SignedCertificate);
        oprot.WriteFieldEnd();
      }
      if (DeviceKey != null && __isset.deviceKey) {
        field.Name = "deviceKey";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(DeviceKey);
        oprot.WriteFieldEnd();
      }
      if (OfflineKey != null && __isset.offlineKey) {
        field.Name = "offlineKey";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(OfflineKey);
        oprot.WriteFieldEnd();
      }
      if (DeviceName != null && __isset.deviceName) {
        field.Name = "deviceName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ActivationResponse(");
    bool __first = true;
    if (__isset.updateAvailable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UpdateAvailable: ");
      __sb.Append(UpdateAvailable);
    }
    if (__isset.deviceId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceId: ");
      __sb.Append(DeviceId);
    }
    if (SignedCertificate != null && __isset.signedCertificate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SignedCertificate: ");
      __sb.Append(SignedCertificate);
    }
    if (DeviceKey != null && __isset.deviceKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceKey: ");
      __sb.Append(DeviceKey);
    }
    if (OfflineKey != null && __isset.offlineKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OfflineKey: ");
      __sb.Append(OfflineKey);
    }
    if (DeviceName != null && __isset.deviceName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceName: ");
      __sb.Append(DeviceName);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

