/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ServerSignatureResponse : TBase
{
  private byte[] _serverSignature;
  private AppVersion _serverVersion;
  private bool _isReverseProxy;
  private bool _isDispatched;
  private byte[] _challenge;

  public byte[] ServerSignature
  {
    get
    {
      return _serverSignature;
    }
    set
    {
      __isset.serverSignature = true;
      this._serverSignature = value;
    }
  }

  public AppVersion ServerVersion
  {
    get
    {
      return _serverVersion;
    }
    set
    {
      __isset.serverVersion = true;
      this._serverVersion = value;
    }
  }

  public bool IsReverseProxy
  {
    get
    {
      return _isReverseProxy;
    }
    set
    {
      __isset.isReverseProxy = true;
      this._isReverseProxy = value;
    }
  }

  public bool IsDispatched
  {
    get
    {
      return _isDispatched;
    }
    set
    {
      __isset.isDispatched = true;
      this._isDispatched = value;
    }
  }

  public byte[] Challenge
  {
    get
    {
      return _challenge;
    }
    set
    {
      __isset.challenge = true;
      this._challenge = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool serverSignature;
    public bool serverVersion;
    public bool isReverseProxy;
    public bool isDispatched;
    public bool challenge;
  }

  public ServerSignatureResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ServerSignature = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              ServerVersion = new AppVersion();
              ServerVersion.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              IsReverseProxy = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsDispatched = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Challenge = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ServerSignatureResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ServerSignature != null && __isset.serverSignature) {
        field.Name = "serverSignature";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ServerSignature);
        oprot.WriteFieldEnd();
      }
      if (ServerVersion != null && __isset.serverVersion) {
        field.Name = "serverVersion";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        ServerVersion.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.isReverseProxy) {
        field.Name = "isReverseProxy";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsReverseProxy);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDispatched) {
        field.Name = "isDispatched";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDispatched);
        oprot.WriteFieldEnd();
      }
      if (Challenge != null && __isset.challenge) {
        field.Name = "challenge";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Challenge);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ServerSignatureResponse(");
    bool __first = true;
    if (ServerSignature != null && __isset.serverSignature) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ServerSignature: ");
      __sb.Append(ServerSignature);
    }
    if (ServerVersion != null && __isset.serverVersion) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ServerVersion: ");
      __sb.Append(ServerVersion== null ? "<null>" : ServerVersion.ToString());
    }
    if (__isset.isReverseProxy) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IsReverseProxy: ");
      __sb.Append(IsReverseProxy);
    }
    if (__isset.isDispatched) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IsDispatched: ");
      __sb.Append(IsDispatched);
    }
    if (Challenge != null && __isset.challenge) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Challenge: ");
      __sb.Append(Challenge);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

